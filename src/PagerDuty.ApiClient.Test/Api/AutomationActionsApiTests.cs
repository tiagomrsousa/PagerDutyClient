/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Api;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Test
{
    /// <summary>
    ///  Class for testing AutomationActionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AutomationActionsApiTests
    {
        private AutomationActionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AutomationActionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AutomationActionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AutomationActionsApi
            //Assert.IsInstanceOfType(typeof(AutomationActionsApi), instance, "instance is a AutomationActionsApi");
        }

        /// <summary>
        /// Test CreateAutomationAction
        /// </summary>
        [Test]
        public void CreateAutomationActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //var response = instance.CreateAutomationAction(body, accept, contentType, authorization);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateAutomationActionInvocation
        /// </summary>
        [Test]
        public void CreateAutomationActionInvocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.CreateAutomationActionInvocation(body, accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateAutomationActionServiceAssocation
        /// </summary>
        [Test]
        public void CreateAutomationActionServiceAssocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.CreateAutomationActionServiceAssocation(body, accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateAutomationActionTeamAssociation
        /// </summary>
        [Test]
        public void CreateAutomationActionTeamAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.CreateAutomationActionTeamAssociation(body, accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateAutomationActionsRunner
        /// </summary>
        [Test]
        public void CreateAutomationActionsRunnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //var response = instance.CreateAutomationActionsRunner(body, accept, contentType, authorization);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateAutomationActionsRunnerTeamAssociation
        /// </summary>
        [Test]
        public void CreateAutomationActionsRunnerTeamAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.CreateAutomationActionsRunnerTeamAssociation(body, accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteAutomationAction
        /// </summary>
        [Test]
        public void DeleteAutomationActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.DeleteAutomationAction(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test DeleteAutomationActionServiceAssociation
        /// </summary>
        [Test]
        public void DeleteAutomationActionServiceAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string serviceId = null;
            //instance.DeleteAutomationActionServiceAssociation(accept, contentType, authorization, id, serviceId);
            
        }
        /// <summary>
        /// Test DeleteAutomationActionTeamAssociation
        /// </summary>
        [Test]
        public void DeleteAutomationActionTeamAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string teamId = null;
            //instance.DeleteAutomationActionTeamAssociation(accept, contentType, authorization, id, teamId);
            
        }
        /// <summary>
        /// Test DeleteAutomationActionsRunner
        /// </summary>
        [Test]
        public void DeleteAutomationActionsRunnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.DeleteAutomationActionsRunner(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test DeleteAutomationActionsRunnerTeamAssociation
        /// </summary>
        [Test]
        public void DeleteAutomationActionsRunnerTeamAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string teamId = null;
            //instance.DeleteAutomationActionsRunnerTeamAssociation(accept, contentType, authorization, id, teamId);
            
        }
        /// <summary>
        /// Test GetAllAutomationActions
        /// </summary>
        [Test]
        public void GetAllAutomationActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //int? limit = null;
            //string cursor = null;
            //string name = null;
            //string runnerId = null;
            //AutomationActionsActionClassificationEnum classification = null;
            //string teamId = null;
            //string serviceId = null;
            //string actionType = null;
            //var response = instance.GetAllAutomationActions(accept, contentType, authorization, limit, cursor, name, runnerId, classification, teamId, serviceId, actionType);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationAction
        /// </summary>
        [Test]
        public void GetAutomationActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetAutomationAction(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsActionServiceAssociation
        /// </summary>
        [Test]
        public void GetAutomationActionsActionServiceAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string serviceId = null;
            //var response = instance.GetAutomationActionsActionServiceAssociation(accept, contentType, authorization, id, serviceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsActionServiceAssociations
        /// </summary>
        [Test]
        public void GetAutomationActionsActionServiceAssociationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetAutomationActionsActionServiceAssociations(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsActionTeamAssociation
        /// </summary>
        [Test]
        public void GetAutomationActionsActionTeamAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string teamId = null;
            //var response = instance.GetAutomationActionsActionTeamAssociation(accept, contentType, authorization, id, teamId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsActionTeamAssociations
        /// </summary>
        [Test]
        public void GetAutomationActionsActionTeamAssociationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetAutomationActionsActionTeamAssociations(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsInvocation
        /// </summary>
        [Test]
        public void GetAutomationActionsInvocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetAutomationActionsInvocation(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsRunner
        /// </summary>
        [Test]
        public void GetAutomationActionsRunnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetAutomationActionsRunner(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsRunnerTeamAssociation
        /// </summary>
        [Test]
        public void GetAutomationActionsRunnerTeamAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string teamId = null;
            //var response = instance.GetAutomationActionsRunnerTeamAssociation(accept, contentType, authorization, id, teamId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsRunnerTeamAssociations
        /// </summary>
        [Test]
        public void GetAutomationActionsRunnerTeamAssociationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetAutomationActionsRunnerTeamAssociations(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetAutomationActionsRunners
        /// </summary>
        [Test]
        public void GetAutomationActionsRunnersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //int? limit = null;
            //string cursor = null;
            //string name = null;
            //List<string> include = null;
            //var response = instance.GetAutomationActionsRunners(accept, contentType, authorization, limit, cursor, name, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListAutomationActionInvocations
        /// </summary>
        [Test]
        public void ListAutomationActionInvocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string incidentId = null;
            //string invocationState = null;
            //var response = instance.ListAutomationActionInvocations(accept, contentType, authorization, incidentId, invocationState);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateAutomationAction
        /// </summary>
        [Test]
        public void UpdateAutomationActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.UpdateAutomationAction(body, accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateAutomationActionsRunner
        /// </summary>
        [Test]
        public void UpdateAutomationActionsRunnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.UpdateAutomationActionsRunner(body, accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
