/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Api;

namespace PagerDuty.ApiClient.Test
{
    /// <summary>
    ///  Class for testing IncidentWorkflowsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IncidentWorkflowsApiTests
    {
        private IncidentWorkflowsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IncidentWorkflowsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IncidentWorkflowsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IncidentWorkflowsApi
            //Assert.IsInstanceOfType(typeof(IncidentWorkflowsApi), instance, "instance is a IncidentWorkflowsApi");
        }

        /// <summary>
        /// Test AssociateServiceToIncidentWorkflowTrigger
        /// </summary>
        [Test]
        public void AssociateServiceToIncidentWorkflowTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //Object body = null;
            //var response = instance.AssociateServiceToIncidentWorkflowTrigger(accept, contentType, authorization, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentWorkflowInstance
        /// </summary>
        [Test]
        public void CreateIncidentWorkflowInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CreateIncidentWorkflowInstance(accept, contentType, authorization, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentWorkflowTrigger
        /// </summary>
        [Test]
        public void CreateIncidentWorkflowTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //Object body = null;
            //var response = instance.CreateIncidentWorkflowTrigger(accept, contentType, authorization, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteIncidentWorkflow
        /// </summary>
        [Test]
        public void DeleteIncidentWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.DeleteIncidentWorkflow(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test DeleteIncidentWorkflowTrigger
        /// </summary>
        [Test]
        public void DeleteIncidentWorkflowTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.DeleteIncidentWorkflowTrigger(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test DeleteServiceFromIncidentWorkflowTrigger
        /// </summary>
        [Test]
        public void DeleteServiceFromIncidentWorkflowTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string triggerId = null;
            //string serviceId = null;
            //var response = instance.DeleteServiceFromIncidentWorkflowTrigger(accept, contentType, authorization, triggerId, serviceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentWorkflow
        /// </summary>
        [Test]
        public void GetIncidentWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetIncidentWorkflow(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentWorkflowAction
        /// </summary>
        [Test]
        public void GetIncidentWorkflowActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetIncidentWorkflowAction(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentWorkflowTrigger
        /// </summary>
        [Test]
        public void GetIncidentWorkflowTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetIncidentWorkflowTrigger(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidentWorkflowActions
        /// </summary>
        [Test]
        public void ListIncidentWorkflowActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //int? limit = null;
            //string cursor = null;
            //string keyword = null;
            //var response = instance.ListIncidentWorkflowActions(accept, contentType, authorization, limit, cursor, keyword);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidentWorkflowTriggers
        /// </summary>
        [Test]
        public void ListIncidentWorkflowTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string workflowId = null;
            //string incidentId = null;
            //string serviceId = null;
            //string triggerType = null;
            //string sortBy = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.ListIncidentWorkflowTriggers(accept, contentType, authorization, workflowId, incidentId, serviceId, triggerType, sortBy, limit, cursor);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidentWorkflows
        /// </summary>
        [Test]
        public void ListIncidentWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //string query = null;
            //string include = null;
            //var response = instance.ListIncidentWorkflows(accept, contentType, authorization, limit, offset, total, query, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test PostIncidentWorkflow
        /// </summary>
        [Test]
        public void PostIncidentWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //Object body = null;
            //var response = instance.PostIncidentWorkflow(accept, contentType, authorization, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test PutIncidentWorkflow
        /// </summary>
        [Test]
        public void PutIncidentWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //Object body = null;
            //var response = instance.PutIncidentWorkflow(accept, contentType, authorization, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateIncidentWorkflowTrigger
        /// </summary>
        [Test]
        public void UpdateIncidentWorkflowTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //Object body = null;
            //var response = instance.UpdateIncidentWorkflowTrigger(accept, contentType, authorization, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
