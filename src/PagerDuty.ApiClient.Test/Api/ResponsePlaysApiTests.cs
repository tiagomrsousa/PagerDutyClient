/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Api;

namespace PagerDuty.ApiClient.Test
{
    /// <summary>
    ///  Class for testing ResponsePlaysApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ResponsePlaysApiTests
    {
        private ResponsePlaysApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ResponsePlaysApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ResponsePlaysApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ResponsePlaysApi
            //Assert.IsInstanceOfType(typeof(ResponsePlaysApi), instance, "instance is a ResponsePlaysApi");
        }

        /// <summary>
        /// Test CreateResponsePlay
        /// </summary>
        [Test]
        public void CreateResponsePlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //Object body = null;
            //var response = instance.CreateResponsePlay(accept, contentType, authorization, from, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteResponsePlay
        /// </summary>
        [Test]
        public void DeleteResponsePlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //instance.DeleteResponsePlay(id, accept, contentType, authorization, from);
            
        }
        /// <summary>
        /// Test GetResponsePlay
        /// </summary>
        [Test]
        public void GetResponsePlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //var response = instance.GetResponsePlay(id, accept, contentType, authorization, from);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListResponsePlays
        /// </summary>
        [Test]
        public void ListResponsePlaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string query = null;
            //bool? filterForManualRun = null;
            //string from = null;
            //var response = instance.ListResponsePlays(accept, contentType, authorization, query, filterForManualRun, from);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test RunResponsePlay
        /// </summary>
        [Test]
        public void RunResponsePlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string responsePlayId = null;
            //Object body = null;
            //var response = instance.RunResponsePlay(accept, contentType, authorization, from, responsePlayId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateResponsePlay
        /// </summary>
        [Test]
        public void UpdateResponsePlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.UpdateResponsePlay(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
