/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Api;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Test
{
    /// <summary>
    ///  Class for testing EventOrchestrationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventOrchestrationsApiTests
    {
        private EventOrchestrationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventOrchestrationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventOrchestrationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventOrchestrationsApi
            //Assert.IsInstanceOfType(typeof(EventOrchestrationsApi), instance, "instance is a EventOrchestrationsApi");
        }

        /// <summary>
        /// Test DeleteOrchestration
        /// </summary>
        [Test]
        public void DeleteOrchestrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.DeleteOrchestration(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test GetOrchActiveStatus
        /// </summary>
        [Test]
        public void GetOrchActiveStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.GetOrchActiveStatus(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test GetOrchPathRouter
        /// </summary>
        [Test]
        public void GetOrchPathRouterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.GetOrchPathRouter(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test GetOrchPathService
        /// </summary>
        [Test]
        public void GetOrchPathServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.GetOrchPathService(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test GetOrchPathUnrouted
        /// </summary>
        [Test]
        public void GetOrchPathUnroutedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.GetOrchPathUnrouted(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test GetOrchestration
        /// </summary>
        [Test]
        public void GetOrchestrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GetOrchestration(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListEventOrchestrations
        /// </summary>
        [Test]
        public void ListEventOrchestrationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //int? limit = null;
            //int? offset = null;
            //string sortBy = null;
            //var response = instance.ListEventOrchestrations(accept, contentType, authorization, limit, offset, sortBy);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test PostOrchestration
        /// </summary>
        [Test]
        public void PostOrchestrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //Object body = null;
            //var response = instance.PostOrchestration(accept, contentType, authorization, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateOrchActiveStatus
        /// </summary>
        [Test]
        public void UpdateOrchActiveStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //instance.UpdateOrchActiveStatus(accept, contentType, authorization, id);
            
        }
        /// <summary>
        /// Test UpdateOrchPathRouter
        /// </summary>
        [Test]
        public void UpdateOrchPathRouterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //OrchestrationRouter body = null;
            //instance.UpdateOrchPathRouter(accept, contentType, authorization, id, body);
            
        }
        /// <summary>
        /// Test UpdateOrchPathService
        /// </summary>
        [Test]
        public void UpdateOrchPathServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //ServiceOrchestration body = null;
            //instance.UpdateOrchPathService(accept, contentType, authorization, id, body);
            
        }
        /// <summary>
        /// Test UpdateOrchPathUnrouted
        /// </summary>
        [Test]
        public void UpdateOrchPathUnroutedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //OrchestrationUnrouted body = null;
            //instance.UpdateOrchPathUnrouted(accept, contentType, authorization, id, body);
            
        }
        /// <summary>
        /// Test UpdateOrchestration
        /// </summary>
        [Test]
        public void UpdateOrchestrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //Object body = null;
            //var response = instance.UpdateOrchestration(accept, contentType, authorization, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
