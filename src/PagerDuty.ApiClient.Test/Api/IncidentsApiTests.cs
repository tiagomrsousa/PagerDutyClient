/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Api;

namespace PagerDuty.ApiClient.Test
{
    /// <summary>
    ///  Class for testing IncidentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IncidentsApiTests
    {
        private IncidentsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IncidentsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IncidentsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IncidentsApi
            //Assert.IsInstanceOfType(typeof(IncidentsApi), instance, "instance is a IncidentsApi");
        }

        /// <summary>
        /// Test CreateIncident
        /// </summary>
        [Test]
        public void CreateIncidentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //Object body = null;
            //var response = instance.CreateIncident(accept, contentType, authorization, from, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentNote
        /// </summary>
        [Test]
        public void CreateIncidentNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CreateIncidentNote(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentNotificationSubscribers
        /// </summary>
        [Test]
        public void CreateIncidentNotificationSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CreateIncidentNotificationSubscribers(accept, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentResponderRequest
        /// </summary>
        [Test]
        public void CreateIncidentResponderRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CreateIncidentResponderRequest(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentSnooze
        /// </summary>
        [Test]
        public void CreateIncidentSnoozeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CreateIncidentSnooze(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateIncidentStatusUpdate
        /// </summary>
        [Test]
        public void CreateIncidentStatusUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CreateIncidentStatusUpdate(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncident
        /// </summary>
        [Test]
        public void GetIncidentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string X_EARLY_ACCESS = null;
            //string include = null;
            //var response = instance.GetIncident(accept, contentType, authorization, id, X_EARLY_ACCESS, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentAlert
        /// </summary>
        [Test]
        public void GetIncidentAlertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string alertId = null;
            //var response = instance.GetIncidentAlert(accept, contentType, authorization, id, alertId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentFieldValues
        /// </summary>
        [Test]
        public void GetIncidentFieldValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string X_EARLY_ACCESS = null;
            //var response = instance.GetIncidentFieldValues(id, X_EARLY_ACCESS);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentImpactedBusinessServices
        /// </summary>
        [Test]
        public void GetIncidentImpactedBusinessServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string id = null;
            //string X_EARLY_ACCESS = null;
            //var response = instance.GetIncidentImpactedBusinessServices(accept, id, X_EARLY_ACCESS);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetIncidentNotificationSubscribers
        /// </summary>
        [Test]
        public void GetIncidentNotificationSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string id = null;
            //var response = instance.GetIncidentNotificationSubscribers(accept, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetOutlierIncident
        /// </summary>
        [Test]
        public void GetOutlierIncidentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //DateTime? since = null;
            //string additionalDetails = null;
            //var response = instance.GetOutlierIncident(accept, contentType, authorization, id, since, additionalDetails);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetPastIncidents
        /// </summary>
        [Test]
        public void GetPastIncidentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //bool? total = null;
            //var response = instance.GetPastIncidents(limit, total);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetRelatedIncidents
        /// </summary>
        [Test]
        public void GetRelatedIncidentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //string additionalDetails = null;
            //var response = instance.GetRelatedIncidents(accept, contentType, authorization, id, additionalDetails);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetSchemaForIncident
        /// </summary>
        [Test]
        public void GetSchemaForIncidentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string X_EARLY_ACCESS = null;
            //string include = null;
            //var response = instance.GetSchemaForIncident(id, X_EARLY_ACCESS, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidentAlerts
        /// </summary>
        [Test]
        public void ListIncidentAlertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //string alertKey = null;
            //string statuses = null;
            //string sortBy = null;
            //string include = null;
            //var response = instance.ListIncidentAlerts(accept, contentType, authorization, id, limit, offset, total, alertKey, statuses, sortBy, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidentLogEntries
        /// </summary>
        [Test]
        public void ListIncidentLogEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //string timeZone = null;
            //DateTime? since = null;
            //DateTime? until = null;
            //bool? isOverview = null;
            //string include = null;
            //var response = instance.ListIncidentLogEntries(accept, contentType, authorization, id, limit, offset, total, timeZone, since, until, isOverview, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidentNotes
        /// </summary>
        [Test]
        public void ListIncidentNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.ListIncidentNotes(accept, contentType, authorization, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListIncidents
        /// </summary>
        [Test]
        public void ListIncidentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //string dateRange = null;
            //string incidentKey = null;
            //List<string> serviceIds = null;
            //List<string> teamIds = null;
            //List<string> userIds = null;
            //string urgencies = null;
            //string timeZone = null;
            //string statuses = null;
            //List<string> sortBy = null;
            //string include = null;
            //string since = null;
            //string until = null;
            //var response = instance.ListIncidents(accept, contentType, authorization, limit, offset, total, dateRange, incidentKey, serviceIds, teamIds, userIds, urgencies, timeZone, statuses, sortBy, include, since, until);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test MergeIncidents
        /// </summary>
        [Test]
        public void MergeIncidentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.MergeIncidents(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test PutIncidentManualBusinessServiceAssociation
        /// </summary>
        [Test]
        public void PutIncidentManualBusinessServiceAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string X_EARLY_ACCESS = null;
            //string id = null;
            //string businessServiceId = null;
            //Object body = null;
            //var response = instance.PutIncidentManualBusinessServiceAssociation(accept, X_EARLY_ACCESS, id, businessServiceId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test RemoveIncidentNotificationSubscribers
        /// </summary>
        [Test]
        public void RemoveIncidentNotificationSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string id = null;
            //Object body = null;
            //var response = instance.RemoveIncidentNotificationSubscribers(accept, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SetIncidentFieldValues
        /// </summary>
        [Test]
        public void SetIncidentFieldValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Object body = null;
            //var response = instance.SetIncidentFieldValues(id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateIncident
        /// </summary>
        [Test]
        public void UpdateIncidentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //var response = instance.UpdateIncident(accept, contentType, authorization, from, id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateIncidentAlert
        /// </summary>
        [Test]
        public void UpdateIncidentAlertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //string alertId = null;
            //Object body = null;
            //var response = instance.UpdateIncidentAlert(accept, contentType, authorization, from, id, alertId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateIncidentAlerts
        /// </summary>
        [Test]
        public void UpdateIncidentAlertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //string id = null;
            //Object body = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //var response = instance.UpdateIncidentAlerts(accept, contentType, authorization, from, id, body, limit, offset, total);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateIncidents
        /// </summary>
        [Test]
        public void UpdateIncidentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //string authorization = null;
            //string from = null;
            //Object body = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //var response = instance.UpdateIncidents(accept, contentType, authorization, from, body, limit, offset, total);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
