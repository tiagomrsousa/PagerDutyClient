/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Api;

namespace PagerDuty.ApiClient.Test
{
    /// <summary>
    ///  Class for testing CustomFieldsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CustomFieldsApiTests
    {
        private CustomFieldsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CustomFieldsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CustomFieldsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CustomFieldsApi
            //Assert.IsInstanceOfType(typeof(CustomFieldsApi), instance, "instance is a CustomFieldsApi");
        }

        /// <summary>
        /// Test CreateCustomFieldsField
        /// </summary>
        [Test]
        public void CreateCustomFieldsFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //Object body = null;
            //var response = instance.CreateCustomFieldsField(X_EARLY_ACCESS, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateCustomFieldsFieldConfiguration
        /// </summary>
        [Test]
        public void CreateCustomFieldsFieldConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //string schemaId = null;
            //Object body = null;
            //var response = instance.CreateCustomFieldsFieldConfiguration(X_EARLY_ACCESS, schemaId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateCustomFieldsFieldOption
        /// </summary>
        [Test]
        public void CreateCustomFieldsFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //string fieldId = null;
            //Object body = null;
            //var response = instance.CreateCustomFieldsFieldOption(X_EARLY_ACCESS, fieldId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateCustomFieldsSchema
        /// </summary>
        [Test]
        public void CreateCustomFieldsSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //Object body = null;
            //var response = instance.CreateCustomFieldsSchema(X_EARLY_ACCESS, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateCustomFieldsSchemaAssignment
        /// </summary>
        [Test]
        public void CreateCustomFieldsSchemaAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //Object body = null;
            //var response = instance.CreateCustomFieldsSchemaAssignment(X_EARLY_ACCESS, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteCustomFieldsField
        /// </summary>
        [Test]
        public void DeleteCustomFieldsFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldId = null;
            //string X_EARLY_ACCESS = null;
            //instance.DeleteCustomFieldsField(fieldId, X_EARLY_ACCESS);
            
        }
        /// <summary>
        /// Test DeleteCustomFieldsFieldConfiguration
        /// </summary>
        [Test]
        public void DeleteCustomFieldsFieldConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaId = null;
            //string fieldConfigurationId = null;
            //string X_EARLY_ACCESS = null;
            //instance.DeleteCustomFieldsFieldConfiguration(schemaId, fieldConfigurationId, X_EARLY_ACCESS);
            
        }
        /// <summary>
        /// Test DeleteCustomFieldsFieldOption
        /// </summary>
        [Test]
        public void DeleteCustomFieldsFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldId = null;
            //string fieldOptionId = null;
            //string X_EARLY_ACCESS = null;
            //instance.DeleteCustomFieldsFieldOption(fieldId, fieldOptionId, X_EARLY_ACCESS);
            
        }
        /// <summary>
        /// Test DeleteCustomFieldsSchema
        /// </summary>
        [Test]
        public void DeleteCustomFieldsSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaId = null;
            //string X_EARLY_ACCESS = null;
            //instance.DeleteCustomFieldsSchema(schemaId, X_EARLY_ACCESS);
            
        }
        /// <summary>
        /// Test DeleteSchemaAssignment
        /// </summary>
        [Test]
        public void DeleteSchemaAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string X_EARLY_ACCESS = null;
            //instance.DeleteSchemaAssignment(id, X_EARLY_ACCESS);
            
        }
        /// <summary>
        /// Test GetCustomFieldsField
        /// </summary>
        [Test]
        public void GetCustomFieldsFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldId = null;
            //string X_EARLY_ACCESS = null;
            //string include = null;
            //var response = instance.GetCustomFieldsField(fieldId, X_EARLY_ACCESS, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetCustomFieldsFieldConfiguration
        /// </summary>
        [Test]
        public void GetCustomFieldsFieldConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaId = null;
            //string fieldConfigurationId = null;
            //string X_EARLY_ACCESS = null;
            //string include = null;
            //var response = instance.GetCustomFieldsFieldConfiguration(schemaId, fieldConfigurationId, X_EARLY_ACCESS, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetCustomFieldsFieldOption
        /// </summary>
        [Test]
        public void GetCustomFieldsFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldId = null;
            //string fieldOptionId = null;
            //string X_EARLY_ACCESS = null;
            //var response = instance.GetCustomFieldsFieldOption(fieldId, fieldOptionId, X_EARLY_ACCESS);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetCustomFieldsSchema
        /// </summary>
        [Test]
        public void GetCustomFieldsSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaId = null;
            //string X_EARLY_ACCESS = null;
            //string include = null;
            //var response = instance.GetCustomFieldsSchema(schemaId, X_EARLY_ACCESS, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListCustomFieldsFieldConfigurations
        /// </summary>
        [Test]
        public void ListCustomFieldsFieldConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaId = null;
            //string X_EARLY_ACCESS = null;
            //string include = null;
            //var response = instance.ListCustomFieldsFieldConfigurations(schemaId, X_EARLY_ACCESS, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListCustomFieldsFieldOptions
        /// </summary>
        [Test]
        public void ListCustomFieldsFieldOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldId = null;
            //string X_EARLY_ACCESS = null;
            //var response = instance.ListCustomFieldsFieldOptions(fieldId, X_EARLY_ACCESS);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListCustomFieldsFields
        /// </summary>
        [Test]
        public void ListCustomFieldsFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //string include = null;
            //var response = instance.ListCustomFieldsFields(X_EARLY_ACCESS, limit, offset, total, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListCustomFieldsSchemas
        /// </summary>
        [Test]
        public void ListCustomFieldsSchemasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //var response = instance.ListCustomFieldsSchemas(X_EARLY_ACCESS, limit, offset, total);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListCustomFieldsSchemasUsingField
        /// </summary>
        [Test]
        public void ListCustomFieldsSchemasUsingFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldId = null;
            //string X_EARLY_ACCESS = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //var response = instance.ListCustomFieldsSchemasUsingField(fieldId, X_EARLY_ACCESS, limit, offset, total);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListSchemaAssignments
        /// </summary>
        [Test]
        public void ListSchemaAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object filter = null;
            //string X_EARLY_ACCESS = null;
            //int? limit = null;
            //int? offset = null;
            //bool? total = null;
            //var response = instance.ListSchemaAssignments(filter, X_EARLY_ACCESS, limit, offset, total);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateCustomFieldsField
        /// </summary>
        [Test]
        public void UpdateCustomFieldsFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //string fieldId = null;
            //Object body = null;
            //var response = instance.UpdateCustomFieldsField(X_EARLY_ACCESS, fieldId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateCustomFieldsFieldConfiguration
        /// </summary>
        [Test]
        public void UpdateCustomFieldsFieldConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //string schemaId = null;
            //string fieldConfigurationId = null;
            //Object body = null;
            //var response = instance.UpdateCustomFieldsFieldConfiguration(X_EARLY_ACCESS, schemaId, fieldConfigurationId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateCustomFieldsFieldOption
        /// </summary>
        [Test]
        public void UpdateCustomFieldsFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //string fieldId = null;
            //string fieldOptionId = null;
            //Object body = null;
            //var response = instance.UpdateCustomFieldsFieldOption(X_EARLY_ACCESS, fieldId, fieldOptionId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateCustomFieldsSchema
        /// </summary>
        [Test]
        public void UpdateCustomFieldsSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string X_EARLY_ACCESS = null;
            //string schemaId = null;
            //Object body = null;
            //var response = instance.UpdateCustomFieldsSchema(X_EARLY_ACCESS, schemaId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
