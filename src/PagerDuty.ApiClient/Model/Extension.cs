/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Extension
    /// </summary>
    [DataContract]
        public partial class Extension :  IEquatable<Extension>, IValidatableObject
    {
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Extension for value: extension
            /// </summary>
            [EnumMember(Value = "extension")]
            Extension = 1        }
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extension" /> class.
        /// </summary>
        /// <param name="name">The name of the extension. (required).</param>
        /// <param name="type">The type of object being created. (default to TypeEnum.Extension).</param>
        /// <param name="endpointUrl">The url of the extension..</param>
        /// <param name="extensionObjects">The objects for which the extension applies (required).</param>
        /// <param name="extensionSchema">extensionSchema (required).</param>
        /// <param name="config">The object that contains extension configuration values depending on the extension schema specification..</param>
        public Extension(string name = default(string), TypeEnum? type = TypeEnum.Extension, string endpointUrl = default(string), List<ServiceReference> extensionObjects = default(List<ServiceReference>), ExtensionSchemaReference extensionSchema = default(ExtensionSchemaReference), Object config = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Extension and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "extensionObjects" is required (not null)
            if (extensionObjects == null)
            {
                throw new InvalidDataException("extensionObjects is a required property for Extension and cannot be null");
            }
            else
            {
                this.ExtensionObjects = extensionObjects;
            }
            // to ensure "extensionSchema" is required (not null)
            if (extensionSchema == null)
            {
                throw new InvalidDataException("extensionSchema is a required property for Extension and cannot be null");
            }
            else
            {
                this.ExtensionSchema = extensionSchema;
            }
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = TypeEnum.Extension;
            }
            else
            {
                this.Type = type;
            }
            this.EndpointUrl = endpointUrl;
            this.Config = config;
        }
        
        /// <summary>
        /// The name of the extension.
        /// </summary>
        /// <value>The name of the extension.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The url of the extension.
        /// </summary>
        /// <value>The url of the extension.</value>
        [DataMember(Name="endpoint_url", EmitDefaultValue=false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// The objects for which the extension applies
        /// </summary>
        /// <value>The objects for which the extension applies</value>
        [DataMember(Name="extension_objects", EmitDefaultValue=false)]
        public List<ServiceReference> ExtensionObjects { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionSchema
        /// </summary>
        [DataMember(Name="extension_schema", EmitDefaultValue=false)]
        public ExtensionSchemaReference ExtensionSchema { get; set; }

        /// <summary>
        /// Whether or not this extension is temporarily disabled; for example, a webhook extension that is repeatedly rejected by the server.
        /// </summary>
        /// <value>Whether or not this extension is temporarily disabled; for example, a webhook extension that is repeatedly rejected by the server.</value>
        [DataMember(Name="temporarily_disabled", EmitDefaultValue=false)]
        public bool? TemporarilyDisabled { get; private set; }

        /// <summary>
        /// The object that contains extension configuration values depending on the extension schema specification.
        /// </summary>
        /// <value>The object that contains extension configuration values depending on the extension schema specification.</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Object Config { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Extension {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  ExtensionObjects: ").Append(ExtensionObjects).Append("\n");
            sb.Append("  ExtensionSchema: ").Append(ExtensionSchema).Append("\n");
            sb.Append("  TemporarilyDisabled: ").Append(TemporarilyDisabled).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Extension);
        }

        /// <summary>
        /// Returns true if Extension instances are equal
        /// </summary>
        /// <param name="input">Instance of Extension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Extension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.ExtensionObjects == input.ExtensionObjects ||
                    this.ExtensionObjects != null &&
                    input.ExtensionObjects != null &&
                    this.ExtensionObjects.SequenceEqual(input.ExtensionObjects)
                ) && 
                (
                    this.ExtensionSchema == input.ExtensionSchema ||
                    (this.ExtensionSchema != null &&
                    this.ExtensionSchema.Equals(input.ExtensionSchema))
                ) && 
                (
                    this.TemporarilyDisabled == input.TemporarilyDisabled ||
                    (this.TemporarilyDisabled != null &&
                    this.TemporarilyDisabled.Equals(input.TemporarilyDisabled))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EndpointUrl != null)
                    hashCode = hashCode * 59 + this.EndpointUrl.GetHashCode();
                if (this.ExtensionObjects != null)
                    hashCode = hashCode * 59 + this.ExtensionObjects.GetHashCode();
                if (this.ExtensionSchema != null)
                    hashCode = hashCode * 59 + this.ExtensionSchema.GetHashCode();
                if (this.TemporarilyDisabled != null)
                    hashCode = hashCode * 59 + this.TemporarilyDisabled.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
