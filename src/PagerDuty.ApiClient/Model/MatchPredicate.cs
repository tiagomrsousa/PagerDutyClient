/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// MatchPredicate
    /// </summary>
    [DataContract]
        public partial class MatchPredicate :  IEquatable<MatchPredicate>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 2,
            /// <summary>
            /// Enum Not for value: not
            /// </summary>
            [EnumMember(Value = "not")]
            Not = 3,
            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 4,
            /// <summary>
            /// Enum Exactly for value: exactly
            /// </summary>
            [EnumMember(Value = "exactly")]
            Exactly = 5,
            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 6        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The email field that will attempt to use the matcher expression. Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;.
        /// </summary>
        /// <value>The email field that will attempt to use the matcher expression. Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PartEnum
        {
            /// <summary>
            /// Enum Body for value: body
            /// </summary>
            [EnumMember(Value = "body")]
            Body = 1,
            /// <summary>
            /// Enum Subject for value: subject
            /// </summary>
            [EnumMember(Value = "subject")]
            Subject = 2,
            /// <summary>
            /// Enum Fromaddresses for value: from_addresses
            /// </summary>
            [EnumMember(Value = "from_addresses")]
            Fromaddresses = 3        }
        /// <summary>
        /// The email field that will attempt to use the matcher expression. Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;.
        /// </summary>
        /// <value>The email field that will attempt to use the matcher expression. Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;.</value>
        [DataMember(Name="part", EmitDefaultValue=false)]
        public PartEnum Part { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchPredicate" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="matcher">Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;..</param>
        /// <param name="part">The email field that will attempt to use the matcher expression. Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;. (required).</param>
        /// <param name="children">Additional matchers to be run. Must be not empty if the type is &#x60;all&#x60;, &#x60;any&#x60;, or &#x60;not&#x60;. (required).</param>
        public MatchPredicate(TypeEnum type = default(TypeEnum), string matcher = default(string), PartEnum part = default(PartEnum), List<MatchPredicate> children = default(List<MatchPredicate>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MatchPredicate and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "part" is required (not null)
            if (part == null)
            {
                throw new InvalidDataException("part is a required property for MatchPredicate and cannot be null");
            }
            else
            {
                this.Part = part;
            }
            // to ensure "children" is required (not null)
            if (children == null)
            {
                throw new InvalidDataException("children is a required property for MatchPredicate and cannot be null");
            }
            else
            {
                this.Children = children;
            }
            this.Matcher = matcher;
        }
        

        /// <summary>
        /// Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;.
        /// </summary>
        /// <value>Required if the type is &#x60;contains&#x60;, &#x60;exactly&#x60; or &#x60;regex&#x60;.</value>
        [DataMember(Name="matcher", EmitDefaultValue=false)]
        public string Matcher { get; set; }


        /// <summary>
        /// Additional matchers to be run. Must be not empty if the type is &#x60;all&#x60;, &#x60;any&#x60;, or &#x60;not&#x60;.
        /// </summary>
        /// <value>Additional matchers to be run. Must be not empty if the type is &#x60;all&#x60;, &#x60;any&#x60;, or &#x60;not&#x60;.</value>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<MatchPredicate> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchPredicate {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Matcher: ").Append(Matcher).Append("\n");
            sb.Append("  Part: ").Append(Part).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchPredicate);
        }

        /// <summary>
        /// Returns true if MatchPredicate instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchPredicate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchPredicate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Matcher == input.Matcher ||
                    (this.Matcher != null &&
                    this.Matcher.Equals(input.Matcher))
                ) && 
                (
                    this.Part == input.Part ||
                    (this.Part != null &&
                    this.Part.Equals(input.Part))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Matcher != null)
                    hashCode = hashCode * 59 + this.Matcher.GetHashCode();
                if (this.Part != null)
                    hashCode = hashCode * 59 + this.Part.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
