/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// ContactMethod
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(PhoneContactMethod), "PhoneContactMethod")]
    [JsonSubtypes.KnownSubType(typeof(EmailContactMethod), "EmailContactMethod")]
    [JsonSubtypes.KnownSubType(typeof(PushContactMethod), "PushContactMethod")]
        public partial class ContactMethod :  IEquatable<ContactMethod>, IValidatableObject
    {
        /// <summary>
        /// The type of contact method being created.
        /// </summary>
        /// <value>The type of contact method being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Emailcontactmethod for value: email_contact_method
            /// </summary>
            [EnumMember(Value = "email_contact_method")]
            Emailcontactmethod = 1,
            /// <summary>
            /// Enum Phonecontactmethod for value: phone_contact_method
            /// </summary>
            [EnumMember(Value = "phone_contact_method")]
            Phonecontactmethod = 2,
            /// <summary>
            /// Enum Pushnotificationcontactmethod for value: push_notification_contact_method
            /// </summary>
            [EnumMember(Value = "push_notification_contact_method")]
            Pushnotificationcontactmethod = 3,
            /// <summary>
            /// Enum Smscontactmethod for value: sms_contact_method
            /// </summary>
            [EnumMember(Value = "sms_contact_method")]
            Smscontactmethod = 4        }
        /// <summary>
        /// The type of contact method being created.
        /// </summary>
        /// <value>The type of contact method being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactMethod" /> class.
        /// </summary>
        /// <param name="type">The type of contact method being created. (required).</param>
        /// <param name="label">The label (e.g., \&quot;Work\&quot;, \&quot;Mobile\&quot;, etc.). (required).</param>
        /// <param name="address">The \&quot;address\&quot; to deliver to: email, phone number, etc., depending on the type. (required).</param>
        public ContactMethod(TypeEnum type = default(TypeEnum), string label = default(string), string address = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ContactMethod and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for ContactMethod and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for ContactMethod and cannot be null");
            }
            else
            {
                this.Address = address;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactMethod" /> class.
        /// </summary>
        /// <param name="label">The label (e.g., \&quot;Work\&quot;, \&quot;Mobile\&quot;, etc.). (required).</param>
        /// <param name="address">The \&quot;address\&quot; to deliver to: email, phone number, etc., depending on the type. (required).</param>
        public ContactMethod(string label = default(string), string address = default(string))
        {
            Type = default(TypeEnum);
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for ContactMethod and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for ContactMethod and cannot be null");
            }
            else
            {
                this.Address = address;
            }
        }


        /// <summary>
        /// The label (e.g., \&quot;Work\&quot;, \&quot;Mobile\&quot;, etc.).
        /// </summary>
        /// <value>The label (e.g., \&quot;Work\&quot;, \&quot;Mobile\&quot;, etc.).</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// The \&quot;address\&quot; to deliver to: email, phone number, etc., depending on the type.
        /// </summary>
        /// <value>The \&quot;address\&quot; to deliver to: email, phone number, etc., depending on the type.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactMethod {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactMethod);
        }

        /// <summary>
        /// Returns true if ContactMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
