/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// The Email Contact Method of the User.
    /// </summary>
    [DataContract]
        public partial class EmailContactMethod : ContactMethod,  IEquatable<EmailContactMethod>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Emailcontactmethod for value: email_contact_method
            /// </summary>
            [EnumMember(Value = "email_contact_method")]
            Emailcontactmethod = 1        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailContactMethod" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="sendShortEmail">Send an abbreviated email message instead of the standard email output. Useful for email-to-SMS gateways and email based pagers. (default to false).</param>
        public EmailContactMethod(TypeEnum? type = default(TypeEnum?), bool? sendShortEmail = false, string label = default(string), string address = default(string)) : base(label, address)
        {
            this.Type = type;
            // use default value if no "sendShortEmail" provided
            if (sendShortEmail == null)
            {
                this.SendShortEmail = false;
            }
            else
            {
                this.SendShortEmail = sendShortEmail;
            }
        }
        

        /// <summary>
        /// Send an abbreviated email message instead of the standard email output. Useful for email-to-SMS gateways and email based pagers.
        /// </summary>
        /// <value>Send an abbreviated email message instead of the standard email output. Useful for email-to-SMS gateways and email based pagers.</value>
        [DataMember(Name="send_short_email", EmitDefaultValue=false)]
        public bool? SendShortEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailContactMethod {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SendShortEmail: ").Append(SendShortEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailContactMethod);
        }

        /// <summary>
        /// Returns true if EmailContactMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailContactMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailContactMethod input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.SendShortEmail == input.SendShortEmail ||
                    (this.SendShortEmail != null &&
                    this.SendShortEmail.Equals(input.SendShortEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SendShortEmail != null)
                    hashCode = hashCode * 59 + this.SendShortEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
