/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// AnalyticsRawIncident
    /// </summary>
    [DataContract]
        public partial class AnalyticsRawIncident :  IEquatable<AnalyticsRawIncident>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsRawIncident" /> class.
        /// </summary>
        /// <param name="assignmentCount">Total count of instances where responders were assigned an incident (including through reassignment or escalation) or accepted a responder request..</param>
        /// <param name="businessHourInterruptions">Total number of unique interruptions during business hour. Business hour: 8am-6pm Mon-Fri, based on the user’s time zone.  .</param>
        /// <param name="createdAt">Timestamp of when the incident was created..</param>
        /// <param name="description">The incident description.</param>
        /// <param name="engagedSeconds">Total engaged time across all responders for this incident.  Engaged time is measured from the time a user engages with an incident (by acknowledging or accepting a responder request) until the incident is resolved.  This may include periods in which the incident was snoozed..</param>
        /// <param name="engagedUserCount">Total number of users who engaged (acknowledged, accepted responder request) in the incident..</param>
        /// <param name="escalationCount">Total count of instances where an incident is escalated between responders assigned to an escalation policy..</param>
        /// <param name="id">Incident ID.</param>
        /// <param name="incidentNumber">The PagerDuty incident number.</param>
        /// <param name="major">An incident is classified as a [major incident](https://support.pagerduty.com/docs/operational-reviews#major-incidents) if it has one of the two highest priorities, or if multiple responders are added and acknowledge the incident..</param>
        /// <param name="offHourInterruptions">Total number of unique interruptions during off hour. Off hour: 6pm-10pm Mon-Fri and all day Sat-Sun, based on the user’s time zone.      .</param>
        /// <param name="priorityId">ID of the incident&#x27;s priority level..</param>
        /// <param name="priorityName">The user-provided short name of the priority..</param>
        /// <param name="resolvedAt">Timestamp of when the incident was resolved..</param>
        /// <param name="secondsToEngage">A measure of *people response time*. This metric measures the time from the first user engagement (acknowledge or responder accept) to the last. This metric is only used for incidents with **multiple responders**; for incidents with one or no engaged users, this value is null..</param>
        /// <param name="secondsToFirstAck">Time between start of an incident, and the first responder to acknowledge..</param>
        /// <param name="secondsToMobilize">Time between start of an incident, and the last additional responder to acknowledge.  If an incident has one or less responders, the value will be null..</param>
        /// <param name="secondsToResolve">Time from when incident triggered until it was resolved..</param>
        /// <param name="serviceId">ID of the service that the incident triggered on..</param>
        /// <param name="serviceName">Name of the service that the incident triggered on..</param>
        /// <param name="sleepHourInterruptions">Total number of unique interruptions during sleep hour. Sleep hour: 10pm-8am every day, based on the user’s time zone..</param>
        /// <param name="snoozedSeconds">Total seconds the incident has been snoozed for..</param>
        /// <param name="teamId">ID of the team the incident was assigned to..</param>
        /// <param name="teamName">Name of the team the incident was assigned to..</param>
        /// <param name="urgency">Notification level.</param>
        /// <param name="userDefinedEffortSeconds">The total response effort in seconds, [as defined by the user](https://support.pagerduty.com/docs/editing-incidents#edit-incident-duration)..</param>
        public AnalyticsRawIncident(int? assignmentCount = default(int?), int? businessHourInterruptions = default(int?), string createdAt = default(string), string description = default(string), int? engagedSeconds = default(int?), int? engagedUserCount = default(int?), int? escalationCount = default(int?), string id = default(string), int? incidentNumber = default(int?), bool? major = default(bool?), int? offHourInterruptions = default(int?), string priorityId = default(string), string priorityName = default(string), string resolvedAt = default(string), int? secondsToEngage = default(int?), int? secondsToFirstAck = default(int?), int? secondsToMobilize = default(int?), int? secondsToResolve = default(int?), string serviceId = default(string), string serviceName = default(string), int? sleepHourInterruptions = default(int?), int? snoozedSeconds = default(int?), string teamId = default(string), string teamName = default(string), string urgency = default(string), int? userDefinedEffortSeconds = default(int?))
        {
            this.AssignmentCount = assignmentCount;
            this.BusinessHourInterruptions = businessHourInterruptions;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.EngagedSeconds = engagedSeconds;
            this.EngagedUserCount = engagedUserCount;
            this.EscalationCount = escalationCount;
            this.Id = id;
            this.IncidentNumber = incidentNumber;
            this.Major = major;
            this.OffHourInterruptions = offHourInterruptions;
            this.PriorityId = priorityId;
            this.PriorityName = priorityName;
            this.ResolvedAt = resolvedAt;
            this.SecondsToEngage = secondsToEngage;
            this.SecondsToFirstAck = secondsToFirstAck;
            this.SecondsToMobilize = secondsToMobilize;
            this.SecondsToResolve = secondsToResolve;
            this.ServiceId = serviceId;
            this.ServiceName = serviceName;
            this.SleepHourInterruptions = sleepHourInterruptions;
            this.SnoozedSeconds = snoozedSeconds;
            this.TeamId = teamId;
            this.TeamName = teamName;
            this.Urgency = urgency;
            this.UserDefinedEffortSeconds = userDefinedEffortSeconds;
        }
        
        /// <summary>
        /// Total count of instances where responders were assigned an incident (including through reassignment or escalation) or accepted a responder request.
        /// </summary>
        /// <value>Total count of instances where responders were assigned an incident (including through reassignment or escalation) or accepted a responder request.</value>
        [DataMember(Name="assignment_count", EmitDefaultValue=false)]
        public int? AssignmentCount { get; set; }

        /// <summary>
        /// Total number of unique interruptions during business hour. Business hour: 8am-6pm Mon-Fri, based on the user’s time zone.  
        /// </summary>
        /// <value>Total number of unique interruptions during business hour. Business hour: 8am-6pm Mon-Fri, based on the user’s time zone.  </value>
        [DataMember(Name="business_hour_interruptions", EmitDefaultValue=false)]
        public int? BusinessHourInterruptions { get; set; }

        /// <summary>
        /// Timestamp of when the incident was created.
        /// </summary>
        /// <value>Timestamp of when the incident was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The incident description
        /// </summary>
        /// <value>The incident description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Total engaged time across all responders for this incident.  Engaged time is measured from the time a user engages with an incident (by acknowledging or accepting a responder request) until the incident is resolved.  This may include periods in which the incident was snoozed.
        /// </summary>
        /// <value>Total engaged time across all responders for this incident.  Engaged time is measured from the time a user engages with an incident (by acknowledging or accepting a responder request) until the incident is resolved.  This may include periods in which the incident was snoozed.</value>
        [DataMember(Name="engaged_seconds", EmitDefaultValue=false)]
        public int? EngagedSeconds { get; set; }

        /// <summary>
        /// Total number of users who engaged (acknowledged, accepted responder request) in the incident.
        /// </summary>
        /// <value>Total number of users who engaged (acknowledged, accepted responder request) in the incident.</value>
        [DataMember(Name="engaged_user_count", EmitDefaultValue=false)]
        public int? EngagedUserCount { get; set; }

        /// <summary>
        /// Total count of instances where an incident is escalated between responders assigned to an escalation policy.
        /// </summary>
        /// <value>Total count of instances where an incident is escalated between responders assigned to an escalation policy.</value>
        [DataMember(Name="escalation_count", EmitDefaultValue=false)]
        public int? EscalationCount { get; set; }

        /// <summary>
        /// Incident ID
        /// </summary>
        /// <value>Incident ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The PagerDuty incident number
        /// </summary>
        /// <value>The PagerDuty incident number</value>
        [DataMember(Name="incident_number", EmitDefaultValue=false)]
        public int? IncidentNumber { get; set; }

        /// <summary>
        /// An incident is classified as a [major incident](https://support.pagerduty.com/docs/operational-reviews#major-incidents) if it has one of the two highest priorities, or if multiple responders are added and acknowledge the incident.
        /// </summary>
        /// <value>An incident is classified as a [major incident](https://support.pagerduty.com/docs/operational-reviews#major-incidents) if it has one of the two highest priorities, or if multiple responders are added and acknowledge the incident.</value>
        [DataMember(Name="major", EmitDefaultValue=false)]
        public bool? Major { get; set; }

        /// <summary>
        /// Total number of unique interruptions during off hour. Off hour: 6pm-10pm Mon-Fri and all day Sat-Sun, based on the user’s time zone.      
        /// </summary>
        /// <value>Total number of unique interruptions during off hour. Off hour: 6pm-10pm Mon-Fri and all day Sat-Sun, based on the user’s time zone.      </value>
        [DataMember(Name="off_hour_interruptions", EmitDefaultValue=false)]
        public int? OffHourInterruptions { get; set; }

        /// <summary>
        /// ID of the incident&#x27;s priority level.
        /// </summary>
        /// <value>ID of the incident&#x27;s priority level.</value>
        [DataMember(Name="priority_id", EmitDefaultValue=false)]
        public string PriorityId { get; set; }

        /// <summary>
        /// The user-provided short name of the priority.
        /// </summary>
        /// <value>The user-provided short name of the priority.</value>
        [DataMember(Name="priority_name", EmitDefaultValue=false)]
        public string PriorityName { get; set; }

        /// <summary>
        /// Timestamp of when the incident was resolved.
        /// </summary>
        /// <value>Timestamp of when the incident was resolved.</value>
        [DataMember(Name="resolved_at", EmitDefaultValue=false)]
        public string ResolvedAt { get; set; }

        /// <summary>
        /// A measure of *people response time*. This metric measures the time from the first user engagement (acknowledge or responder accept) to the last. This metric is only used for incidents with **multiple responders**; for incidents with one or no engaged users, this value is null.
        /// </summary>
        /// <value>A measure of *people response time*. This metric measures the time from the first user engagement (acknowledge or responder accept) to the last. This metric is only used for incidents with **multiple responders**; for incidents with one or no engaged users, this value is null.</value>
        [DataMember(Name="seconds_to_engage", EmitDefaultValue=false)]
        public int? SecondsToEngage { get; set; }

        /// <summary>
        /// Time between start of an incident, and the first responder to acknowledge.
        /// </summary>
        /// <value>Time between start of an incident, and the first responder to acknowledge.</value>
        [DataMember(Name="seconds_to_first_ack", EmitDefaultValue=false)]
        public int? SecondsToFirstAck { get; set; }

        /// <summary>
        /// Time between start of an incident, and the last additional responder to acknowledge.  If an incident has one or less responders, the value will be null.
        /// </summary>
        /// <value>Time between start of an incident, and the last additional responder to acknowledge.  If an incident has one or less responders, the value will be null.</value>
        [DataMember(Name="seconds_to_mobilize", EmitDefaultValue=false)]
        public int? SecondsToMobilize { get; set; }

        /// <summary>
        /// Time from when incident triggered until it was resolved.
        /// </summary>
        /// <value>Time from when incident triggered until it was resolved.</value>
        [DataMember(Name="seconds_to_resolve", EmitDefaultValue=false)]
        public int? SecondsToResolve { get; set; }

        /// <summary>
        /// ID of the service that the incident triggered on.
        /// </summary>
        /// <value>ID of the service that the incident triggered on.</value>
        [DataMember(Name="service_id", EmitDefaultValue=false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Name of the service that the incident triggered on.
        /// </summary>
        /// <value>Name of the service that the incident triggered on.</value>
        [DataMember(Name="service_name", EmitDefaultValue=false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Total number of unique interruptions during sleep hour. Sleep hour: 10pm-8am every day, based on the user’s time zone.
        /// </summary>
        /// <value>Total number of unique interruptions during sleep hour. Sleep hour: 10pm-8am every day, based on the user’s time zone.</value>
        [DataMember(Name="sleep_hour_interruptions", EmitDefaultValue=false)]
        public int? SleepHourInterruptions { get; set; }

        /// <summary>
        /// Total seconds the incident has been snoozed for.
        /// </summary>
        /// <value>Total seconds the incident has been snoozed for.</value>
        [DataMember(Name="snoozed_seconds", EmitDefaultValue=false)]
        public int? SnoozedSeconds { get; set; }

        /// <summary>
        /// ID of the team the incident was assigned to.
        /// </summary>
        /// <value>ID of the team the incident was assigned to.</value>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// Name of the team the incident was assigned to.
        /// </summary>
        /// <value>Name of the team the incident was assigned to.</value>
        [DataMember(Name="team_name", EmitDefaultValue=false)]
        public string TeamName { get; set; }

        /// <summary>
        /// Notification level
        /// </summary>
        /// <value>Notification level</value>
        [DataMember(Name="urgency", EmitDefaultValue=false)]
        public string Urgency { get; set; }

        /// <summary>
        /// The total response effort in seconds, [as defined by the user](https://support.pagerduty.com/docs/editing-incidents#edit-incident-duration).
        /// </summary>
        /// <value>The total response effort in seconds, [as defined by the user](https://support.pagerduty.com/docs/editing-incidents#edit-incident-duration).</value>
        [DataMember(Name="user_defined_effort_seconds", EmitDefaultValue=false)]
        public int? UserDefinedEffortSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsRawIncident {\n");
            sb.Append("  AssignmentCount: ").Append(AssignmentCount).Append("\n");
            sb.Append("  BusinessHourInterruptions: ").Append(BusinessHourInterruptions).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EngagedSeconds: ").Append(EngagedSeconds).Append("\n");
            sb.Append("  EngagedUserCount: ").Append(EngagedUserCount).Append("\n");
            sb.Append("  EscalationCount: ").Append(EscalationCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncidentNumber: ").Append(IncidentNumber).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  OffHourInterruptions: ").Append(OffHourInterruptions).Append("\n");
            sb.Append("  PriorityId: ").Append(PriorityId).Append("\n");
            sb.Append("  PriorityName: ").Append(PriorityName).Append("\n");
            sb.Append("  ResolvedAt: ").Append(ResolvedAt).Append("\n");
            sb.Append("  SecondsToEngage: ").Append(SecondsToEngage).Append("\n");
            sb.Append("  SecondsToFirstAck: ").Append(SecondsToFirstAck).Append("\n");
            sb.Append("  SecondsToMobilize: ").Append(SecondsToMobilize).Append("\n");
            sb.Append("  SecondsToResolve: ").Append(SecondsToResolve).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  SleepHourInterruptions: ").Append(SleepHourInterruptions).Append("\n");
            sb.Append("  SnoozedSeconds: ").Append(SnoozedSeconds).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  Urgency: ").Append(Urgency).Append("\n");
            sb.Append("  UserDefinedEffortSeconds: ").Append(UserDefinedEffortSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsRawIncident);
        }

        /// <summary>
        /// Returns true if AnalyticsRawIncident instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsRawIncident to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsRawIncident input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssignmentCount == input.AssignmentCount ||
                    (this.AssignmentCount != null &&
                    this.AssignmentCount.Equals(input.AssignmentCount))
                ) && 
                (
                    this.BusinessHourInterruptions == input.BusinessHourInterruptions ||
                    (this.BusinessHourInterruptions != null &&
                    this.BusinessHourInterruptions.Equals(input.BusinessHourInterruptions))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EngagedSeconds == input.EngagedSeconds ||
                    (this.EngagedSeconds != null &&
                    this.EngagedSeconds.Equals(input.EngagedSeconds))
                ) && 
                (
                    this.EngagedUserCount == input.EngagedUserCount ||
                    (this.EngagedUserCount != null &&
                    this.EngagedUserCount.Equals(input.EngagedUserCount))
                ) && 
                (
                    this.EscalationCount == input.EscalationCount ||
                    (this.EscalationCount != null &&
                    this.EscalationCount.Equals(input.EscalationCount))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IncidentNumber == input.IncidentNumber ||
                    (this.IncidentNumber != null &&
                    this.IncidentNumber.Equals(input.IncidentNumber))
                ) && 
                (
                    this.Major == input.Major ||
                    (this.Major != null &&
                    this.Major.Equals(input.Major))
                ) && 
                (
                    this.OffHourInterruptions == input.OffHourInterruptions ||
                    (this.OffHourInterruptions != null &&
                    this.OffHourInterruptions.Equals(input.OffHourInterruptions))
                ) && 
                (
                    this.PriorityId == input.PriorityId ||
                    (this.PriorityId != null &&
                    this.PriorityId.Equals(input.PriorityId))
                ) && 
                (
                    this.PriorityName == input.PriorityName ||
                    (this.PriorityName != null &&
                    this.PriorityName.Equals(input.PriorityName))
                ) && 
                (
                    this.ResolvedAt == input.ResolvedAt ||
                    (this.ResolvedAt != null &&
                    this.ResolvedAt.Equals(input.ResolvedAt))
                ) && 
                (
                    this.SecondsToEngage == input.SecondsToEngage ||
                    (this.SecondsToEngage != null &&
                    this.SecondsToEngage.Equals(input.SecondsToEngage))
                ) && 
                (
                    this.SecondsToFirstAck == input.SecondsToFirstAck ||
                    (this.SecondsToFirstAck != null &&
                    this.SecondsToFirstAck.Equals(input.SecondsToFirstAck))
                ) && 
                (
                    this.SecondsToMobilize == input.SecondsToMobilize ||
                    (this.SecondsToMobilize != null &&
                    this.SecondsToMobilize.Equals(input.SecondsToMobilize))
                ) && 
                (
                    this.SecondsToResolve == input.SecondsToResolve ||
                    (this.SecondsToResolve != null &&
                    this.SecondsToResolve.Equals(input.SecondsToResolve))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.SleepHourInterruptions == input.SleepHourInterruptions ||
                    (this.SleepHourInterruptions != null &&
                    this.SleepHourInterruptions.Equals(input.SleepHourInterruptions))
                ) && 
                (
                    this.SnoozedSeconds == input.SnoozedSeconds ||
                    (this.SnoozedSeconds != null &&
                    this.SnoozedSeconds.Equals(input.SnoozedSeconds))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.TeamName == input.TeamName ||
                    (this.TeamName != null &&
                    this.TeamName.Equals(input.TeamName))
                ) && 
                (
                    this.Urgency == input.Urgency ||
                    (this.Urgency != null &&
                    this.Urgency.Equals(input.Urgency))
                ) && 
                (
                    this.UserDefinedEffortSeconds == input.UserDefinedEffortSeconds ||
                    (this.UserDefinedEffortSeconds != null &&
                    this.UserDefinedEffortSeconds.Equals(input.UserDefinedEffortSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssignmentCount != null)
                    hashCode = hashCode * 59 + this.AssignmentCount.GetHashCode();
                if (this.BusinessHourInterruptions != null)
                    hashCode = hashCode * 59 + this.BusinessHourInterruptions.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EngagedSeconds != null)
                    hashCode = hashCode * 59 + this.EngagedSeconds.GetHashCode();
                if (this.EngagedUserCount != null)
                    hashCode = hashCode * 59 + this.EngagedUserCount.GetHashCode();
                if (this.EscalationCount != null)
                    hashCode = hashCode * 59 + this.EscalationCount.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IncidentNumber != null)
                    hashCode = hashCode * 59 + this.IncidentNumber.GetHashCode();
                if (this.Major != null)
                    hashCode = hashCode * 59 + this.Major.GetHashCode();
                if (this.OffHourInterruptions != null)
                    hashCode = hashCode * 59 + this.OffHourInterruptions.GetHashCode();
                if (this.PriorityId != null)
                    hashCode = hashCode * 59 + this.PriorityId.GetHashCode();
                if (this.PriorityName != null)
                    hashCode = hashCode * 59 + this.PriorityName.GetHashCode();
                if (this.ResolvedAt != null)
                    hashCode = hashCode * 59 + this.ResolvedAt.GetHashCode();
                if (this.SecondsToEngage != null)
                    hashCode = hashCode * 59 + this.SecondsToEngage.GetHashCode();
                if (this.SecondsToFirstAck != null)
                    hashCode = hashCode * 59 + this.SecondsToFirstAck.GetHashCode();
                if (this.SecondsToMobilize != null)
                    hashCode = hashCode * 59 + this.SecondsToMobilize.GetHashCode();
                if (this.SecondsToResolve != null)
                    hashCode = hashCode * 59 + this.SecondsToResolve.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.SleepHourInterruptions != null)
                    hashCode = hashCode * 59 + this.SleepHourInterruptions.GetHashCode();
                if (this.SnoozedSeconds != null)
                    hashCode = hashCode * 59 + this.SnoozedSeconds.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.TeamName != null)
                    hashCode = hashCode * 59 + this.TeamName.GetHashCode();
                if (this.Urgency != null)
                    hashCode = hashCode * 59 + this.Urgency.GetHashCode();
                if (this.UserDefinedEffortSeconds != null)
                    hashCode = hashCode * 59 + this.UserDefinedEffortSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
