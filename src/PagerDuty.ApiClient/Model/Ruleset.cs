/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Ruleset
    /// </summary>
    [DataContract]
        public partial class Ruleset :  IEquatable<Ruleset>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            [EnumMember(Value = "global")]
            Global = 1,
            /// <summary>
            /// Enum Defaultglobal for value: default_global
            /// </summary>
            [EnumMember(Value = "default_global")]
            Defaultglobal = 2        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ruleset" /> class.
        /// </summary>
        /// <param name="name">Name of the Ruleset..</param>
        /// <param name="team">Reference to the team that owns the Ruleset. If none is specified, only admins have access..</param>
        public Ruleset(string name = default(string), Object team = default(Object))
        {
            this.Name = name;
            this.Team = team;
        }
        
        /// <summary>
        /// ID of the Ruleset.
        /// </summary>
        /// <value>ID of the Ruleset.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// the API show URL at which the object is accessible
        /// </summary>
        /// <value>the API show URL at which the object is accessible</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; private set; }


        /// <summary>
        /// Name of the Ruleset.
        /// </summary>
        /// <value>Name of the Ruleset.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Routing keys routed to this Ruleset.
        /// </summary>
        /// <value>Routing keys routed to this Ruleset.</value>
        [DataMember(Name="routing_keys", EmitDefaultValue=false)]
        public List<string> RoutingKeys { get; private set; }

        /// <summary>
        /// The date the Ruleset was created at.
        /// </summary>
        /// <value>The date the Ruleset was created at.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Reference to the user that has created the Ruleset.
        /// </summary>
        /// <value>Reference to the user that has created the Ruleset.</value>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public Object Creator { get; private set; }

        /// <summary>
        /// The date the Ruleset was last updated.
        /// </summary>
        /// <value>The date the Ruleset was last updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Reference to the user that has updated the Ruleset last.
        /// </summary>
        /// <value>Reference to the user that has updated the Ruleset last.</value>
        [DataMember(Name="updater", EmitDefaultValue=false)]
        public Object Updater { get; private set; }

        /// <summary>
        /// Reference to the team that owns the Ruleset. If none is specified, only admins have access.
        /// </summary>
        /// <value>Reference to the team that owns the Ruleset. If none is specified, only admins have access.</value>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public Object Team { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ruleset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoutingKeys: ").Append(RoutingKeys).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Updater: ").Append(Updater).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ruleset);
        }

        /// <summary>
        /// Returns true if Ruleset instances are equal
        /// </summary>
        /// <param name="input">Instance of Ruleset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ruleset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RoutingKeys == input.RoutingKeys ||
                    this.RoutingKeys != null &&
                    input.RoutingKeys != null &&
                    this.RoutingKeys.SequenceEqual(input.RoutingKeys)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Updater == input.Updater ||
                    (this.Updater != null &&
                    this.Updater.Equals(input.Updater))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RoutingKeys != null)
                    hashCode = hashCode * 59 + this.RoutingKeys.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Updater != null)
                    hashCode = hashCode * 59 + this.Updater.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
