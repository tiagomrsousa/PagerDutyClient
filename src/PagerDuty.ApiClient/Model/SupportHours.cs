/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// SupportHours
    /// </summary>
    [DataContract]
        public partial class SupportHours :  IEquatable<SupportHours>, IValidatableObject
    {
        /// <summary>
        /// The type of support hours
        /// </summary>
        /// <value>The type of support hours</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Fixedtimeperday for value: fixed_time_per_day
            /// </summary>
            [EnumMember(Value = "fixed_time_per_day")]
            Fixedtimeperday = 1        }
        /// <summary>
        /// The type of support hours
        /// </summary>
        /// <value>The type of support hours</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportHours" /> class.
        /// </summary>
        /// <param name="type">The type of support hours (default to TypeEnum.Fixedtimeperday).</param>
        /// <param name="timeZone">The time zone for the support hours.</param>
        /// <param name="startTime">The support hours&#x27; starting time of day (date portion is ignored).</param>
        /// <param name="endTime">The support hours&#x27; ending time of day (date portion is ignored).</param>
        public SupportHours(TypeEnum? type = TypeEnum.Fixedtimeperday, string timeZone = default(string), string startTime = default(string), string endTime = default(string))
        {
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = TypeEnum.Fixedtimeperday;
            }
            else
            {
                this.Type = type;
            }
            this.TimeZone = timeZone;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }
        

        /// <summary>
        /// The time zone for the support hours
        /// </summary>
        /// <value>The time zone for the support hours</value>
        [DataMember(Name="time_zone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets DaysOfWeek
        /// </summary>
        [DataMember(Name="days_of_week", EmitDefaultValue=false)]
        public List<int?> DaysOfWeek { get; private set; }

        /// <summary>
        /// The support hours&#x27; starting time of day (date portion is ignored)
        /// </summary>
        /// <value>The support hours&#x27; starting time of day (date portion is ignored)</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The support hours&#x27; ending time of day (date portion is ignored)
        /// </summary>
        /// <value>The support hours&#x27; ending time of day (date portion is ignored)</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SupportHours {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportHours);
        }

        /// <summary>
        /// Returns true if SupportHours instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportHours to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportHours input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.DaysOfWeek == input.DaysOfWeek ||
                    this.DaysOfWeek != null &&
                    input.DaysOfWeek != null &&
                    this.DaysOfWeek.SequenceEqual(input.DaysOfWeek)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.DaysOfWeek != null)
                    hashCode = hashCode * 59 + this.DaysOfWeek.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
