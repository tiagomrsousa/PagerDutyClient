/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// LogEntryReference
    /// </summary>
    [DataContract]
        public partial class LogEntryReference : Reference,  IEquatable<LogEntryReference>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Acknowledgelogentryreference for value: acknowledge_log_entry_reference
            /// </summary>
            [EnumMember(Value = "acknowledge_log_entry_reference")]
            Acknowledgelogentryreference = 1,
            /// <summary>
            /// Enum Annotatelogentryreference for value: annotate_log_entry_reference
            /// </summary>
            [EnumMember(Value = "annotate_log_entry_reference")]
            Annotatelogentryreference = 2,
            /// <summary>
            /// Enum Assignlogentryreference for value: assign_log_entry_reference
            /// </summary>
            [EnumMember(Value = "assign_log_entry_reference")]
            Assignlogentryreference = 3,
            /// <summary>
            /// Enum Escalatelogentryreference for value: escalate_log_entry_reference
            /// </summary>
            [EnumMember(Value = "escalate_log_entry_reference")]
            Escalatelogentryreference = 4,
            /// <summary>
            /// Enum Exhaustescalationpathlogentryreference for value: exhaust_escalation_path_log_entry_reference
            /// </summary>
            [EnumMember(Value = "exhaust_escalation_path_log_entry_reference")]
            Exhaustescalationpathlogentryreference = 5,
            /// <summary>
            /// Enum Notifylogentryreference for value: notify_log_entry_reference
            /// </summary>
            [EnumMember(Value = "notify_log_entry_reference")]
            Notifylogentryreference = 6,
            /// <summary>
            /// Enum Reachtriggerlimitlogentryreference for value: reach_trigger_limit_log_entry_reference
            /// </summary>
            [EnumMember(Value = "reach_trigger_limit_log_entry_reference")]
            Reachtriggerlimitlogentryreference = 7,
            /// <summary>
            /// Enum Repeatescalationpathlogentryreference for value: repeat_escalation_path_log_entry_reference
            /// </summary>
            [EnumMember(Value = "repeat_escalation_path_log_entry_reference")]
            Repeatescalationpathlogentryreference = 8,
            /// <summary>
            /// Enum Resolvelogentryreference for value: resolve_log_entry_reference
            /// </summary>
            [EnumMember(Value = "resolve_log_entry_reference")]
            Resolvelogentryreference = 9,
            /// <summary>
            /// Enum Snoozelogentryreference for value: snooze_log_entry_reference
            /// </summary>
            [EnumMember(Value = "snooze_log_entry_reference")]
            Snoozelogentryreference = 10,
            /// <summary>
            /// Enum Triggerlogentryreference for value: trigger_log_entry_reference
            /// </summary>
            [EnumMember(Value = "trigger_log_entry_reference")]
            Triggerlogentryreference = 11,
            /// <summary>
            /// Enum Unacknowledgelogentryreference for value: unacknowledge_log_entry_reference
            /// </summary>
            [EnumMember(Value = "unacknowledge_log_entry_reference")]
            Unacknowledgelogentryreference = 12        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogEntryReference" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        public LogEntryReference(TypeEnum? type = default(TypeEnum?)) : base()
        {
            this.Type = type;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogEntryReference {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogEntryReference);
        }

        /// <summary>
        /// Returns true if LogEntryReference instances are equal
        /// </summary>
        /// <param name="input">Instance of LogEntryReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogEntryReference input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
