/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// WebhookSubscription
    /// </summary>
    [DataContract]
        public partial class WebhookSubscription :  IEquatable<WebhookSubscription>, IValidatableObject
    {
        /// <summary>
        /// The type indicating the schema of the object.
        /// </summary>
        /// <value>The type indicating the schema of the object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Webhooksubscription for value: webhook_subscription
            /// </summary>
            [EnumMember(Value = "webhook_subscription")]
            Webhooksubscription = 1        }
        /// <summary>
        /// The type indicating the schema of the object.
        /// </summary>
        /// <value>The type indicating the schema of the object.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookSubscription" /> class.
        /// </summary>
        /// <param name="type">The type indicating the schema of the object. (required) (default to TypeEnum.Webhooksubscription).</param>
        /// <param name="active">Determines whether this subscription will produce webhook events. (default to true).</param>
        /// <param name="deliveryMethod">deliveryMethod (required).</param>
        /// <param name="description">A short description of the webhook subscription..</param>
        /// <param name="events">The set of outbound event types the webhook will receive. (required).</param>
        /// <param name="filter">filter (required).</param>
        public WebhookSubscription(TypeEnum type = TypeEnum.Webhooksubscription, bool? active = true, Object deliveryMethod = default(Object), string description = default(string), List<string> events = default(List<string>), Object filter = default(Object))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for WebhookSubscription and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "deliveryMethod" is required (not null)
            if (deliveryMethod == null)
            {
                throw new InvalidDataException("deliveryMethod is a required property for WebhookSubscription and cannot be null");
            }
            else
            {
                this.DeliveryMethod = deliveryMethod;
            }
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new InvalidDataException("events is a required property for WebhookSubscription and cannot be null");
            }
            else
            {
                this.Events = events;
            }
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new InvalidDataException("filter is a required property for WebhookSubscription and cannot be null");
            }
            else
            {
                this.Filter = filter;
            }
            // use default value if no "active" provided
            if (active == null)
            {
                this.Active = true;
            }
            else
            {
                this.Active = active;
            }
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }


        /// <summary>
        /// Determines whether this subscription will produce webhook events.
        /// </summary>
        /// <value>Determines whether this subscription will produce webhook events.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryMethod
        /// </summary>
        [DataMember(Name="delivery_method", EmitDefaultValue=false)]
        public Object DeliveryMethod { get; set; }

        /// <summary>
        /// A short description of the webhook subscription.
        /// </summary>
        /// <value>A short description of the webhook subscription.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The set of outbound event types the webhook will receive.
        /// </summary>
        /// <value>The set of outbound event types the webhook will receive.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<string> Events { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public Object Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookSubscription);
        }

        /// <summary>
        /// Returns true if WebhookSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.DeliveryMethod == input.DeliveryMethod ||
                    (this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(input.DeliveryMethod))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.DeliveryMethod != null)
                    hashCode = hashCode * 59 + this.DeliveryMethod.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
