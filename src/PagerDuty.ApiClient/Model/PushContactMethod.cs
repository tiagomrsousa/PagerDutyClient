/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// The Push Contact Method of the User.
    /// </summary>
    [DataContract]
        public partial class PushContactMethod : ContactMethod,  IEquatable<PushContactMethod>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Pushnotificationcontactmethod for value: push_notification_contact_method
            /// </summary>
            [EnumMember(Value = "push_notification_contact_method")]
            Pushnotificationcontactmethod = 1        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The type of device.
        /// </summary>
        /// <value>The type of device.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DeviceTypeEnum
        {
            /// <summary>
            /// Enum Android for value: android
            /// </summary>
            [EnumMember(Value = "android")]
            Android = 1,
            /// <summary>
            /// Enum Ios for value: ios
            /// </summary>
            [EnumMember(Value = "ios")]
            Ios = 2        }
        /// <summary>
        /// The type of device.
        /// </summary>
        /// <value>The type of device.</value>
        [DataMember(Name="device_type", EmitDefaultValue=false)]
        public DeviceTypeEnum DeviceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushContactMethod" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="sounds">sounds.</param>
        /// <param name="createdAt">Time at which the contact method was created..</param>
        public PushContactMethod(TypeEnum type = default(TypeEnum), List<PushContactMethodSound> sounds = default(List<PushContactMethodSound>), DateTime? createdAt = default(DateTime?), string label = default(string), string address = default(string)) : base( label, address)
        {
            this.Type = type;
            this.Sounds = sounds;
            this.CreatedAt = createdAt;
        }
        


        /// <summary>
        /// Gets or Sets Sounds
        /// </summary>
        [DataMember(Name="sounds", EmitDefaultValue=false)]
        public List<PushContactMethodSound> Sounds { get; set; }

        /// <summary>
        /// Time at which the contact method was created.
        /// </summary>
        /// <value>Time at which the contact method was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.
        /// </summary>
        /// <value>If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.</value>
        [DataMember(Name="blacklisted", EmitDefaultValue=false)]
        public bool? Blacklisted { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushContactMethod {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Sounds: ").Append(Sounds).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Blacklisted: ").Append(Blacklisted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushContactMethod);
        }

        /// <summary>
        /// Returns true if PushContactMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PushContactMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushContactMethod input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && base.Equals(input) && 
                (
                    this.Sounds == input.Sounds ||
                    this.Sounds != null &&
                    input.Sounds != null &&
                    this.Sounds.SequenceEqual(input.Sounds)
                ) && base.Equals(input) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && base.Equals(input) && 
                (
                    this.Blacklisted == input.Blacklisted ||
                    (this.Blacklisted != null &&
                    this.Blacklisted.Equals(input.Blacklisted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.Sounds != null)
                    hashCode = hashCode * 59 + this.Sounds.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Blacklisted != null)
                    hashCode = hashCode * 59 + this.Blacklisted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
