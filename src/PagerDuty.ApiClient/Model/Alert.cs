/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Alert
    /// </summary>
    [DataContract]
        public partial class Alert :  IEquatable<Alert>, IValidatableObject
    {
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Alert for value: alert
            /// </summary>
            [EnumMember(Value = "alert")]
            Alert = 1        }
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The current status of the alert.
        /// </summary>
        /// <value>The current status of the alert.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Triggered for value: triggered
            /// </summary>
            [EnumMember(Value = "triggered")]
            Triggered = 1,
            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 2        }
        /// <summary>
        /// The current status of the alert.
        /// </summary>
        /// <value>The current status of the alert.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The magnitude of the problem as reported by the monitoring tool.
        /// </summary>
        /// <value>The magnitude of the problem as reported by the monitoring tool.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SeverityEnum
        {
            /// <summary>
            /// Enum Info for value: info
            /// </summary>
            [EnumMember(Value = "info")]
            Info = 1,
            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 2,
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3,
            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 4        }
        /// <summary>
        /// The magnitude of the problem as reported by the monitoring tool.
        /// </summary>
        /// <value>The magnitude of the problem as reported by the monitoring tool.</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert" /> class.
        /// </summary>
        /// <param name="type">The type of object being created. (required) (default to TypeEnum.Alert).</param>
        /// <param name="status">The current status of the alert..</param>
        /// <param name="service">service.</param>
        /// <param name="firstTriggerLogEntry">firstTriggerLogEntry.</param>
        /// <param name="incident">incident.</param>
        /// <param name="integration">integration.</param>
        public Alert(TypeEnum type = TypeEnum.Alert, StatusEnum? status = default(StatusEnum?), ServiceReference service = default(ServiceReference), LogEntryReference firstTriggerLogEntry = default(LogEntryReference), IncidentReference incident = default(IncidentReference), IntegrationReference integration = default(IntegrationReference))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Alert and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Status = status;
            this.Service = service;
            this.FirstTriggerLogEntry = firstTriggerLogEntry;
            this.Incident = incident;
            this.Integration = integration;
        }
        
        /// <summary>
        /// The date/time the alert was first triggered.
        /// </summary>
        /// <value>The date/time the alert was first triggered.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }



        /// <summary>
        /// The alert&#x27;s de-duplication key.
        /// </summary>
        /// <value>The alert&#x27;s de-duplication key.</value>
        [DataMember(Name="alert_key", EmitDefaultValue=false)]
        public string AlertKey { get; private set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public ServiceReference Service { get; set; }

        /// <summary>
        /// Gets or Sets FirstTriggerLogEntry
        /// </summary>
        [DataMember(Name="first_trigger_log_entry", EmitDefaultValue=false)]
        public LogEntryReference FirstTriggerLogEntry { get; set; }

        /// <summary>
        /// Gets or Sets Incident
        /// </summary>
        [DataMember(Name="incident", EmitDefaultValue=false)]
        public IncidentReference Incident { get; set; }

        /// <summary>
        /// Whether or not an alert is suppressed. Suppressed alerts are not created with a parent incident.
        /// </summary>
        /// <value>Whether or not an alert is suppressed. Suppressed alerts are not created with a parent incident.</value>
        [DataMember(Name="suppressed", EmitDefaultValue=false)]
        public bool? Suppressed { get; private set; }


        /// <summary>
        /// Gets or Sets Integration
        /// </summary>
        [DataMember(Name="integration", EmitDefaultValue=false)]
        public IntegrationReference Integration { get; set; }

        /// <summary>
        /// A JSON object containing data describing the alert.
        /// </summary>
        /// <value>A JSON object containing data describing the alert.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public Object Body { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Alert {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AlertKey: ").Append(AlertKey).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  FirstTriggerLogEntry: ").Append(FirstTriggerLogEntry).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  Suppressed: ").Append(Suppressed).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Integration: ").Append(Integration).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Alert);
        }

        /// <summary>
        /// Returns true if Alert instances are equal
        /// </summary>
        /// <param name="input">Instance of Alert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Alert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AlertKey == input.AlertKey ||
                    (this.AlertKey != null &&
                    this.AlertKey.Equals(input.AlertKey))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.FirstTriggerLogEntry == input.FirstTriggerLogEntry ||
                    (this.FirstTriggerLogEntry != null &&
                    this.FirstTriggerLogEntry.Equals(input.FirstTriggerLogEntry))
                ) && 
                (
                    this.Incident == input.Incident ||
                    (this.Incident != null &&
                    this.Incident.Equals(input.Incident))
                ) && 
                (
                    this.Suppressed == input.Suppressed ||
                    (this.Suppressed != null &&
                    this.Suppressed.Equals(input.Suppressed))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Integration == input.Integration ||
                    (this.Integration != null &&
                    this.Integration.Equals(input.Integration))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AlertKey != null)
                    hashCode = hashCode * 59 + this.AlertKey.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.FirstTriggerLogEntry != null)
                    hashCode = hashCode * 59 + this.FirstTriggerLogEntry.GetHashCode();
                if (this.Incident != null)
                    hashCode = hashCode * 59 + this.Incident.GetHashCode();
                if (this.Suppressed != null)
                    hashCode = hashCode * 59 + this.Suppressed.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Integration != null)
                    hashCode = hashCode * 59 + this.Integration.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
