/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// IncidentsRespondersReference
    /// </summary>
    [DataContract]
        public partial class IncidentsRespondersReference :  IEquatable<IncidentsRespondersReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsRespondersReference" /> class.
        /// </summary>
        /// <param name="state">The status of the responder being added to the incident.</param>
        /// <param name="user">user.</param>
        /// <param name="incident">incident.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="message">The message sent with the responder request.</param>
        /// <param name="requester">requester.</param>
        /// <param name="requestedAt">requestedAt.</param>
        public IncidentsRespondersReference(string state = default(string), UserReference user = default(UserReference), IncidentReference incident = default(IncidentReference), string updatedAt = default(string), string message = default(string), UserReference requester = default(UserReference), string requestedAt = default(string))
        {
            this.State = state;
            this.User = user;
            this.Incident = incident;
            this.UpdatedAt = updatedAt;
            this.Message = message;
            this.Requester = requester;
            this.RequestedAt = requestedAt;
        }
        
        /// <summary>
        /// The status of the responder being added to the incident
        /// </summary>
        /// <value>The status of the responder being added to the incident</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserReference User { get; set; }

        /// <summary>
        /// Gets or Sets Incident
        /// </summary>
        [DataMember(Name="incident", EmitDefaultValue=false)]
        public IncidentReference Incident { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// The message sent with the responder request
        /// </summary>
        /// <value>The message sent with the responder request</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Requester
        /// </summary>
        [DataMember(Name="requester", EmitDefaultValue=false)]
        public UserReference Requester { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAt
        /// </summary>
        [DataMember(Name="requested_at", EmitDefaultValue=false)]
        public string RequestedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncidentsRespondersReference {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncidentsRespondersReference);
        }

        /// <summary>
        /// Returns true if IncidentsRespondersReference instances are equal
        /// </summary>
        /// <param name="input">Instance of IncidentsRespondersReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncidentsRespondersReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Incident == input.Incident ||
                    (this.Incident != null &&
                    this.Incident.Equals(input.Incident))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Requester == input.Requester ||
                    (this.Requester != null &&
                    this.Requester.Equals(input.Requester))
                ) && 
                (
                    this.RequestedAt == input.RequestedAt ||
                    (this.RequestedAt != null &&
                    this.RequestedAt.Equals(input.RequestedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Incident != null)
                    hashCode = hashCode * 59 + this.Incident.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Requester != null)
                    hashCode = hashCode * 59 + this.Requester.GetHashCode();
                if (this.RequestedAt != null)
                    hashCode = hashCode * 59 + this.RequestedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
