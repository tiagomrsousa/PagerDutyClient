/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// AutomationActionsAbstractAction
    /// </summary>
    [DataContract]
        public partial class AutomationActionsAbstractAction :  IEquatable<AutomationActionsAbstractAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationActionsAbstractAction" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="actionType">actionType (required).</param>
        /// <param name="actionClassification">actionClassification.</param>
        /// <param name="runner">runner.</param>
        /// <param name="runnerType">runnerType.</param>
        /// <param name="services">services.</param>
        /// <param name="privileges">privileges.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="creationTime">The date/time (required).</param>
        /// <param name="modifyTime">The date/time (required).</param>
        /// <param name="lastRun">The date/time.</param>
        /// <param name="lastRunBy">lastRunBy.</param>
        public AutomationActionsAbstractAction(string name = default(string), string description = default(string), ComponentsparametersautomationActionsActionTypeschema actionType = default(ComponentsparametersautomationActionsActionTypeschema), AutomationActionsActionClassificationEnum actionClassification = default(AutomationActionsActionClassificationEnum), string runner = default(string), AutomationActionsRunnerTypeEnum runnerType = default(AutomationActionsRunnerTypeEnum), List<ServiceReference> services = default(List<ServiceReference>), AutomationActionsUserPermissions privileges = default(AutomationActionsUserPermissions), Object metadata = default(Object), DateTime? creationTime = default(DateTime?), DateTime? modifyTime = default(DateTime?), DateTime? lastRun = default(DateTime?), Object lastRunBy = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AutomationActionsAbstractAction and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "actionType" is required (not null)
            if (actionType == null)
            {
                throw new InvalidDataException("actionType is a required property for AutomationActionsAbstractAction and cannot be null");
            }
            else
            {
                this.ActionType = actionType;
            }
            // to ensure "creationTime" is required (not null)
            if (creationTime == null)
            {
                throw new InvalidDataException("creationTime is a required property for AutomationActionsAbstractAction and cannot be null");
            }
            else
            {
                this.CreationTime = creationTime;
            }
            // to ensure "modifyTime" is required (not null)
            if (modifyTime == null)
            {
                throw new InvalidDataException("modifyTime is a required property for AutomationActionsAbstractAction and cannot be null");
            }
            else
            {
                this.ModifyTime = modifyTime;
            }
            this.Description = description;
            this.ActionClassification = actionClassification;
            this.Runner = runner;
            this.RunnerType = runnerType;
            this.Services = services;
            this.Privileges = privileges;
            this.Metadata = metadata;
            this.LastRun = lastRun;
            this.LastRunBy = lastRunBy;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name="action_type", EmitDefaultValue=false)]
        public ComponentsparametersautomationActionsActionTypeschema ActionType { get; set; }

        /// <summary>
        /// Gets or Sets ActionClassification
        /// </summary>
        [DataMember(Name="action_classification", EmitDefaultValue=false)]
        public AutomationActionsActionClassificationEnum ActionClassification { get; set; }

        /// <summary>
        /// Gets or Sets Runner
        /// </summary>
        [DataMember(Name="runner", EmitDefaultValue=false)]
        public string Runner { get; set; }

        /// <summary>
        /// Gets or Sets RunnerType
        /// </summary>
        [DataMember(Name="runner_type", EmitDefaultValue=false)]
        public AutomationActionsRunnerTypeEnum RunnerType { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ServiceReference> Services { get; set; }

        /// <summary>
        /// Gets or Sets Privileges
        /// </summary>
        [DataMember(Name="privileges", EmitDefaultValue=false)]
        public AutomationActionsUserPermissions Privileges { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// The date/time
        /// </summary>
        /// <value>The date/time</value>
        [DataMember(Name="creation_time", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// The date/time
        /// </summary>
        /// <value>The date/time</value>
        [DataMember(Name="modify_time", EmitDefaultValue=false)]
        public DateTime? ModifyTime { get; set; }

        /// <summary>
        /// The date/time
        /// </summary>
        /// <value>The date/time</value>
        [DataMember(Name="last_run", EmitDefaultValue=false)]
        public DateTime? LastRun { get; set; }

        /// <summary>
        /// Gets or Sets LastRunBy
        /// </summary>
        [DataMember(Name="last_run_by", EmitDefaultValue=false)]
        public Object LastRunBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomationActionsAbstractAction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  ActionClassification: ").Append(ActionClassification).Append("\n");
            sb.Append("  Runner: ").Append(Runner).Append("\n");
            sb.Append("  RunnerType: ").Append(RunnerType).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Privileges: ").Append(Privileges).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  ModifyTime: ").Append(ModifyTime).Append("\n");
            sb.Append("  LastRun: ").Append(LastRun).Append("\n");
            sb.Append("  LastRunBy: ").Append(LastRunBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomationActionsAbstractAction);
        }

        /// <summary>
        /// Returns true if AutomationActionsAbstractAction instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomationActionsAbstractAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomationActionsAbstractAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.ActionClassification == input.ActionClassification ||
                    (this.ActionClassification != null &&
                    this.ActionClassification.Equals(input.ActionClassification))
                ) && 
                (
                    this.Runner == input.Runner ||
                    (this.Runner != null &&
                    this.Runner.Equals(input.Runner))
                ) && 
                (
                    this.RunnerType == input.RunnerType ||
                    (this.RunnerType != null &&
                    this.RunnerType.Equals(input.RunnerType))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.Privileges == input.Privileges ||
                    (this.Privileges != null &&
                    this.Privileges.Equals(input.Privileges))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.ModifyTime == input.ModifyTime ||
                    (this.ModifyTime != null &&
                    this.ModifyTime.Equals(input.ModifyTime))
                ) && 
                (
                    this.LastRun == input.LastRun ||
                    (this.LastRun != null &&
                    this.LastRun.Equals(input.LastRun))
                ) && 
                (
                    this.LastRunBy == input.LastRunBy ||
                    (this.LastRunBy != null &&
                    this.LastRunBy.Equals(input.LastRunBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ActionType != null)
                    hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.ActionClassification != null)
                    hashCode = hashCode * 59 + this.ActionClassification.GetHashCode();
                if (this.Runner != null)
                    hashCode = hashCode * 59 + this.Runner.GetHashCode();
                if (this.RunnerType != null)
                    hashCode = hashCode * 59 + this.RunnerType.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Privileges != null)
                    hashCode = hashCode * 59 + this.Privileges.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.ModifyTime != null)
                    hashCode = hashCode * 59 + this.ModifyTime.GetHashCode();
                if (this.LastRun != null)
                    hashCode = hashCode * 59 + this.LastRun.GetHashCode();
                if (this.LastRunBy != null)
                    hashCode = hashCode * 59 + this.LastRunBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
