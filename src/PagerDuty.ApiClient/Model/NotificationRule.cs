/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// NotificationRule
    /// </summary>
    [DataContract]
        public partial class NotificationRule :  IEquatable<NotificationRule>, IValidatableObject
    {
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Assignmentnotificationrule for value: assignment_notification_rule
            /// </summary>
            [EnumMember(Value = "assignment_notification_rule")]
            Assignmentnotificationrule = 1        }
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Which incident urgency this rule is used for. Account must have the &#x60;urgencies&#x60; ability to have a low urgency notification rule.
        /// </summary>
        /// <value>Which incident urgency this rule is used for. Account must have the &#x60;urgencies&#x60; ability to have a low urgency notification rule.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UrgencyEnum
        {
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 1,
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2        }
        /// <summary>
        /// Which incident urgency this rule is used for. Account must have the &#x60;urgencies&#x60; ability to have a low urgency notification rule.
        /// </summary>
        /// <value>Which incident urgency this rule is used for. Account must have the &#x60;urgencies&#x60; ability to have a low urgency notification rule.</value>
        [DataMember(Name="urgency", EmitDefaultValue=false)]
        public UrgencyEnum Urgency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationRule" /> class.
        /// </summary>
        /// <param name="type">The type of object being created. (required) (default to TypeEnum.Assignmentnotificationrule).</param>
        /// <param name="startDelayInMinutes">The delay before firing the rule, in minutes. (required).</param>
        /// <param name="contactMethod">contactMethod (required).</param>
        /// <param name="urgency">Which incident urgency this rule is used for. Account must have the &#x60;urgencies&#x60; ability to have a low urgency notification rule. (required).</param>
        public NotificationRule(TypeEnum type = TypeEnum.Assignmentnotificationrule, int? startDelayInMinutes = default(int?), ContactMethodReference contactMethod = default(ContactMethodReference), UrgencyEnum urgency = default(UrgencyEnum))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for NotificationRule and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "startDelayInMinutes" is required (not null)
            if (startDelayInMinutes == null)
            {
                throw new InvalidDataException("startDelayInMinutes is a required property for NotificationRule and cannot be null");
            }
            else
            {
                this.StartDelayInMinutes = startDelayInMinutes;
            }
            // to ensure "contactMethod" is required (not null)
            if (contactMethod == null)
            {
                throw new InvalidDataException("contactMethod is a required property for NotificationRule and cannot be null");
            }
            else
            {
                this.ContactMethod = contactMethod;
            }
            // to ensure "urgency" is required (not null)
            if (urgency == null)
            {
                throw new InvalidDataException("urgency is a required property for NotificationRule and cannot be null");
            }
            else
            {
                this.Urgency = urgency;
            }
        }
        

        /// <summary>
        /// The delay before firing the rule, in minutes.
        /// </summary>
        /// <value>The delay before firing the rule, in minutes.</value>
        [DataMember(Name="start_delay_in_minutes", EmitDefaultValue=false)]
        public int? StartDelayInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ContactMethod
        /// </summary>
        [DataMember(Name="contact_method", EmitDefaultValue=false)]
        public ContactMethodReference ContactMethod { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationRule {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartDelayInMinutes: ").Append(StartDelayInMinutes).Append("\n");
            sb.Append("  ContactMethod: ").Append(ContactMethod).Append("\n");
            sb.Append("  Urgency: ").Append(Urgency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationRule);
        }

        /// <summary>
        /// Returns true if NotificationRule instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartDelayInMinutes == input.StartDelayInMinutes ||
                    (this.StartDelayInMinutes != null &&
                    this.StartDelayInMinutes.Equals(input.StartDelayInMinutes))
                ) && 
                (
                    this.ContactMethod == input.ContactMethod ||
                    (this.ContactMethod != null &&
                    this.ContactMethod.Equals(input.ContactMethod))
                ) && 
                (
                    this.Urgency == input.Urgency ||
                    (this.Urgency != null &&
                    this.Urgency.Equals(input.Urgency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StartDelayInMinutes != null)
                    hashCode = hashCode * 59 + this.StartDelayInMinutes.GetHashCode();
                if (this.ContactMethod != null)
                    hashCode = hashCode * 59 + this.ContactMethod.GetHashCode();
                if (this.Urgency != null)
                    hashCode = hashCode * 59 + this.Urgency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
