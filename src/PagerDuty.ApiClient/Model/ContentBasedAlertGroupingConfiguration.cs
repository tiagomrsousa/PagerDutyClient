/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// The configuration for Content Based Alert Grouping
    /// </summary>
    [DataContract]
        public partial class ContentBasedAlertGroupingConfiguration :  IEquatable<ContentBasedAlertGroupingConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Whether Alerts should be grouped if &#x60;all&#x60; or &#x60;any&#x60; specified fields match. If &#x60;all&#x60; is selected, an exact match on every specified field name must occur for Alerts to be grouped. If &#x60;any&#x60; is selected, Alerts will be grouped when there is an exact match on at least one of the specified fields.
        /// </summary>
        /// <value>Whether Alerts should be grouped if &#x60;all&#x60; or &#x60;any&#x60; specified fields match. If &#x60;all&#x60; is selected, an exact match on every specified field name must occur for Alerts to be grouped. If &#x60;any&#x60; is selected, Alerts will be grouped when there is an exact match on at least one of the specified fields.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AggregateEnum
        {
            /// <summary>
            /// Enum Allany for value: all, any
            /// </summary>
            [EnumMember(Value = "all, any")]
            Allany = 1        }
        /// <summary>
        /// Whether Alerts should be grouped if &#x60;all&#x60; or &#x60;any&#x60; specified fields match. If &#x60;all&#x60; is selected, an exact match on every specified field name must occur for Alerts to be grouped. If &#x60;any&#x60; is selected, Alerts will be grouped when there is an exact match on at least one of the specified fields.
        /// </summary>
        /// <value>Whether Alerts should be grouped if &#x60;all&#x60; or &#x60;any&#x60; specified fields match. If &#x60;all&#x60; is selected, an exact match on every specified field name must occur for Alerts to be grouped. If &#x60;any&#x60; is selected, Alerts will be grouped when there is an exact match on at least one of the specified fields.</value>
        [DataMember(Name="aggregate", EmitDefaultValue=false)]
        public AggregateEnum? Aggregate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentBasedAlertGroupingConfiguration" /> class.
        /// </summary>
        /// <param name="aggregate">Whether Alerts should be grouped if &#x60;all&#x60; or &#x60;any&#x60; specified fields match. If &#x60;all&#x60; is selected, an exact match on every specified field name must occur for Alerts to be grouped. If &#x60;any&#x60; is selected, Alerts will be grouped when there is an exact match on at least one of the specified fields..</param>
        /// <param name="fields">The fields with which to group against. Depending on the aggregate, Alerts will group if some or all the fields match.</param>
        public ContentBasedAlertGroupingConfiguration(AggregateEnum? aggregate = default(AggregateEnum?), List<string> fields = default(List<string>))
        {
            this.Aggregate = aggregate;
            this.Fields = fields;
        }
        

        /// <summary>
        /// The fields with which to group against. Depending on the aggregate, Alerts will group if some or all the fields match
        /// </summary>
        /// <value>The fields with which to group against. Depending on the aggregate, Alerts will group if some or all the fields match</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentBasedAlertGroupingConfiguration {\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentBasedAlertGroupingConfiguration);
        }

        /// <summary>
        /// Returns true if ContentBasedAlertGroupingConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentBasedAlertGroupingConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentBasedAlertGroupingConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aggregate == input.Aggregate ||
                    (this.Aggregate != null &&
                    this.Aggregate.Equals(input.Aggregate))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aggregate != null)
                    hashCode = hashCode * 59 + this.Aggregate.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
