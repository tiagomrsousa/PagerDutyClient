/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// LogEntry
    /// </summary>
    [DataContract]
        public partial class LogEntry :  IEquatable<LogEntry>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Acknowledgelogentry for value: acknowledge_log_entry
            /// </summary>
            [EnumMember(Value = "acknowledge_log_entry")]
            Acknowledgelogentry = 1,
            /// <summary>
            /// Enum Annotatelogentry for value: annotate_log_entry
            /// </summary>
            [EnumMember(Value = "annotate_log_entry")]
            Annotatelogentry = 2,
            /// <summary>
            /// Enum Assignlogentry for value: assign_log_entry
            /// </summary>
            [EnumMember(Value = "assign_log_entry")]
            Assignlogentry = 3,
            /// <summary>
            /// Enum Escalatelogentry for value: escalate_log_entry
            /// </summary>
            [EnumMember(Value = "escalate_log_entry")]
            Escalatelogentry = 4,
            /// <summary>
            /// Enum Exhaustescalationpathlogentry for value: exhaust_escalation_path_log_entry
            /// </summary>
            [EnumMember(Value = "exhaust_escalation_path_log_entry")]
            Exhaustescalationpathlogentry = 5,
            /// <summary>
            /// Enum Notifylogentry for value: notify_log_entry
            /// </summary>
            [EnumMember(Value = "notify_log_entry")]
            Notifylogentry = 6,
            /// <summary>
            /// Enum Reachtriggerlimitlogentry for value: reach_trigger_limit_log_entry
            /// </summary>
            [EnumMember(Value = "reach_trigger_limit_log_entry")]
            Reachtriggerlimitlogentry = 7,
            /// <summary>
            /// Enum Repeatescalationpathlogentry for value: repeat_escalation_path_log_entry
            /// </summary>
            [EnumMember(Value = "repeat_escalation_path_log_entry")]
            Repeatescalationpathlogentry = 8,
            /// <summary>
            /// Enum Resolvelogentry for value: resolve_log_entry
            /// </summary>
            [EnumMember(Value = "resolve_log_entry")]
            Resolvelogentry = 9,
            /// <summary>
            /// Enum Snoozelogentry for value: snooze_log_entry
            /// </summary>
            [EnumMember(Value = "snooze_log_entry")]
            Snoozelogentry = 10,
            /// <summary>
            /// Enum Triggerlogentry for value: trigger_log_entry
            /// </summary>
            [EnumMember(Value = "trigger_log_entry")]
            Triggerlogentry = 11,
            /// <summary>
            /// Enum Unacknowledgelogentry for value: unacknowledge_log_entry
            /// </summary>
            [EnumMember(Value = "unacknowledge_log_entry")]
            Unacknowledgelogentry = 12        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogEntry" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="channel">channel.</param>
        /// <param name="agent">agent.</param>
        /// <param name="service">service.</param>
        /// <param name="user">user.</param>
        /// <param name="incident">incident.</param>
        public LogEntry(TypeEnum? type = default(TypeEnum?), Channel channel = default(Channel), AgentReference agent = default(AgentReference), ServiceReference service = default(ServiceReference), UserReference user = default(UserReference), IncidentReference incident = default(IncidentReference))
        {
            this.Type = type;
            this.Channel = channel;
            this.Agent = agent;
            this.Service = service;
            this.User = user;
            this.Incident = incident;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogEntry" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="channel">channel.</param>
        /// <param name="agent">agent.</param>
        /// <param name="service">service.</param>
        /// <param name="user">user.</param>
        /// <param name="incident">incident.</param>
        public LogEntry(Channel channel = default(Channel), AgentReference agent = default(AgentReference), ServiceReference service = default(ServiceReference), UserReference user = default(UserReference), IncidentReference incident = default(IncidentReference))
        {
            this.Type = default(TypeEnum?);
            this.Channel = channel;
            this.Agent = agent;
            this.Service = service;
            this.User = user;
            this.Incident = incident;
        }

        /// <summary>
        /// Time at which the log entry was created.
        /// </summary>
        /// <value>Time at which the log entry was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public Channel Channel { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="agent", EmitDefaultValue=false)]
        public AgentReference Agent { get; set; }

        /// <summary>
        /// Optional field containing a note, if one was included with the log entry.
        /// </summary>
        /// <value>Optional field containing a note, if one was included with the log entry.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; private set; }

        /// <summary>
        /// Contexts to be included with the trigger such as links to graphs or images.
        /// </summary>
        /// <value>Contexts to be included with the trigger such as links to graphs or images.</value>
        [DataMember(Name="contexts", EmitDefaultValue=false)]
        public List<Context> Contexts { get; private set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public ServiceReference Service { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserReference User { get; set; }

        /// <summary>
        /// Gets or Sets Incident
        /// </summary>
        [DataMember(Name="incident", EmitDefaultValue=false)]
        public IncidentReference Incident { get; set; }

        /// <summary>
        /// Will consist of references unless included
        /// </summary>
        /// <value>Will consist of references unless included</value>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<TeamReference> Teams { get; private set; }

        /// <summary>
        /// Gets or Sets EventDetails
        /// </summary>
        [DataMember(Name="event_details", EmitDefaultValue=false)]
        public Object EventDetails { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogEntry {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  EventDetails: ").Append(EventDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogEntry);
        }

        /// <summary>
        /// Returns true if LogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of LogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Agent == input.Agent ||
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Contexts == input.Contexts ||
                    this.Contexts != null &&
                    input.Contexts != null &&
                    this.Contexts.SequenceEqual(input.Contexts)
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Incident == input.Incident ||
                    (this.Incident != null &&
                    this.Incident.Equals(input.Incident))
                ) && 
                (
                    this.Teams == input.Teams ||
                    this.Teams != null &&
                    input.Teams != null &&
                    this.Teams.SequenceEqual(input.Teams)
                ) && 
                (
                    this.EventDetails == input.EventDetails ||
                    (this.EventDetails != null &&
                    this.EventDetails.Equals(input.EventDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Contexts != null)
                    hashCode = hashCode * 59 + this.Contexts.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Incident != null)
                    hashCode = hashCode * 59 + this.Incident.GetHashCode();
                if (this.Teams != null)
                    hashCode = hashCode * 59 + this.Teams.GetHashCode();
                if (this.EventDetails != null)
                    hashCode = hashCode * 59 + this.EventDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
