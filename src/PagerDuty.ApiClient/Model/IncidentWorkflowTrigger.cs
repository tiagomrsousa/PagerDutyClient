/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// IncidentWorkflowTrigger
    /// </summary>
    [DataContract]
        public partial class IncidentWorkflowTrigger :  IEquatable<IncidentWorkflowTrigger>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Workflowtrigger for value: workflow_trigger
            /// </summary>
            [EnumMember(Value = "workflow_trigger")]
            Workflowtrigger = 1        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines TriggerType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TriggerTypeEnum
        {
            /// <summary>
            /// Enum Conditional for value: conditional
            /// </summary>
            [EnumMember(Value = "conditional")]
            Conditional = 1,
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 2        }
        /// <summary>
        /// Gets or Sets TriggerType
        /// </summary>
        [DataMember(Name="trigger_type", EmitDefaultValue=false)]
        public TriggerTypeEnum? TriggerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentWorkflowTrigger" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="triggerType">triggerType.</param>
        /// <param name="condition">A PCL condition string which must be satisfied for the trigger to fire.  Required if trigger_type is “conditional”, not allowed if trigger_type is “manual” .</param>
        /// <param name="workflow">Workflow to start when this trigger is invoked.</param>
        /// <param name="services">An optional array of Services associated with this workflow. Incidents in any of the listed Services are eligible to fire this Trigger.</param>
        /// <param name="isSubscribedToAllServices">Indicates that the Trigger should be associated with All Services.</param>
        /// <param name="permissions">An object detailing who can start this Trigger. Applicable only to manual Triggers..</param>
        public IncidentWorkflowTrigger(TypeEnum? type = default(TypeEnum?), TriggerTypeEnum? triggerType = default(TriggerTypeEnum?), string condition = default(string), Object workflow = default(Object), List<Object> services = default(List<Object>), bool? isSubscribedToAllServices = default(bool?), Object permissions = default(Object))
        {
            this.Type = type;
            this.TriggerType = triggerType;
            this.Condition = condition;
            this.Workflow = workflow;
            this.Services = services;
            this.IsSubscribedToAllServices = isSubscribedToAllServices;
            this.Permissions = permissions;
        }
        

        /// <summary>
        /// Human readable name for the trigger type
        /// </summary>
        /// <value>Human readable name for the trigger type</value>
        [DataMember(Name="trigger_type_name", EmitDefaultValue=false)]
        public string TriggerTypeName { get; private set; }


        /// <summary>
        /// A PCL condition string which must be satisfied for the trigger to fire.  Required if trigger_type is “conditional”, not allowed if trigger_type is “manual” 
        /// </summary>
        /// <value>A PCL condition string which must be satisfied for the trigger to fire.  Required if trigger_type is “conditional”, not allowed if trigger_type is “manual” </value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or Sets TriggerUrl
        /// </summary>
        [DataMember(Name="trigger_url", EmitDefaultValue=false)]
        public string TriggerUrl { get; private set; }

        /// <summary>
        /// Workflow to start when this trigger is invoked
        /// </summary>
        /// <value>Workflow to start when this trigger is invoked</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public Object Workflow { get; set; }

        /// <summary>
        /// An optional array of Services associated with this workflow. Incidents in any of the listed Services are eligible to fire this Trigger
        /// </summary>
        /// <value>An optional array of Services associated with this workflow. Incidents in any of the listed Services are eligible to fire this Trigger</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<Object> Services { get; set; }

        /// <summary>
        /// Indicates that the Trigger should be associated with All Services
        /// </summary>
        /// <value>Indicates that the Trigger should be associated with All Services</value>
        [DataMember(Name="is_subscribed_to_all_services", EmitDefaultValue=false)]
        public bool? IsSubscribedToAllServices { get; set; }

        /// <summary>
        /// An object detailing who can start this Trigger. Applicable only to manual Triggers.
        /// </summary>
        /// <value>An object detailing who can start this Trigger. Applicable only to manual Triggers.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public Object Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncidentWorkflowTrigger {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TriggerTypeName: ").Append(TriggerTypeName).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  TriggerUrl: ").Append(TriggerUrl).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  IsSubscribedToAllServices: ").Append(IsSubscribedToAllServices).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncidentWorkflowTrigger);
        }

        /// <summary>
        /// Returns true if IncidentWorkflowTrigger instances are equal
        /// </summary>
        /// <param name="input">Instance of IncidentWorkflowTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncidentWorkflowTrigger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TriggerTypeName == input.TriggerTypeName ||
                    (this.TriggerTypeName != null &&
                    this.TriggerTypeName.Equals(input.TriggerTypeName))
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    (this.TriggerType != null &&
                    this.TriggerType.Equals(input.TriggerType))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.TriggerUrl == input.TriggerUrl ||
                    (this.TriggerUrl != null &&
                    this.TriggerUrl.Equals(input.TriggerUrl))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    (this.Workflow != null &&
                    this.Workflow.Equals(input.Workflow))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.IsSubscribedToAllServices == input.IsSubscribedToAllServices ||
                    (this.IsSubscribedToAllServices != null &&
                    this.IsSubscribedToAllServices.Equals(input.IsSubscribedToAllServices))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TriggerTypeName != null)
                    hashCode = hashCode * 59 + this.TriggerTypeName.GetHashCode();
                if (this.TriggerType != null)
                    hashCode = hashCode * 59 + this.TriggerType.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.TriggerUrl != null)
                    hashCode = hashCode * 59 + this.TriggerUrl.GetHashCode();
                if (this.Workflow != null)
                    hashCode = hashCode * 59 + this.Workflow.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.IsSubscribedToAllServices != null)
                    hashCode = hashCode * 59 + this.IsSubscribedToAllServices.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
