/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// CustomFieldsFieldValue
    /// </summary>
    [DataContract]
        public partial class CustomFieldsFieldValue :  IEquatable<CustomFieldsFieldValue>, IValidatableObject
    {
        /// <summary>
        /// Determines the type of the reference.
        /// </summary>
        /// <value>Determines the type of the reference.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Fieldvalue for value: field_value
            /// </summary>
            [EnumMember(Value = "field_value")]
            Fieldvalue = 1        }
        /// <summary>
        /// Determines the type of the reference.
        /// </summary>
        /// <value>Determines the type of the reference.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The kind of data the custom field is allowed to contain.
        /// </summary>
        /// <value>The kind of data the custom field is allowed to contain.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DatatypeEnum
        {
            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 1,
            /// <summary>
            /// Enum Integer for value: integer
            /// </summary>
            [EnumMember(Value = "integer")]
            Integer = 2,
            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            [EnumMember(Value = "float")]
            Float = 3,
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 4,
            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 5,
            /// <summary>
            /// Enum Url for value: url
            /// </summary>
            [EnumMember(Value = "url")]
            Url = 6        }
        /// <summary>
        /// The kind of data the custom field is allowed to contain.
        /// </summary>
        /// <value>The kind of data the custom field is allowed to contain.</value>
        [DataMember(Name="datatype", EmitDefaultValue=false)]
        public DatatypeEnum Datatype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsFieldValue" /> class.
        /// </summary>
        /// <param name="id">Id of the field. (required).</param>
        /// <param name="name">The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underescores. The &#x60;name&#x60; for a Field must be unique. (required).</param>
        /// <param name="type">Determines the type of the reference. (required).</param>
        /// <param name="displayName">The human-readable name of the field. This must be unique across an account. (required).</param>
        /// <param name="multiValue">If &#x60;true&#x60;, allows the custom field to store a set of multiple values. Must be &#x60;false&#x60; if &#x60;datatype&#x60; is not \&quot;string\&quot; or \&quot;url\&quot; (required).</param>
        /// <param name="datatype">The kind of data the custom field is allowed to contain. (required).</param>
        /// <param name="description">A description of the data this field contains. (required).</param>
        /// <param name="fixedOptions">If &#x60;true&#x60;, restricts the values allowed to be stored in the custom field to a limited set of options (configured via the Field Option sub-resource). Must be &#x60;false&#x60; if &#x60;datatype&#x60; is \&quot;boolean\&quot;, \&quot;url\&quot;, or \&quot;datetime\&quot; (required).</param>
        /// <param name="value">value (required).</param>
        public CustomFieldsFieldValue(string id = default(string), string name = default(string), TypeEnum type = default(TypeEnum), string displayName = default(string), bool? multiValue = default(bool?), DatatypeEnum datatype = default(DatatypeEnum), string description = default(string), bool? fixedOptions = default(bool?), OneOfCustomFieldsFieldValueValue value = default(OneOfCustomFieldsFieldValueValue))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "multiValue" is required (not null)
            if (multiValue == null)
            {
                throw new InvalidDataException("multiValue is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.MultiValue = multiValue;
            }
            // to ensure "datatype" is required (not null)
            if (datatype == null)
            {
                throw new InvalidDataException("datatype is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.Datatype = datatype;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "fixedOptions" is required (not null)
            if (fixedOptions == null)
            {
                throw new InvalidDataException("fixedOptions is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.FixedOptions = fixedOptions;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for CustomFieldsFieldValue and cannot be null");
            }
            else
            {
                this.Value = value;
            }
        }
        
        /// <summary>
        /// Id of the field.
        /// </summary>
        /// <value>Id of the field.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underescores. The &#x60;name&#x60; for a Field must be unique.
        /// </summary>
        /// <value>The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underescores. The &#x60;name&#x60; for a Field must be unique.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The human-readable name of the field. This must be unique across an account.
        /// </summary>
        /// <value>The human-readable name of the field. This must be unique across an account.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, allows the custom field to store a set of multiple values. Must be &#x60;false&#x60; if &#x60;datatype&#x60; is not \&quot;string\&quot; or \&quot;url\&quot;
        /// </summary>
        /// <value>If &#x60;true&#x60;, allows the custom field to store a set of multiple values. Must be &#x60;false&#x60; if &#x60;datatype&#x60; is not \&quot;string\&quot; or \&quot;url\&quot;</value>
        [DataMember(Name="multi_value", EmitDefaultValue=false)]
        public bool? MultiValue { get; set; }


        /// <summary>
        /// A description of the data this field contains.
        /// </summary>
        /// <value>A description of the data this field contains.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, restricts the values allowed to be stored in the custom field to a limited set of options (configured via the Field Option sub-resource). Must be &#x60;false&#x60; if &#x60;datatype&#x60; is \&quot;boolean\&quot;, \&quot;url\&quot;, or \&quot;datetime\&quot;
        /// </summary>
        /// <value>If &#x60;true&#x60;, restricts the values allowed to be stored in the custom field to a limited set of options (configured via the Field Option sub-resource). Must be &#x60;false&#x60; if &#x60;datatype&#x60; is \&quot;boolean\&quot;, \&quot;url\&quot;, or \&quot;datetime\&quot;</value>
        [DataMember(Name="fixed_options", EmitDefaultValue=false)]
        public bool? FixedOptions { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public OneOfCustomFieldsFieldValueValue Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldsFieldValue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MultiValue: ").Append(MultiValue).Append("\n");
            sb.Append("  Datatype: ").Append(Datatype).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FixedOptions: ").Append(FixedOptions).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFieldsFieldValue);
        }

        /// <summary>
        /// Returns true if CustomFieldsFieldValue instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFieldsFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldsFieldValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.MultiValue == input.MultiValue ||
                    (this.MultiValue != null &&
                    this.MultiValue.Equals(input.MultiValue))
                ) && 
                (
                    this.Datatype == input.Datatype ||
                    (this.Datatype != null &&
                    this.Datatype.Equals(input.Datatype))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FixedOptions == input.FixedOptions ||
                    (this.FixedOptions != null &&
                    this.FixedOptions.Equals(input.FixedOptions))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.MultiValue != null)
                    hashCode = hashCode * 59 + this.MultiValue.GetHashCode();
                if (this.Datatype != null)
                    hashCode = hashCode * 59 + this.Datatype.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FixedOptions != null)
                    hashCode = hashCode * 59 + this.FixedOptions.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
