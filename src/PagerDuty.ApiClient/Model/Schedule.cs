/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Schedule
    /// </summary>
    [DataContract]
        public partial class Schedule :  IEquatable<Schedule>, IValidatableObject
    {
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 1        }
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Schedule" /> class.
        /// </summary>
        /// <param name="type">The type of object being created. (required) (default to TypeEnum.Schedule).</param>
        /// <param name="scheduleLayers">A list of schedule layers..</param>
        /// <param name="timeZone">The time zone of the schedule. (required).</param>
        /// <param name="name">The name of the schedule.</param>
        /// <param name="description">The description of the schedule.</param>
        /// <param name="finalSchedule">finalSchedule.</param>
        /// <param name="overridesSubschedule">overridesSubschedule.</param>
        public Schedule(TypeEnum type = TypeEnum.Schedule, List<ScheduleLayer> scheduleLayers = default(List<ScheduleLayer>), string timeZone = default(string), string name = default(string), string description = default(string), SubSchedule finalSchedule = default(SubSchedule), SubSchedule overridesSubschedule = default(SubSchedule))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Schedule and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "timeZone" is required (not null)
            if (timeZone == null)
            {
                throw new InvalidDataException("timeZone is a required property for Schedule and cannot be null");
            }
            else
            {
                this.TimeZone = timeZone;
            }
            this.ScheduleLayers = scheduleLayers;
            this.Name = name;
            this.Description = description;
            this.FinalSchedule = finalSchedule;
            this.OverridesSubschedule = overridesSubschedule;
        }
        

        /// <summary>
        /// A list of schedule layers.
        /// </summary>
        /// <value>A list of schedule layers.</value>
        [DataMember(Name="schedule_layers", EmitDefaultValue=false)]
        public List<ScheduleLayer> ScheduleLayers { get; set; }

        /// <summary>
        /// The time zone of the schedule.
        /// </summary>
        /// <value>The time zone of the schedule.</value>
        [DataMember(Name="time_zone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// The name of the schedule
        /// </summary>
        /// <value>The name of the schedule</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the schedule
        /// </summary>
        /// <value>The description of the schedule</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FinalSchedule
        /// </summary>
        [DataMember(Name="final_schedule", EmitDefaultValue=false)]
        public SubSchedule FinalSchedule { get; set; }

        /// <summary>
        /// Gets or Sets OverridesSubschedule
        /// </summary>
        [DataMember(Name="overrides_subschedule", EmitDefaultValue=false)]
        public SubSchedule OverridesSubschedule { get; set; }

        /// <summary>
        /// An array of all of the escalation policies that uses this schedule.
        /// </summary>
        /// <value>An array of all of the escalation policies that uses this schedule.</value>
        [DataMember(Name="escalation_policies", EmitDefaultValue=false)]
        public List<EscalationPolicyReference> EscalationPolicies { get; private set; }

        /// <summary>
        /// An array of all of the users on the schedule.
        /// </summary>
        /// <value>An array of all of the users on the schedule.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<UserReference> Users { get; private set; }

        /// <summary>
        /// An array of all of the teams on the schedule.
        /// </summary>
        /// <value>An array of all of the teams on the schedule.</value>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<TeamReference> Teams { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Schedule {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ScheduleLayers: ").Append(ScheduleLayers).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FinalSchedule: ").Append(FinalSchedule).Append("\n");
            sb.Append("  OverridesSubschedule: ").Append(OverridesSubschedule).Append("\n");
            sb.Append("  EscalationPolicies: ").Append(EscalationPolicies).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Schedule);
        }

        /// <summary>
        /// Returns true if Schedule instances are equal
        /// </summary>
        /// <param name="input">Instance of Schedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Schedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ScheduleLayers == input.ScheduleLayers ||
                    this.ScheduleLayers != null &&
                    input.ScheduleLayers != null &&
                    this.ScheduleLayers.SequenceEqual(input.ScheduleLayers)
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FinalSchedule == input.FinalSchedule ||
                    (this.FinalSchedule != null &&
                    this.FinalSchedule.Equals(input.FinalSchedule))
                ) && 
                (
                    this.OverridesSubschedule == input.OverridesSubschedule ||
                    (this.OverridesSubschedule != null &&
                    this.OverridesSubschedule.Equals(input.OverridesSubschedule))
                ) && 
                (
                    this.EscalationPolicies == input.EscalationPolicies ||
                    this.EscalationPolicies != null &&
                    input.EscalationPolicies != null &&
                    this.EscalationPolicies.SequenceEqual(input.EscalationPolicies)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Teams == input.Teams ||
                    this.Teams != null &&
                    input.Teams != null &&
                    this.Teams.SequenceEqual(input.Teams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ScheduleLayers != null)
                    hashCode = hashCode * 59 + this.ScheduleLayers.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FinalSchedule != null)
                    hashCode = hashCode * 59 + this.FinalSchedule.GetHashCode();
                if (this.OverridesSubschedule != null)
                    hashCode = hashCode * 59 + this.OverridesSubschedule.GetHashCode();
                if (this.EscalationPolicies != null)
                    hashCode = hashCode * 59 + this.EscalationPolicies.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Teams != null)
                    hashCode = hashCode * 59 + this.Teams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
