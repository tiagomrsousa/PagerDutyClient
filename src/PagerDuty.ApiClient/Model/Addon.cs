/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Addon
    /// </summary>
    [DataContract]
        public partial class Addon :  IEquatable<Addon>, IValidatableObject
    {
        /// <summary>
        /// The type of Add-on.
        /// </summary>
        /// <value>The type of Add-on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Fullpageaddon for value: full_page_addon
            /// </summary>
            [EnumMember(Value = "full_page_addon")]
            Fullpageaddon = 1,
            /// <summary>
            /// Enum Incidentshowaddon for value: incident_show_addon
            /// </summary>
            [EnumMember(Value = "incident_show_addon")]
            Incidentshowaddon = 2        }
        /// <summary>
        /// The type of Add-on.
        /// </summary>
        /// <value>The type of Add-on.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Addon" /> class.
        /// </summary>
        /// <param name="type">The type of Add-on. (required).</param>
        /// <param name="name">The name of the Add-on. (required).</param>
        /// <param name="src">The source URL to display in a frame in the PagerDuty UI. HTTPS is required. (required).</param>
        public Addon(TypeEnum type = default(TypeEnum), string name = default(string), string src = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Addon and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Addon and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "src" is required (not null)
            if (src == null)
            {
                throw new InvalidDataException("src is a required property for Addon and cannot be null");
            }
            else
            {
                this.Src = src;
            }
        }
        

        /// <summary>
        /// The name of the Add-on.
        /// </summary>
        /// <value>The name of the Add-on.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The source URL to display in a frame in the PagerDuty UI. HTTPS is required.
        /// </summary>
        /// <value>The source URL to display in a frame in the PagerDuty UI. HTTPS is required.</value>
        [DataMember(Name="src", EmitDefaultValue=false)]
        public string Src { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Addon {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Src: ").Append(Src).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Addon);
        }

        /// <summary>
        /// Returns true if Addon instances are equal
        /// </summary>
        /// <param name="input">Instance of Addon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Addon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Src == input.Src ||
                    (this.Src != null &&
                    this.Src.Equals(input.Src))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Src != null)
                    hashCode = hashCode * 59 + this.Src.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
