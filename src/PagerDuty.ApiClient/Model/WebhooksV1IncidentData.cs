/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// The incident details at the time of the state change.
    /// </summary>
    [DataContract]
        public partial class WebhooksV1IncidentData :  IEquatable<WebhooksV1IncidentData>, IValidatableObject
    {
        /// <summary>
        /// The current status of the incident.
        /// </summary>
        /// <value>The current status of the incident.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Triggered for value: triggered
            /// </summary>
            [EnumMember(Value = "triggered")]
            Triggered = 1,
            /// <summary>
            /// Enum Acknowledged for value: acknowledged
            /// </summary>
            [EnumMember(Value = "acknowledged")]
            Acknowledged = 2,
            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 3        }
        /// <summary>
        /// The current status of the incident.
        /// </summary>
        /// <value>The current status of the incident.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Urgency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UrgencyEnum
        {
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 1,
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2        }
        /// <summary>
        /// Gets or Sets Urgency
        /// </summary>
        [DataMember(Name="urgency", EmitDefaultValue=false)]
        public UrgencyEnum? Urgency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksV1IncidentData" /> class.
        /// </summary>
        /// <param name="service">service.</param>
        /// <param name="assignedToUser">assignedToUser.</param>
        /// <param name="lastStatusChangeBy">lastStatusChangeBy.</param>
        public WebhooksV1IncidentData(WebhooksV1Service service = default(WebhooksV1Service), WebhooksV1AssignedToUser assignedToUser = default(WebhooksV1AssignedToUser), WebhooksV1AssignedToUser lastStatusChangeBy = default(WebhooksV1AssignedToUser))
        {
            this.Service = service;
            this.AssignedToUser = assignedToUser;
            this.LastStatusChangeBy = lastStatusChangeBy;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The number of the incident. This is unique across the account.
        /// </summary>
        /// <value>The number of the incident. This is unique across the account.</value>
        [DataMember(Name="incident_number", EmitDefaultValue=false)]
        public int? IncidentNumber { get; private set; }

        /// <summary>
        /// The date/time the incident was first triggered.
        /// </summary>
        /// <value>The date/time the incident was first triggered.</value>
        [DataMember(Name="created_on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; private set; }


        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name="html_url", EmitDefaultValue=false)]
        public string HtmlUrl { get; private set; }

        /// <summary>
        /// The incident&#x27;s de-duplication key.
        /// </summary>
        /// <value>The incident&#x27;s de-duplication key.</value>
        [DataMember(Name="incident_key", EmitDefaultValue=false)]
        public string IncidentKey { get; private set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public WebhooksV1Service Service { get; set; }

        /// <summary>
        /// Gets or Sets AssignedToUser
        /// </summary>
        [DataMember(Name="assigned_to_user", EmitDefaultValue=false)]
        public WebhooksV1AssignedToUser AssignedToUser { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTo
        /// </summary>
        [DataMember(Name="assigned_to", EmitDefaultValue=false)]
        public List<WebhooksV1AssignedTo> AssignedTo { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerSummaryData
        /// </summary>
        [DataMember(Name="trigger_summary_data", EmitDefaultValue=false)]
        public Object TriggerSummaryData { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerDetailsHtmlUrl
        /// </summary>
        [DataMember(Name="trigger_details_html_url", EmitDefaultValue=false)]
        public string TriggerDetailsHtmlUrl { get; private set; }

        /// <summary>
        /// The time at which the status of the incident last changed.
        /// </summary>
        /// <value>The time at which the status of the incident last changed.</value>
        [DataMember(Name="last_status_change_on", EmitDefaultValue=false)]
        public DateTime? LastStatusChangeOn { get; private set; }

        /// <summary>
        /// Gets or Sets LastStatusChangeBy
        /// </summary>
        [DataMember(Name="last_status_change_by", EmitDefaultValue=false)]
        public WebhooksV1AssignedToUser LastStatusChangeBy { get; set; }

        /// <summary>
        /// Number of times the incident has been escalated.
        /// </summary>
        /// <value>Number of times the incident has been escalated.</value>
        [DataMember(Name="number_of_escalations", EmitDefaultValue=false)]
        public int? NumberOfEscalations { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhooksV1IncidentData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncidentNumber: ").Append(IncidentNumber).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  IncidentKey: ").Append(IncidentKey).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  AssignedToUser: ").Append(AssignedToUser).Append("\n");
            sb.Append("  AssignedTo: ").Append(AssignedTo).Append("\n");
            sb.Append("  TriggerSummaryData: ").Append(TriggerSummaryData).Append("\n");
            sb.Append("  TriggerDetailsHtmlUrl: ").Append(TriggerDetailsHtmlUrl).Append("\n");
            sb.Append("  LastStatusChangeOn: ").Append(LastStatusChangeOn).Append("\n");
            sb.Append("  LastStatusChangeBy: ").Append(LastStatusChangeBy).Append("\n");
            sb.Append("  NumberOfEscalations: ").Append(NumberOfEscalations).Append("\n");
            sb.Append("  Urgency: ").Append(Urgency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhooksV1IncidentData);
        }

        /// <summary>
        /// Returns true if WebhooksV1IncidentData instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhooksV1IncidentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhooksV1IncidentData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IncidentNumber == input.IncidentNumber ||
                    (this.IncidentNumber != null &&
                    this.IncidentNumber.Equals(input.IncidentNumber))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HtmlUrl == input.HtmlUrl ||
                    (this.HtmlUrl != null &&
                    this.HtmlUrl.Equals(input.HtmlUrl))
                ) && 
                (
                    this.IncidentKey == input.IncidentKey ||
                    (this.IncidentKey != null &&
                    this.IncidentKey.Equals(input.IncidentKey))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.AssignedToUser == input.AssignedToUser ||
                    (this.AssignedToUser != null &&
                    this.AssignedToUser.Equals(input.AssignedToUser))
                ) && 
                (
                    this.AssignedTo == input.AssignedTo ||
                    this.AssignedTo != null &&
                    input.AssignedTo != null &&
                    this.AssignedTo.SequenceEqual(input.AssignedTo)
                ) && 
                (
                    this.TriggerSummaryData == input.TriggerSummaryData ||
                    (this.TriggerSummaryData != null &&
                    this.TriggerSummaryData.Equals(input.TriggerSummaryData))
                ) && 
                (
                    this.TriggerDetailsHtmlUrl == input.TriggerDetailsHtmlUrl ||
                    (this.TriggerDetailsHtmlUrl != null &&
                    this.TriggerDetailsHtmlUrl.Equals(input.TriggerDetailsHtmlUrl))
                ) && 
                (
                    this.LastStatusChangeOn == input.LastStatusChangeOn ||
                    (this.LastStatusChangeOn != null &&
                    this.LastStatusChangeOn.Equals(input.LastStatusChangeOn))
                ) && 
                (
                    this.LastStatusChangeBy == input.LastStatusChangeBy ||
                    (this.LastStatusChangeBy != null &&
                    this.LastStatusChangeBy.Equals(input.LastStatusChangeBy))
                ) && 
                (
                    this.NumberOfEscalations == input.NumberOfEscalations ||
                    (this.NumberOfEscalations != null &&
                    this.NumberOfEscalations.Equals(input.NumberOfEscalations))
                ) && 
                (
                    this.Urgency == input.Urgency ||
                    (this.Urgency != null &&
                    this.Urgency.Equals(input.Urgency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IncidentNumber != null)
                    hashCode = hashCode * 59 + this.IncidentNumber.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.HtmlUrl != null)
                    hashCode = hashCode * 59 + this.HtmlUrl.GetHashCode();
                if (this.IncidentKey != null)
                    hashCode = hashCode * 59 + this.IncidentKey.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.AssignedToUser != null)
                    hashCode = hashCode * 59 + this.AssignedToUser.GetHashCode();
                if (this.AssignedTo != null)
                    hashCode = hashCode * 59 + this.AssignedTo.GetHashCode();
                if (this.TriggerSummaryData != null)
                    hashCode = hashCode * 59 + this.TriggerSummaryData.GetHashCode();
                if (this.TriggerDetailsHtmlUrl != null)
                    hashCode = hashCode * 59 + this.TriggerDetailsHtmlUrl.GetHashCode();
                if (this.LastStatusChangeOn != null)
                    hashCode = hashCode * 59 + this.LastStatusChangeOn.GetHashCode();
                if (this.LastStatusChangeBy != null)
                    hashCode = hashCode * 59 + this.LastStatusChangeBy.GetHashCode();
                if (this.NumberOfEscalations != null)
                    hashCode = hashCode * 59 + this.NumberOfEscalations.GetHashCode();
                if (this.Urgency != null)
                    hashCode = hashCode * 59 + this.Urgency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
