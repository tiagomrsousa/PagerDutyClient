/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Incident
    /// </summary>
    [DataContract]
        public partial class Incident :  IEquatable<Incident>, IValidatableObject
    {
        /// <summary>
        /// The current status of the incident.
        /// </summary>
        /// <value>The current status of the incident.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Triggered for value: triggered
            /// </summary>
            [EnumMember(Value = "triggered")]
            Triggered = 1,
            /// <summary>
            /// Enum Acknowledged for value: acknowledged
            /// </summary>
            [EnumMember(Value = "acknowledged")]
            Acknowledged = 2,
            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 3        }
        /// <summary>
        /// The current status of the incident.
        /// </summary>
        /// <value>The current status of the incident.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// How the current incident assignments were decided.  Note that &#x60;direct_assignment&#x60; incidents will not escalate up the attached &#x60;escalation_policy&#x60;
        /// </summary>
        /// <value>How the current incident assignments were decided.  Note that &#x60;direct_assignment&#x60; incidents will not escalate up the attached &#x60;escalation_policy&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AssignedViaEnum
        {
            /// <summary>
            /// Enum Escalationpolicy for value: escalation_policy
            /// </summary>
            [EnumMember(Value = "escalation_policy")]
            Escalationpolicy = 1,
            /// <summary>
            /// Enum Directassignment for value: direct_assignment
            /// </summary>
            [EnumMember(Value = "direct_assignment")]
            Directassignment = 2        }
        /// <summary>
        /// How the current incident assignments were decided.  Note that &#x60;direct_assignment&#x60; incidents will not escalate up the attached &#x60;escalation_policy&#x60;
        /// </summary>
        /// <value>How the current incident assignments were decided.  Note that &#x60;direct_assignment&#x60; incidents will not escalate up the attached &#x60;escalation_policy&#x60;</value>
        [DataMember(Name="assigned_via", EmitDefaultValue=false)]
        public AssignedViaEnum? AssignedVia { get; set; }
        /// <summary>
        /// The current urgency of the incident.
        /// </summary>
        /// <value>The current urgency of the incident.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UrgencyEnum
        {
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 1,
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2        }
        /// <summary>
        /// The current urgency of the incident.
        /// </summary>
        /// <value>The current urgency of the incident.</value>
        [DataMember(Name="urgency", EmitDefaultValue=false)]
        public UrgencyEnum? Urgency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Incident" /> class.
        /// </summary>
        /// <param name="status">The current status of the incident..</param>
        /// <param name="title">A succinct description of the nature, symptoms, cause, or effect of the incident..</param>
        /// <param name="service">service.</param>
        /// <param name="assignments">List of all assignments for this incident. This list will be empty if the &#x60;Incident.status&#x60; is &#x60;resolved&#x60;..</param>
        /// <param name="acknowledgements">List of all acknowledgements for this incident. This list will be empty if the &#x60;Incident.status&#x60; is &#x60;resolved&#x60; or &#x60;triggered&#x60;..</param>
        /// <param name="lastStatusChangeBy">lastStatusChangeBy.</param>
        /// <param name="firstTriggerLogEntry">firstTriggerLogEntry.</param>
        /// <param name="escalationPolicy">escalationPolicy.</param>
        /// <param name="teams">The teams involved in the incidentâ€™s lifecycle..</param>
        /// <param name="priority">priority.</param>
        /// <param name="urgency">The current urgency of the incident..</param>
        /// <param name="resolveReason">resolveReason.</param>
        /// <param name="alertCounts">alertCounts.</param>
        /// <param name="conferenceBridge">conferenceBridge.</param>
        /// <param name="body">body.</param>
        public Incident(StatusEnum? status = default(StatusEnum?), string title = default(string), ServiceReference service = default(ServiceReference), List<Assignment> assignments = default(List<Assignment>), List<Acknowledgement> acknowledgements = default(List<Acknowledgement>), AgentReference lastStatusChangeBy = default(AgentReference), LogEntryReference firstTriggerLogEntry = default(LogEntryReference), EscalationPolicyReference escalationPolicy = default(EscalationPolicyReference), List<TeamReference> teams = default(List<TeamReference>), PriorityReference priority = default(PriorityReference), UrgencyEnum? urgency = default(UrgencyEnum?), ResolveReason resolveReason = default(ResolveReason), AlertCount alertCounts = default(AlertCount), ConferenceBridge conferenceBridge = default(ConferenceBridge), IncidentBody body = default(IncidentBody))
        {
            this.Status = status;
            this.Title = title;
            this.Service = service;
            this.Assignments = assignments;
            this.Acknowledgements = acknowledgements;
            this.LastStatusChangeBy = lastStatusChangeBy;
            this.FirstTriggerLogEntry = firstTriggerLogEntry;
            this.EscalationPolicy = escalationPolicy;
            this.Teams = teams;
            this.Priority = priority;
            this.Urgency = urgency;
            this.ResolveReason = resolveReason;
            this.AlertCounts = alertCounts;
            this.ConferenceBridge = conferenceBridge;
            this.Body = body;
        }
        
        /// <summary>
        /// The number of the incident. This is unique across your account.
        /// </summary>
        /// <value>The number of the incident. This is unique across your account.</value>
        [DataMember(Name="incident_number", EmitDefaultValue=false)]
        public int? IncidentNumber { get; private set; }

        /// <summary>
        /// The date/time the incident was first triggered.
        /// </summary>
        /// <value>The date/time the incident was first triggered.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }


        /// <summary>
        /// A succinct description of the nature, symptoms, cause, or effect of the incident.
        /// </summary>
        /// <value>A succinct description of the nature, symptoms, cause, or effect of the incident.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The list of pending_actions on the incident. A pending_action object contains a type of action which can be escalate, unacknowledge, resolve or urgency_change. A pending_action object contains at, the time at which the action will take place. An urgency_change pending_action will contain to, the urgency that the incident will change to.
        /// </summary>
        /// <value>The list of pending_actions on the incident. A pending_action object contains a type of action which can be escalate, unacknowledge, resolve or urgency_change. A pending_action object contains at, the time at which the action will take place. An urgency_change pending_action will contain to, the urgency that the incident will change to.</value>
        [DataMember(Name="pending_actions", EmitDefaultValue=false)]
        public List<IncidentAction> PendingActions { get; private set; }

        /// <summary>
        /// The incident&#x27;s de-duplication key.
        /// </summary>
        /// <value>The incident&#x27;s de-duplication key.</value>
        [DataMember(Name="incident_key", EmitDefaultValue=false)]
        public string IncidentKey { get; private set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public ServiceReference Service { get; set; }

        /// <summary>
        /// List of all assignments for this incident. This list will be empty if the &#x60;Incident.status&#x60; is &#x60;resolved&#x60;.
        /// </summary>
        /// <value>List of all assignments for this incident. This list will be empty if the &#x60;Incident.status&#x60; is &#x60;resolved&#x60;.</value>
        [DataMember(Name="assignments", EmitDefaultValue=false)]
        public List<Assignment> Assignments { get; set; }


        /// <summary>
        /// List of all acknowledgements for this incident. This list will be empty if the &#x60;Incident.status&#x60; is &#x60;resolved&#x60; or &#x60;triggered&#x60;.
        /// </summary>
        /// <value>List of all acknowledgements for this incident. This list will be empty if the &#x60;Incident.status&#x60; is &#x60;resolved&#x60; or &#x60;triggered&#x60;.</value>
        [DataMember(Name="acknowledgements", EmitDefaultValue=false)]
        public List<Acknowledgement> Acknowledgements { get; set; }

        /// <summary>
        /// The time at which the status of the incident last changed.
        /// </summary>
        /// <value>The time at which the status of the incident last changed.</value>
        [DataMember(Name="last_status_change_at", EmitDefaultValue=false)]
        public DateTime? LastStatusChangeAt { get; private set; }

        /// <summary>
        /// Gets or Sets LastStatusChangeBy
        /// </summary>
        [DataMember(Name="last_status_change_by", EmitDefaultValue=false)]
        public AgentReference LastStatusChangeBy { get; set; }

        /// <summary>
        /// Gets or Sets FirstTriggerLogEntry
        /// </summary>
        [DataMember(Name="first_trigger_log_entry", EmitDefaultValue=false)]
        public LogEntryReference FirstTriggerLogEntry { get; set; }

        /// <summary>
        /// Gets or Sets EscalationPolicy
        /// </summary>
        [DataMember(Name="escalation_policy", EmitDefaultValue=false)]
        public EscalationPolicyReference EscalationPolicy { get; set; }

        /// <summary>
        /// The teams involved in the incidentâ€™s lifecycle.
        /// </summary>
        /// <value>The teams involved in the incidentâ€™s lifecycle.</value>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<TeamReference> Teams { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityReference Priority { get; set; }


        /// <summary>
        /// Gets or Sets ResolveReason
        /// </summary>
        [DataMember(Name="resolve_reason", EmitDefaultValue=false)]
        public ResolveReason ResolveReason { get; set; }

        /// <summary>
        /// Gets or Sets AlertCounts
        /// </summary>
        [DataMember(Name="alert_counts", EmitDefaultValue=false)]
        public AlertCount AlertCounts { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceBridge
        /// </summary>
        [DataMember(Name="conference_bridge", EmitDefaultValue=false)]
        public ConferenceBridge ConferenceBridge { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public IncidentBody Body { get; set; }

        /// <summary>
        /// Gets or Sets IncidentsResponders
        /// </summary>
        [DataMember(Name="incidents_responders", EmitDefaultValue=false)]
        public List<IncidentsRespondersReference> IncidentsResponders { get; private set; }

        /// <summary>
        /// Gets or Sets ResponderRequests
        /// </summary>
        [DataMember(Name="responder_requests", EmitDefaultValue=false)]
        public List<ResponderRequest> ResponderRequests { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Incident {\n");
            sb.Append("  IncidentNumber: ").Append(IncidentNumber).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PendingActions: ").Append(PendingActions).Append("\n");
            sb.Append("  IncidentKey: ").Append(IncidentKey).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Assignments: ").Append(Assignments).Append("\n");
            sb.Append("  AssignedVia: ").Append(AssignedVia).Append("\n");
            sb.Append("  Acknowledgements: ").Append(Acknowledgements).Append("\n");
            sb.Append("  LastStatusChangeAt: ").Append(LastStatusChangeAt).Append("\n");
            sb.Append("  LastStatusChangeBy: ").Append(LastStatusChangeBy).Append("\n");
            sb.Append("  FirstTriggerLogEntry: ").Append(FirstTriggerLogEntry).Append("\n");
            sb.Append("  EscalationPolicy: ").Append(EscalationPolicy).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Urgency: ").Append(Urgency).Append("\n");
            sb.Append("  ResolveReason: ").Append(ResolveReason).Append("\n");
            sb.Append("  AlertCounts: ").Append(AlertCounts).Append("\n");
            sb.Append("  ConferenceBridge: ").Append(ConferenceBridge).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  IncidentsResponders: ").Append(IncidentsResponders).Append("\n");
            sb.Append("  ResponderRequests: ").Append(ResponderRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Incident);
        }

        /// <summary>
        /// Returns true if Incident instances are equal
        /// </summary>
        /// <param name="input">Instance of Incident to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Incident input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncidentNumber == input.IncidentNumber ||
                    (this.IncidentNumber != null &&
                    this.IncidentNumber.Equals(input.IncidentNumber))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.PendingActions == input.PendingActions ||
                    this.PendingActions != null &&
                    input.PendingActions != null &&
                    this.PendingActions.SequenceEqual(input.PendingActions)
                ) && 
                (
                    this.IncidentKey == input.IncidentKey ||
                    (this.IncidentKey != null &&
                    this.IncidentKey.Equals(input.IncidentKey))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Assignments == input.Assignments ||
                    this.Assignments != null &&
                    input.Assignments != null &&
                    this.Assignments.SequenceEqual(input.Assignments)
                ) && 
                (
                    this.AssignedVia == input.AssignedVia ||
                    (this.AssignedVia != null &&
                    this.AssignedVia.Equals(input.AssignedVia))
                ) && 
                (
                    this.Acknowledgements == input.Acknowledgements ||
                    this.Acknowledgements != null &&
                    input.Acknowledgements != null &&
                    this.Acknowledgements.SequenceEqual(input.Acknowledgements)
                ) && 
                (
                    this.LastStatusChangeAt == input.LastStatusChangeAt ||
                    (this.LastStatusChangeAt != null &&
                    this.LastStatusChangeAt.Equals(input.LastStatusChangeAt))
                ) && 
                (
                    this.LastStatusChangeBy == input.LastStatusChangeBy ||
                    (this.LastStatusChangeBy != null &&
                    this.LastStatusChangeBy.Equals(input.LastStatusChangeBy))
                ) && 
                (
                    this.FirstTriggerLogEntry == input.FirstTriggerLogEntry ||
                    (this.FirstTriggerLogEntry != null &&
                    this.FirstTriggerLogEntry.Equals(input.FirstTriggerLogEntry))
                ) && 
                (
                    this.EscalationPolicy == input.EscalationPolicy ||
                    (this.EscalationPolicy != null &&
                    this.EscalationPolicy.Equals(input.EscalationPolicy))
                ) && 
                (
                    this.Teams == input.Teams ||
                    this.Teams != null &&
                    input.Teams != null &&
                    this.Teams.SequenceEqual(input.Teams)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Urgency == input.Urgency ||
                    (this.Urgency != null &&
                    this.Urgency.Equals(input.Urgency))
                ) && 
                (
                    this.ResolveReason == input.ResolveReason ||
                    (this.ResolveReason != null &&
                    this.ResolveReason.Equals(input.ResolveReason))
                ) && 
                (
                    this.AlertCounts == input.AlertCounts ||
                    (this.AlertCounts != null &&
                    this.AlertCounts.Equals(input.AlertCounts))
                ) && 
                (
                    this.ConferenceBridge == input.ConferenceBridge ||
                    (this.ConferenceBridge != null &&
                    this.ConferenceBridge.Equals(input.ConferenceBridge))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.IncidentsResponders == input.IncidentsResponders ||
                    this.IncidentsResponders != null &&
                    input.IncidentsResponders != null &&
                    this.IncidentsResponders.SequenceEqual(input.IncidentsResponders)
                ) && 
                (
                    this.ResponderRequests == input.ResponderRequests ||
                    this.ResponderRequests != null &&
                    input.ResponderRequests != null &&
                    this.ResponderRequests.SequenceEqual(input.ResponderRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncidentNumber != null)
                    hashCode = hashCode * 59 + this.IncidentNumber.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.PendingActions != null)
                    hashCode = hashCode * 59 + this.PendingActions.GetHashCode();
                if (this.IncidentKey != null)
                    hashCode = hashCode * 59 + this.IncidentKey.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.Assignments != null)
                    hashCode = hashCode * 59 + this.Assignments.GetHashCode();
                if (this.AssignedVia != null)
                    hashCode = hashCode * 59 + this.AssignedVia.GetHashCode();
                if (this.Acknowledgements != null)
                    hashCode = hashCode * 59 + this.Acknowledgements.GetHashCode();
                if (this.LastStatusChangeAt != null)
                    hashCode = hashCode * 59 + this.LastStatusChangeAt.GetHashCode();
                if (this.LastStatusChangeBy != null)
                    hashCode = hashCode * 59 + this.LastStatusChangeBy.GetHashCode();
                if (this.FirstTriggerLogEntry != null)
                    hashCode = hashCode * 59 + this.FirstTriggerLogEntry.GetHashCode();
                if (this.EscalationPolicy != null)
                    hashCode = hashCode * 59 + this.EscalationPolicy.GetHashCode();
                if (this.Teams != null)
                    hashCode = hashCode * 59 + this.Teams.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Urgency != null)
                    hashCode = hashCode * 59 + this.Urgency.GetHashCode();
                if (this.ResolveReason != null)
                    hashCode = hashCode * 59 + this.ResolveReason.GetHashCode();
                if (this.AlertCounts != null)
                    hashCode = hashCode * 59 + this.AlertCounts.GetHashCode();
                if (this.ConferenceBridge != null)
                    hashCode = hashCode * 59 + this.ConferenceBridge.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.IncidentsResponders != null)
                    hashCode = hashCode * 59 + this.IncidentsResponders.GetHashCode();
                if (this.ResponderRequests != null)
                    hashCode = hashCode * 59 + this.ResponderRequests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
