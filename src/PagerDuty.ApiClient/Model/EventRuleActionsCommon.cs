/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// When an event matches this Event Rule, the actions that will be taken to change the resulting Alert and Incident.
    /// </summary>
    [DataContract]
        public partial class EventRuleActionsCommon :  IEquatable<EventRuleActionsCommon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventRuleActionsCommon" /> class.
        /// </summary>
        /// <param name="annotate">Set a note on the resulting incident..</param>
        /// <param name="eventAction">Set whether the resulting alert status is trigger or resolve..</param>
        /// <param name="extractions">Dynamically extract values to set and modify new and existing PD-CEF fields..</param>
        /// <param name="priority">Set the priority ID for the resulting incident. You can find the priority you want by calling the priorities endpoint..</param>
        /// <param name="severity">Set the severity of the resulting alert..</param>
        /// <param name="suppress">Set whether the resulting alert is suppressed. Can optionally be used with a threshold where resulting alerts will be suppressed until the threshold is met in a window of time. If using a threshold the rule must also set a route action..</param>
        /// <param name="suspend">Set the length of time to suspend the resulting alert before triggering. Rules with a suspend action must also set a route action, and cannot have a suppress with threshold action.</param>
        public EventRuleActionsCommon(Object annotate = default(Object), Object eventAction = default(Object), List<OneOfEventRuleActionsCommonExtractionsItems> extractions = default(List<OneOfEventRuleActionsCommonExtractionsItems>), Object priority = default(Object), Object severity = default(Object), Object suppress = default(Object), Object suspend = default(Object))
        {
            this.Annotate = annotate;
            this.EventAction = eventAction;
            this.Extractions = extractions;
            this.Priority = priority;
            this.Severity = severity;
            this.Suppress = suppress;
            this.Suspend = suspend;
        }
        
        /// <summary>
        /// Set a note on the resulting incident.
        /// </summary>
        /// <value>Set a note on the resulting incident.</value>
        [DataMember(Name="annotate", EmitDefaultValue=false)]
        public Object Annotate { get; set; }

        /// <summary>
        /// Set whether the resulting alert status is trigger or resolve.
        /// </summary>
        /// <value>Set whether the resulting alert status is trigger or resolve.</value>
        [DataMember(Name="event_action", EmitDefaultValue=false)]
        public Object EventAction { get; set; }

        /// <summary>
        /// Dynamically extract values to set and modify new and existing PD-CEF fields.
        /// </summary>
        /// <value>Dynamically extract values to set and modify new and existing PD-CEF fields.</value>
        [DataMember(Name="extractions", EmitDefaultValue=false)]
        public List<OneOfEventRuleActionsCommonExtractionsItems> Extractions { get; set; }

        /// <summary>
        /// Set the priority ID for the resulting incident. You can find the priority you want by calling the priorities endpoint.
        /// </summary>
        /// <value>Set the priority ID for the resulting incident. You can find the priority you want by calling the priorities endpoint.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public Object Priority { get; set; }

        /// <summary>
        /// Set the severity of the resulting alert.
        /// </summary>
        /// <value>Set the severity of the resulting alert.</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public Object Severity { get; set; }

        /// <summary>
        /// Set whether the resulting alert is suppressed. Can optionally be used with a threshold where resulting alerts will be suppressed until the threshold is met in a window of time. If using a threshold the rule must also set a route action.
        /// </summary>
        /// <value>Set whether the resulting alert is suppressed. Can optionally be used with a threshold where resulting alerts will be suppressed until the threshold is met in a window of time. If using a threshold the rule must also set a route action.</value>
        [DataMember(Name="suppress", EmitDefaultValue=false)]
        public Object Suppress { get; set; }

        /// <summary>
        /// Set the length of time to suspend the resulting alert before triggering. Rules with a suspend action must also set a route action, and cannot have a suppress with threshold action
        /// </summary>
        /// <value>Set the length of time to suspend the resulting alert before triggering. Rules with a suspend action must also set a route action, and cannot have a suppress with threshold action</value>
        [DataMember(Name="suspend", EmitDefaultValue=false)]
        public Object Suspend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRuleActionsCommon {\n");
            sb.Append("  Annotate: ").Append(Annotate).Append("\n");
            sb.Append("  EventAction: ").Append(EventAction).Append("\n");
            sb.Append("  Extractions: ").Append(Extractions).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Suppress: ").Append(Suppress).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventRuleActionsCommon);
        }

        /// <summary>
        /// Returns true if EventRuleActionsCommon instances are equal
        /// </summary>
        /// <param name="input">Instance of EventRuleActionsCommon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRuleActionsCommon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Annotate == input.Annotate ||
                    (this.Annotate != null &&
                    this.Annotate.Equals(input.Annotate))
                ) && 
                (
                    this.EventAction == input.EventAction ||
                    (this.EventAction != null &&
                    this.EventAction.Equals(input.EventAction))
                ) && 
                (
                    this.Extractions == input.Extractions ||
                    this.Extractions != null &&
                    input.Extractions != null &&
                    this.Extractions.SequenceEqual(input.Extractions)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Suppress == input.Suppress ||
                    (this.Suppress != null &&
                    this.Suppress.Equals(input.Suppress))
                ) && 
                (
                    this.Suspend == input.Suspend ||
                    (this.Suspend != null &&
                    this.Suspend.Equals(input.Suspend))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Annotate != null)
                    hashCode = hashCode * 59 + this.Annotate.GetHashCode();
                if (this.EventAction != null)
                    hashCode = hashCode * 59 + this.EventAction.GetHashCode();
                if (this.Extractions != null)
                    hashCode = hashCode * 59 + this.Extractions.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Suppress != null)
                    hashCode = hashCode * 59 + this.Suppress.GetHashCode();
                if (this.Suspend != null)
                    hashCode = hashCode * 59 + this.Suspend.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
