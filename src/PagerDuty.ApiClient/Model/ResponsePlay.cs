/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// ResponsePlay
    /// </summary>
    [DataContract]
        public partial class ResponsePlay :  IEquatable<ResponsePlay>, IValidatableObject
    {
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Responseplay for value: response_play
            /// </summary>
            [EnumMember(Value = "response_play")]
            Responseplay = 1        }
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// String representing how this response play is allowed to be run. Valid options are:   - &#x60;services&#x60;: This response play cannot be manually run by any users. It will run automatically for new incidents triggered on any services that are configured with this response play.   - &#x60;teams&#x60;: This response play can be run manually on an incident only by members of its configured team. This option can only be selected when the &#x60;team&#x60; property for this response play is not empty.   - &#x60;responders&#x60;: This response play can be run manually on an incident by any responders in this account.
        /// </summary>
        /// <value>String representing how this response play is allowed to be run. Valid options are:   - &#x60;services&#x60;: This response play cannot be manually run by any users. It will run automatically for new incidents triggered on any services that are configured with this response play.   - &#x60;teams&#x60;: This response play can be run manually on an incident only by members of its configured team. This option can only be selected when the &#x60;team&#x60; property for this response play is not empty.   - &#x60;responders&#x60;: This response play can be run manually on an incident by any responders in this account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RunnabilityEnum
        {
            /// <summary>
            /// Enum Services for value: services
            /// </summary>
            [EnumMember(Value = "services")]
            Services = 1,
            /// <summary>
            /// Enum Teams for value: teams
            /// </summary>
            [EnumMember(Value = "teams")]
            Teams = 2,
            /// <summary>
            /// Enum Responders for value: responders
            /// </summary>
            [EnumMember(Value = "responders")]
            Responders = 3        }
        /// <summary>
        /// String representing how this response play is allowed to be run. Valid options are:   - &#x60;services&#x60;: This response play cannot be manually run by any users. It will run automatically for new incidents triggered on any services that are configured with this response play.   - &#x60;teams&#x60;: This response play can be run manually on an incident only by members of its configured team. This option can only be selected when the &#x60;team&#x60; property for this response play is not empty.   - &#x60;responders&#x60;: This response play can be run manually on an incident by any responders in this account.
        /// </summary>
        /// <value>String representing how this response play is allowed to be run. Valid options are:   - &#x60;services&#x60;: This response play cannot be manually run by any users. It will run automatically for new incidents triggered on any services that are configured with this response play.   - &#x60;teams&#x60;: This response play can be run manually on an incident only by members of its configured team. This option can only be selected when the &#x60;team&#x60; property for this response play is not empty.   - &#x60;responders&#x60;: This response play can be run manually on an incident by any responders in this account.</value>
        [DataMember(Name="runnability", EmitDefaultValue=false)]
        public RunnabilityEnum? Runnability { get; set; }
        /// <summary>
        /// This field has three possible values and indicates how the response play was created.   - &#x60;none&#x60; : The response play had no conference_number or conference_url set at time of creation.   - &#x60;manual&#x60; : The response play had one or both of conference_number and conference_url set at time of creation.   - &#x60;zoom&#x60; : Customers with the Zoom-Integration Entitelment can use this value to dynamicly configure conference number and url for zoom
        /// </summary>
        /// <value>This field has three possible values and indicates how the response play was created.   - &#x60;none&#x60; : The response play had no conference_number or conference_url set at time of creation.   - &#x60;manual&#x60; : The response play had one or both of conference_number and conference_url set at time of creation.   - &#x60;zoom&#x60; : Customers with the Zoom-Integration Entitelment can use this value to dynamicly configure conference number and url for zoom</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ConferenceTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 2,
            /// <summary>
            /// Enum Zoom for value: zoom
            /// </summary>
            [EnumMember(Value = "zoom")]
            Zoom = 3        }
        /// <summary>
        /// This field has three possible values and indicates how the response play was created.   - &#x60;none&#x60; : The response play had no conference_number or conference_url set at time of creation.   - &#x60;manual&#x60; : The response play had one or both of conference_number and conference_url set at time of creation.   - &#x60;zoom&#x60; : Customers with the Zoom-Integration Entitelment can use this value to dynamicly configure conference number and url for zoom
        /// </summary>
        /// <value>This field has three possible values and indicates how the response play was created.   - &#x60;none&#x60; : The response play had no conference_number or conference_url set at time of creation.   - &#x60;manual&#x60; : The response play had one or both of conference_number and conference_url set at time of creation.   - &#x60;zoom&#x60; : Customers with the Zoom-Integration Entitelment can use this value to dynamicly configure conference number and url for zoom</value>
        [DataMember(Name="conference_type", EmitDefaultValue=false)]
        public ConferenceTypeEnum? ConferenceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponsePlay" /> class.
        /// </summary>
        /// <param name="type">The type of object being created. (default to TypeEnum.Responseplay).</param>
        /// <param name="name">The name of the response play..</param>
        /// <param name="description">The description of the response play..</param>
        /// <param name="team">team.</param>
        /// <param name="subscribers">An array containing the users and/or teams to be added as subscribers to any incident on which this response play is run..</param>
        /// <param name="subscribersMessage">The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent..</param>
        /// <param name="responders">An array containing the users and/or escalation policies to be requested as responders to any incident on which this response play is run..</param>
        /// <param name="respondersMessage">The message body of the notification that will be sent to this response play&#x27;s set of responders. If empty, a default response request notification will be sent..</param>
        /// <param name="runnability">String representing how this response play is allowed to be run. Valid options are:   - &#x60;services&#x60;: This response play cannot be manually run by any users. It will run automatically for new incidents triggered on any services that are configured with this response play.   - &#x60;teams&#x60;: This response play can be run manually on an incident only by members of its configured team. This option can only be selected when the &#x60;team&#x60; property for this response play is not empty.   - &#x60;responders&#x60;: This response play can be run manually on an incident by any responders in this account. (default to RunnabilityEnum.Services).</param>
        /// <param name="conferenceNumber">The telephone number that will be set as the conference number for any incident on which this response play is run..</param>
        /// <param name="conferenceUrl">The URL that will be set as the conference URL for any incident on which this response play is run..</param>
        /// <param name="conferenceType">This field has three possible values and indicates how the response play was created.   - &#x60;none&#x60; : The response play had no conference_number or conference_url set at time of creation.   - &#x60;manual&#x60; : The response play had one or both of conference_number and conference_url set at time of creation.   - &#x60;zoom&#x60; : Customers with the Zoom-Integration Entitelment can use this value to dynamicly configure conference number and url for zoom (default to ConferenceTypeEnum.None).</param>
        public ResponsePlay(TypeEnum? type = TypeEnum.Responseplay, string name = default(string), string description = default(string), Object team = default(Object), List<Object> subscribers = default(List<Object>), string subscribersMessage = default(string), List<Object> responders = default(List<Object>), string respondersMessage = default(string), RunnabilityEnum? runnability = RunnabilityEnum.Services, string conferenceNumber = default(string), string conferenceUrl = default(string), ConferenceTypeEnum? conferenceType = ConferenceTypeEnum.None)
        {
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = TypeEnum.Responseplay;
            }
            else
            {
                this.Type = type;
            }
            this.Name = name;
            this.Description = description;
            this.Team = team;
            this.Subscribers = subscribers;
            this.SubscribersMessage = subscribersMessage;
            this.Responders = responders;
            this.RespondersMessage = respondersMessage;
            // use default value if no "runnability" provided
            if (runnability == null)
            {
                this.Runnability = RunnabilityEnum.Services;
            }
            else
            {
                this.Runnability = runnability;
            }
            this.ConferenceNumber = conferenceNumber;
            this.ConferenceUrl = conferenceUrl;
            // use default value if no "conferenceType" provided
            if (conferenceType == null)
            {
                this.ConferenceType = ConferenceTypeEnum.None;
            }
            else
            {
                this.ConferenceType = conferenceType;
            }
        }
        

        /// <summary>
        /// The name of the response play.
        /// </summary>
        /// <value>The name of the response play.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the response play.
        /// </summary>
        /// <value>The description of the response play.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public Object Team { get; set; }

        /// <summary>
        /// An array containing the users and/or teams to be added as subscribers to any incident on which this response play is run.
        /// </summary>
        /// <value>An array containing the users and/or teams to be added as subscribers to any incident on which this response play is run.</value>
        [DataMember(Name="subscribers", EmitDefaultValue=false)]
        public List<Object> Subscribers { get; set; }

        /// <summary>
        /// The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.
        /// </summary>
        /// <value>The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.</value>
        [DataMember(Name="subscribers_message", EmitDefaultValue=false)]
        public string SubscribersMessage { get; set; }

        /// <summary>
        /// An array containing the users and/or escalation policies to be requested as responders to any incident on which this response play is run.
        /// </summary>
        /// <value>An array containing the users and/or escalation policies to be requested as responders to any incident on which this response play is run.</value>
        [DataMember(Name="responders", EmitDefaultValue=false)]
        public List<Object> Responders { get; set; }

        /// <summary>
        /// The message body of the notification that will be sent to this response play&#x27;s set of responders. If empty, a default response request notification will be sent.
        /// </summary>
        /// <value>The message body of the notification that will be sent to this response play&#x27;s set of responders. If empty, a default response request notification will be sent.</value>
        [DataMember(Name="responders_message", EmitDefaultValue=false)]
        public string RespondersMessage { get; set; }


        /// <summary>
        /// The telephone number that will be set as the conference number for any incident on which this response play is run.
        /// </summary>
        /// <value>The telephone number that will be set as the conference number for any incident on which this response play is run.</value>
        [DataMember(Name="conference_number", EmitDefaultValue=false)]
        public string ConferenceNumber { get; set; }

        /// <summary>
        /// The URL that will be set as the conference URL for any incident on which this response play is run.
        /// </summary>
        /// <value>The URL that will be set as the conference URL for any incident on which this response play is run.</value>
        [DataMember(Name="conference_url", EmitDefaultValue=false)]
        public string ConferenceUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponsePlay {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Subscribers: ").Append(Subscribers).Append("\n");
            sb.Append("  SubscribersMessage: ").Append(SubscribersMessage).Append("\n");
            sb.Append("  Responders: ").Append(Responders).Append("\n");
            sb.Append("  RespondersMessage: ").Append(RespondersMessage).Append("\n");
            sb.Append("  Runnability: ").Append(Runnability).Append("\n");
            sb.Append("  ConferenceNumber: ").Append(ConferenceNumber).Append("\n");
            sb.Append("  ConferenceUrl: ").Append(ConferenceUrl).Append("\n");
            sb.Append("  ConferenceType: ").Append(ConferenceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponsePlay);
        }

        /// <summary>
        /// Returns true if ResponsePlay instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponsePlay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponsePlay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.Subscribers == input.Subscribers ||
                    this.Subscribers != null &&
                    input.Subscribers != null &&
                    this.Subscribers.SequenceEqual(input.Subscribers)
                ) && 
                (
                    this.SubscribersMessage == input.SubscribersMessage ||
                    (this.SubscribersMessage != null &&
                    this.SubscribersMessage.Equals(input.SubscribersMessage))
                ) && 
                (
                    this.Responders == input.Responders ||
                    this.Responders != null &&
                    input.Responders != null &&
                    this.Responders.SequenceEqual(input.Responders)
                ) && 
                (
                    this.RespondersMessage == input.RespondersMessage ||
                    (this.RespondersMessage != null &&
                    this.RespondersMessage.Equals(input.RespondersMessage))
                ) && 
                (
                    this.Runnability == input.Runnability ||
                    (this.Runnability != null &&
                    this.Runnability.Equals(input.Runnability))
                ) && 
                (
                    this.ConferenceNumber == input.ConferenceNumber ||
                    (this.ConferenceNumber != null &&
                    this.ConferenceNumber.Equals(input.ConferenceNumber))
                ) && 
                (
                    this.ConferenceUrl == input.ConferenceUrl ||
                    (this.ConferenceUrl != null &&
                    this.ConferenceUrl.Equals(input.ConferenceUrl))
                ) && 
                (
                    this.ConferenceType == input.ConferenceType ||
                    (this.ConferenceType != null &&
                    this.ConferenceType.Equals(input.ConferenceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.Subscribers != null)
                    hashCode = hashCode * 59 + this.Subscribers.GetHashCode();
                if (this.SubscribersMessage != null)
                    hashCode = hashCode * 59 + this.SubscribersMessage.GetHashCode();
                if (this.Responders != null)
                    hashCode = hashCode * 59 + this.Responders.GetHashCode();
                if (this.RespondersMessage != null)
                    hashCode = hashCode * 59 + this.RespondersMessage.GetHashCode();
                if (this.Runnability != null)
                    hashCode = hashCode * 59 + this.Runnability.GetHashCode();
                if (this.ConferenceNumber != null)
                    hashCode = hashCode * 59 + this.ConferenceNumber.GetHashCode();
                if (this.ConferenceUrl != null)
                    hashCode = hashCode * 59 + this.ConferenceUrl.GetHashCode();
                if (this.ConferenceType != null)
                    hashCode = hashCode * 59 + this.ConferenceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
