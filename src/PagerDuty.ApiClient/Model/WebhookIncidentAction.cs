/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// WebhookIncidentAction
    /// </summary>
    [DataContract]
        public partial class WebhookIncidentAction : Action,  IEquatable<WebhookIncidentAction>, IValidatableObject
    {
        /// <summary>
        /// The type of action being reported by this message. * &#x60;incident.trigger&#x60; - Sent when an incident is newly created/triggered. * &#x60;incident.acknowledge&#x60; - Sent when an incident is acknowledged by a user. * &#x60;incident.unacknowledge&#x60; - Sent when an incident is unacknowledged due to its acknowledgement timing out. * &#x60;incident.resolve&#x60; - Sent when an incident has been resolved. * &#x60;incident.assign&#x60; - Sent when an incident has been assigned to another user. Often occurs in concert with an &#x60;acknowledge&#x60;. * &#x60;incident.escalate&#x60; - Sent when an incident has been escalated to another user in the same escalation chain. * &#x60;incident.delegate&#x60; - Sent when an incident has been reassigned to another escalation policy. * &#x60;incident.annotate&#x60; - Sent when a note is created on an incident. 
        /// </summary>
        /// <value>The type of action being reported by this message. * &#x60;incident.trigger&#x60; - Sent when an incident is newly created/triggered. * &#x60;incident.acknowledge&#x60; - Sent when an incident is acknowledged by a user. * &#x60;incident.unacknowledge&#x60; - Sent when an incident is unacknowledged due to its acknowledgement timing out. * &#x60;incident.resolve&#x60; - Sent when an incident has been resolved. * &#x60;incident.assign&#x60; - Sent when an incident has been assigned to another user. Often occurs in concert with an &#x60;acknowledge&#x60;. * &#x60;incident.escalate&#x60; - Sent when an incident has been escalated to another user in the same escalation chain. * &#x60;incident.delegate&#x60; - Sent when an incident has been reassigned to another escalation policy. * &#x60;incident.annotate&#x60; - Sent when a note is created on an incident. </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Trigger for value: incident.trigger
            /// </summary>
            [EnumMember(Value = "incident.trigger")]
            Trigger = 1,
            /// <summary>
            /// Enum Acknowledge for value: incident.acknowledge
            /// </summary>
            [EnumMember(Value = "incident.acknowledge")]
            Acknowledge = 2,
            /// <summary>
            /// Enum Unacknowledge for value: incident.unacknowledge
            /// </summary>
            [EnumMember(Value = "incident.unacknowledge")]
            Unacknowledge = 3,
            /// <summary>
            /// Enum Resolve for value: incident.resolve
            /// </summary>
            [EnumMember(Value = "incident.resolve")]
            Resolve = 4,
            /// <summary>
            /// Enum Assign for value: incident.assign
            /// </summary>
            [EnumMember(Value = "incident.assign")]
            Assign = 5,
            /// <summary>
            /// Enum Escalate for value: incident.escalate
            /// </summary>
            [EnumMember(Value = "incident.escalate")]
            Escalate = 6,
            /// <summary>
            /// Enum Delegate for value: incident.delegate
            /// </summary>
            [EnumMember(Value = "incident.delegate")]
            Delegate = 7,
            /// <summary>
            /// Enum Annotate for value: incident.annotate
            /// </summary>
            [EnumMember(Value = "incident.annotate")]
            Annotate = 8        }
        /// <summary>
        /// The type of action being reported by this message. * &#x60;incident.trigger&#x60; - Sent when an incident is newly created/triggered. * &#x60;incident.acknowledge&#x60; - Sent when an incident is acknowledged by a user. * &#x60;incident.unacknowledge&#x60; - Sent when an incident is unacknowledged due to its acknowledgement timing out. * &#x60;incident.resolve&#x60; - Sent when an incident has been resolved. * &#x60;incident.assign&#x60; - Sent when an incident has been assigned to another user. Often occurs in concert with an &#x60;acknowledge&#x60;. * &#x60;incident.escalate&#x60; - Sent when an incident has been escalated to another user in the same escalation chain. * &#x60;incident.delegate&#x60; - Sent when an incident has been reassigned to another escalation policy. * &#x60;incident.annotate&#x60; - Sent when a note is created on an incident. 
        /// </summary>
        /// <value>The type of action being reported by this message. * &#x60;incident.trigger&#x60; - Sent when an incident is newly created/triggered. * &#x60;incident.acknowledge&#x60; - Sent when an incident is acknowledged by a user. * &#x60;incident.unacknowledge&#x60; - Sent when an incident is unacknowledged due to its acknowledgement timing out. * &#x60;incident.resolve&#x60; - Sent when an incident has been resolved. * &#x60;incident.assign&#x60; - Sent when an incident has been assigned to another user. Often occurs in concert with an &#x60;acknowledge&#x60;. * &#x60;incident.escalate&#x60; - Sent when an incident has been escalated to another user in the same escalation chain. * &#x60;incident.delegate&#x60; - Sent when an incident has been reassigned to another escalation policy. * &#x60;incident.annotate&#x60; - Sent when a note is created on an incident. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookIncidentAction" /> class.
        /// </summary>
        /// <param name="type">The type of action being reported by this message. * &#x60;incident.trigger&#x60; - Sent when an incident is newly created/triggered. * &#x60;incident.acknowledge&#x60; - Sent when an incident is acknowledged by a user. * &#x60;incident.unacknowledge&#x60; - Sent when an incident is unacknowledged due to its acknowledgement timing out. * &#x60;incident.resolve&#x60; - Sent when an incident has been resolved. * &#x60;incident.assign&#x60; - Sent when an incident has been assigned to another user. Often occurs in concert with an &#x60;acknowledge&#x60;. * &#x60;incident.escalate&#x60; - Sent when an incident has been escalated to another user in the same escalation chain. * &#x60;incident.delegate&#x60; - Sent when an incident has been reassigned to another escalation policy. * &#x60;incident.annotate&#x60; - Sent when a note is created on an incident. .</param>
        /// <param name="incident">incident.</param>
        /// <param name="logEntries">Log Entries that correspond to the action this Webhook is reporting. Includes the channels..</param>
        public WebhookIncidentAction(TypeEnum? type = default(TypeEnum?), Incident incident = default(Incident), List<LogEntry> logEntries = default(List<LogEntry>), Webhook webhook = default(Webhook)) : base(webhook)
        {
            this.Type = type;
            this.Incident = incident;
            this.LogEntries = logEntries;
        }
        

        /// <summary>
        /// Gets or Sets Incident
        /// </summary>
        [DataMember(Name="incident", EmitDefaultValue=false)]
        public Incident Incident { get; set; }

        /// <summary>
        /// Log Entries that correspond to the action this Webhook is reporting. Includes the channels.
        /// </summary>
        /// <value>Log Entries that correspond to the action this Webhook is reporting. Includes the channels.</value>
        [DataMember(Name="log_entries", EmitDefaultValue=false)]
        public List<LogEntry> LogEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookIncidentAction {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  LogEntries: ").Append(LogEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookIncidentAction);
        }

        /// <summary>
        /// Returns true if WebhookIncidentAction instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookIncidentAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookIncidentAction input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Incident == input.Incident ||
                    (this.Incident != null &&
                    this.Incident.Equals(input.Incident))
                ) && base.Equals(input) && 
                (
                    this.LogEntries == input.LogEntries ||
                    this.LogEntries != null &&
                    input.LogEntries != null &&
                    this.LogEntries.SequenceEqual(input.LogEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Incident != null)
                    hashCode = hashCode * 59 + this.Incident.GetHashCode();
                if (this.LogEntries != null)
                    hashCode = hashCode * 59 + this.LogEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
