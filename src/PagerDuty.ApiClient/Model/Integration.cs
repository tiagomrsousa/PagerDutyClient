/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Integration
    /// </summary>
    [DataContract]
        public partial class Integration :  IEquatable<Integration>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Awscloudwatchinboundintegration for value: aws_cloudwatch_inbound_integration
            /// </summary>
            [EnumMember(Value = "aws_cloudwatch_inbound_integration")]
            Awscloudwatchinboundintegration = 1,
            /// <summary>
            /// Enum Cloudkickinboundintegration for value: cloudkick_inbound_integration
            /// </summary>
            [EnumMember(Value = "cloudkick_inbound_integration")]
            Cloudkickinboundintegration = 2,
            /// <summary>
            /// Enum Eventtransformerapiinboundintegration for value: event_transformer_api_inbound_integration
            /// </summary>
            [EnumMember(Value = "event_transformer_api_inbound_integration")]
            Eventtransformerapiinboundintegration = 3,
            /// <summary>
            /// Enum Genericemailinboundintegration for value: generic_email_inbound_integration
            /// </summary>
            [EnumMember(Value = "generic_email_inbound_integration")]
            Genericemailinboundintegration = 4,
            /// <summary>
            /// Enum Genericeventsapiinboundintegration for value: generic_events_api_inbound_integration
            /// </summary>
            [EnumMember(Value = "generic_events_api_inbound_integration")]
            Genericeventsapiinboundintegration = 5,
            /// <summary>
            /// Enum Keynoteinboundintegration for value: keynote_inbound_integration
            /// </summary>
            [EnumMember(Value = "keynote_inbound_integration")]
            Keynoteinboundintegration = 6,
            /// <summary>
            /// Enum Nagiosinboundintegration for value: nagios_inbound_integration
            /// </summary>
            [EnumMember(Value = "nagios_inbound_integration")]
            Nagiosinboundintegration = 7,
            /// <summary>
            /// Enum Pingdominboundintegration for value: pingdom_inbound_integration
            /// </summary>
            [EnumMember(Value = "pingdom_inbound_integration")]
            Pingdominboundintegration = 8,
            /// <summary>
            /// Enum Sqlmonitorinboundintegration for value: sql_monitor_inbound_integration
            /// </summary>
            [EnumMember(Value = "sql_monitor_inbound_integration")]
            Sqlmonitorinboundintegration = 9,
            /// <summary>
            /// Enum Eventsapiv2inboundintegration for value: events_api_v2_inbound_integration
            /// </summary>
            [EnumMember(Value = "events_api_v2_inbound_integration")]
            Eventsapiv2inboundintegration = 10        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Specify for generic_email_inbound_integration
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EmailIncidentCreationEnum
        {
            /// <summary>
            /// Enum Onnewemail for value: on_new_email
            /// </summary>
            [EnumMember(Value = "on_new_email")]
            Onnewemail = 1,
            /// <summary>
            /// Enum Onnewemailsubject for value: on_new_email_subject
            /// </summary>
            [EnumMember(Value = "on_new_email_subject")]
            Onnewemailsubject = 2,
            /// <summary>
            /// Enum Onlyifnoopenincidents for value: only_if_no_open_incidents
            /// </summary>
            [EnumMember(Value = "only_if_no_open_incidents")]
            Onlyifnoopenincidents = 3,
            /// <summary>
            /// Enum Userules for value: use_rules
            /// </summary>
            [EnumMember(Value = "use_rules")]
            Userules = 4        }
        /// <summary>
        /// Specify for generic_email_inbound_integration
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration</value>
        [DataMember(Name="email_incident_creation", EmitDefaultValue=false)]
        public EmailIncidentCreationEnum? EmailIncidentCreation { get; set; }
        /// <summary>
        /// Specify for generic_email_inbound_integration. May override email_incident_creation
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration. May override email_incident_creation</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EmailFilterModeEnum
        {
            /// <summary>
            /// Enum AllEmail for value: all-email
            /// </summary>
            [EnumMember(Value = "all-email")]
            AllEmail = 1,
            /// <summary>
            /// Enum OrRulesEmail for value: or-rules-email
            /// </summary>
            [EnumMember(Value = "or-rules-email")]
            OrRulesEmail = 2,
            /// <summary>
            /// Enum AndRulesEmail for value: and-rules-email
            /// </summary>
            [EnumMember(Value = "and-rules-email")]
            AndRulesEmail = 3        }
        /// <summary>
        /// Specify for generic_email_inbound_integration. May override email_incident_creation
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration. May override email_incident_creation</value>
        [DataMember(Name="email_filter_mode", EmitDefaultValue=false)]
        public EmailFilterModeEnum? EmailFilterMode { get; set; }
        /// <summary>
        /// Specify for generic_email_inbound_integration.
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EmailParsingFallbackEnum
        {
            /// <summary>
            /// Enum Opennewincident for value: open_new_incident
            /// </summary>
            [EnumMember(Value = "open_new_incident")]
            Opennewincident = 1,
            /// <summary>
            /// Enum Discard for value: discard
            /// </summary>
            [EnumMember(Value = "discard")]
            Discard = 2        }
        /// <summary>
        /// Specify for generic_email_inbound_integration.
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration.</value>
        [DataMember(Name="email_parsing_fallback", EmitDefaultValue=false)]
        public EmailParsingFallbackEnum? EmailParsingFallback { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Integration" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="name">The name of this integration..</param>
        /// <param name="service">service.</param>
        /// <param name="vendor">vendor.</param>
        /// <param name="integrationEmail">Specify for generic_email_inbound_integration. Must be set to an email address @your-subdomain.pagerduty.com.</param>
        /// <param name="emailIncidentCreation">Specify for generic_email_inbound_integration.</param>
        /// <param name="emailFilterMode">Specify for generic_email_inbound_integration. May override email_incident_creation.</param>
        /// <param name="emailParsers">Specify for generic_email_inbound_integration..</param>
        /// <param name="emailParsingFallback">Specify for generic_email_inbound_integration..</param>
        /// <param name="emailFilters">Specify for generic_email_inbound_integration..</param>
        public Integration(TypeEnum? type = default(TypeEnum?), string name = default(string), ServiceReference service = default(ServiceReference), VendorReference vendor = default(VendorReference), string integrationEmail = default(string), EmailIncidentCreationEnum? emailIncidentCreation = default(EmailIncidentCreationEnum?), EmailFilterModeEnum? emailFilterMode = default(EmailFilterModeEnum?), List<EmailParser> emailParsers = default(List<EmailParser>), EmailParsingFallbackEnum? emailParsingFallback = default(EmailParsingFallbackEnum?), List<Object> emailFilters = default(List<Object>))
        {
            this.Type = type;
            this.Name = name;
            this.Service = service;
            this.Vendor = vendor;
            this.IntegrationEmail = integrationEmail;
            this.EmailIncidentCreation = emailIncidentCreation;
            this.EmailFilterMode = emailFilterMode;
            this.EmailParsers = emailParsers;
            this.EmailParsingFallback = emailParsingFallback;
            this.EmailFilters = emailFilters;
        }
        

        /// <summary>
        /// The name of this integration.
        /// </summary>
        /// <value>The name of this integration.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public ServiceReference Service { get; set; }

        /// <summary>
        /// The date/time when this integration was created.
        /// </summary>
        /// <value>The date/time when this integration was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public VendorReference Vendor { get; set; }

        /// <summary>
        /// Specify for generic_email_inbound_integration. Must be set to an email address @your-subdomain.pagerduty.com
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration. Must be set to an email address @your-subdomain.pagerduty.com</value>
        [DataMember(Name="integration_email", EmitDefaultValue=false)]
        public string IntegrationEmail { get; set; }



        /// <summary>
        /// Specify for generic_email_inbound_integration.
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration.</value>
        [DataMember(Name="email_parsers", EmitDefaultValue=false)]
        public List<EmailParser> EmailParsers { get; set; }


        /// <summary>
        /// Specify for generic_email_inbound_integration.
        /// </summary>
        /// <value>Specify for generic_email_inbound_integration.</value>
        [DataMember(Name="email_filters", EmitDefaultValue=false)]
        public List<Object> EmailFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Integration {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  IntegrationEmail: ").Append(IntegrationEmail).Append("\n");
            sb.Append("  EmailIncidentCreation: ").Append(EmailIncidentCreation).Append("\n");
            sb.Append("  EmailFilterMode: ").Append(EmailFilterMode).Append("\n");
            sb.Append("  EmailParsers: ").Append(EmailParsers).Append("\n");
            sb.Append("  EmailParsingFallback: ").Append(EmailParsingFallback).Append("\n");
            sb.Append("  EmailFilters: ").Append(EmailFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Integration);
        }

        /// <summary>
        /// Returns true if Integration instances are equal
        /// </summary>
        /// <param name="input">Instance of Integration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Integration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.IntegrationEmail == input.IntegrationEmail ||
                    (this.IntegrationEmail != null &&
                    this.IntegrationEmail.Equals(input.IntegrationEmail))
                ) && 
                (
                    this.EmailIncidentCreation == input.EmailIncidentCreation ||
                    (this.EmailIncidentCreation != null &&
                    this.EmailIncidentCreation.Equals(input.EmailIncidentCreation))
                ) && 
                (
                    this.EmailFilterMode == input.EmailFilterMode ||
                    (this.EmailFilterMode != null &&
                    this.EmailFilterMode.Equals(input.EmailFilterMode))
                ) && 
                (
                    this.EmailParsers == input.EmailParsers ||
                    this.EmailParsers != null &&
                    input.EmailParsers != null &&
                    this.EmailParsers.SequenceEqual(input.EmailParsers)
                ) && 
                (
                    this.EmailParsingFallback == input.EmailParsingFallback ||
                    (this.EmailParsingFallback != null &&
                    this.EmailParsingFallback.Equals(input.EmailParsingFallback))
                ) && 
                (
                    this.EmailFilters == input.EmailFilters ||
                    this.EmailFilters != null &&
                    input.EmailFilters != null &&
                    this.EmailFilters.SequenceEqual(input.EmailFilters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this.IntegrationEmail != null)
                    hashCode = hashCode * 59 + this.IntegrationEmail.GetHashCode();
                if (this.EmailIncidentCreation != null)
                    hashCode = hashCode * 59 + this.EmailIncidentCreation.GetHashCode();
                if (this.EmailFilterMode != null)
                    hashCode = hashCode * 59 + this.EmailFilterMode.GetHashCode();
                if (this.EmailParsers != null)
                    hashCode = hashCode * 59 + this.EmailParsers.GetHashCode();
                if (this.EmailParsingFallback != null)
                    hashCode = hashCode * 59 + this.EmailParsingFallback.GetHashCode();
                if (this.EmailFilters != null)
                    hashCode = hashCode * 59 + this.EmailFilters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
