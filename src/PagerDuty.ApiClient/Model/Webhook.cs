/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// Information about the configured webhook.
    /// </summary>
    [DataContract]
        public partial class Webhook :  IEquatable<Webhook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="endpointUrl">The url endpoint the webhook payload is sent to..</param>
        /// <param name="name">The name of the webhook..</param>
        /// <param name="webhookObject">webhookObject.</param>
        /// <param name="config">The object that contains webhook configuration values depending on the webhook type specification..</param>
        /// <param name="outboundIntegration">outboundIntegration.</param>
        public Webhook(string endpointUrl = default(string), string name = default(string), WebhookObject webhookObject = default(WebhookObject), Object config = default(Object), OutboundIntegrationReference outboundIntegration = default(OutboundIntegrationReference))
        {
            this.EndpointUrl = endpointUrl;
            this.Name = name;
            this.WebhookObject = webhookObject;
            this.Config = config;
            this.OutboundIntegration = outboundIntegration;
        }
        
        /// <summary>
        /// The url endpoint the webhook payload is sent to.
        /// </summary>
        /// <value>The url endpoint the webhook payload is sent to.</value>
        [DataMember(Name="endpoint_url", EmitDefaultValue=false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// The name of the webhook.
        /// </summary>
        /// <value>The name of the webhook.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets WebhookObject
        /// </summary>
        [DataMember(Name="webhook_object", EmitDefaultValue=false)]
        public WebhookObject WebhookObject { get; set; }

        /// <summary>
        /// The object that contains webhook configuration values depending on the webhook type specification.
        /// </summary>
        /// <value>The object that contains webhook configuration values depending on the webhook type specification.</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Object Config { get; set; }

        /// <summary>
        /// Gets or Sets OutboundIntegration
        /// </summary>
        [DataMember(Name="outbound_integration", EmitDefaultValue=false)]
        public OutboundIntegrationReference OutboundIntegration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WebhookObject: ").Append(WebhookObject).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  OutboundIntegration: ").Append(OutboundIntegration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.WebhookObject == input.WebhookObject ||
                    (this.WebhookObject != null &&
                    this.WebhookObject.Equals(input.WebhookObject))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.OutboundIntegration == input.OutboundIntegration ||
                    (this.OutboundIntegration != null &&
                    this.OutboundIntegration.Equals(input.OutboundIntegration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndpointUrl != null)
                    hashCode = hashCode * 59 + this.EndpointUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WebhookObject != null)
                    hashCode = hashCode * 59 + this.WebhookObject.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.OutboundIntegration != null)
                    hashCode = hashCode * 59 + this.OutboundIntegration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
