/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// ScheduleLayer
    /// </summary>
    [DataContract]
        public partial class ScheduleLayer :  IEquatable<ScheduleLayer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleLayer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="start">The start time of this layer. (required).</param>
        /// <param name="end">The end time of this layer. If &#x60;null&#x60;, the layer does not end..</param>
        /// <param name="users">The ordered list of users on this layer. The position of the user on the list determines their order in the layer. (required).</param>
        /// <param name="restrictions">An array of restrictions for the layer. A restriction is a limit on which period of the day or week the schedule layer can accept assignments..</param>
        /// <param name="rotationVirtualStart">The effective start time of the layer. This can be before the start time of the schedule. (required).</param>
        /// <param name="rotationTurnLengthSeconds">The duration of each on-call shift in seconds. (required).</param>
        /// <param name="name">The name of the schedule layer..</param>
        public ScheduleLayer(string id = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<ScheduleLayerUser> users = default(List<ScheduleLayerUser>), List<Restriction> restrictions = default(List<Restriction>), DateTime? rotationVirtualStart = default(DateTime?), int? rotationTurnLengthSeconds = default(int?), string name = default(string))
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for ScheduleLayer and cannot be null");
            }
            else
            {
                this.Start = start;
            }
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for ScheduleLayer and cannot be null");
            }
            else
            {
                this.Users = users;
            }
            // to ensure "rotationVirtualStart" is required (not null)
            if (rotationVirtualStart == null)
            {
                throw new InvalidDataException("rotationVirtualStart is a required property for ScheduleLayer and cannot be null");
            }
            else
            {
                this.RotationVirtualStart = rotationVirtualStart;
            }
            // to ensure "rotationTurnLengthSeconds" is required (not null)
            if (rotationTurnLengthSeconds == null)
            {
                throw new InvalidDataException("rotationTurnLengthSeconds is a required property for ScheduleLayer and cannot be null");
            }
            else
            {
                this.RotationTurnLengthSeconds = rotationTurnLengthSeconds;
            }
            this.Id = id;
            this.End = end;
            this.Restrictions = restrictions;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The start time of this layer.
        /// </summary>
        /// <value>The start time of this layer.</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }

        /// <summary>
        /// The end time of this layer. If &#x60;null&#x60;, the layer does not end.
        /// </summary>
        /// <value>The end time of this layer. If &#x60;null&#x60;, the layer does not end.</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTime? End { get; set; }

        /// <summary>
        /// The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
        /// </summary>
        /// <value>The ordered list of users on this layer. The position of the user on the list determines their order in the layer.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<ScheduleLayerUser> Users { get; set; }

        /// <summary>
        /// An array of restrictions for the layer. A restriction is a limit on which period of the day or week the schedule layer can accept assignments.
        /// </summary>
        /// <value>An array of restrictions for the layer. A restriction is a limit on which period of the day or week the schedule layer can accept assignments.</value>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public List<Restriction> Restrictions { get; set; }

        /// <summary>
        /// The effective start time of the layer. This can be before the start time of the schedule.
        /// </summary>
        /// <value>The effective start time of the layer. This can be before the start time of the schedule.</value>
        [DataMember(Name="rotation_virtual_start", EmitDefaultValue=false)]
        public DateTime? RotationVirtualStart { get; set; }

        /// <summary>
        /// The duration of each on-call shift in seconds.
        /// </summary>
        /// <value>The duration of each on-call shift in seconds.</value>
        [DataMember(Name="rotation_turn_length_seconds", EmitDefaultValue=false)]
        public int? RotationTurnLengthSeconds { get; set; }

        /// <summary>
        /// The name of the schedule layer.
        /// </summary>
        /// <value>The name of the schedule layer.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.
        /// </summary>
        /// <value>This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.</value>
        [DataMember(Name="rendered_schedule_entries", EmitDefaultValue=false)]
        public List<ScheduleLayerEntry> RenderedScheduleEntries { get; private set; }

        /// <summary>
        /// The percentage of the time range covered by this layer. Returns null unless since or until are set.
        /// </summary>
        /// <value>The percentage of the time range covered by this layer. Returns null unless since or until are set.</value>
        [DataMember(Name="rendered_coverage_percentage", EmitDefaultValue=false)]
        public decimal? RenderedCoveragePercentage { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleLayer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  RotationVirtualStart: ").Append(RotationVirtualStart).Append("\n");
            sb.Append("  RotationTurnLengthSeconds: ").Append(RotationTurnLengthSeconds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RenderedScheduleEntries: ").Append(RenderedScheduleEntries).Append("\n");
            sb.Append("  RenderedCoveragePercentage: ").Append(RenderedCoveragePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleLayer);
        }

        /// <summary>
        /// Returns true if ScheduleLayer instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleLayer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleLayer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    this.Restrictions != null &&
                    input.Restrictions != null &&
                    this.Restrictions.SequenceEqual(input.Restrictions)
                ) && 
                (
                    this.RotationVirtualStart == input.RotationVirtualStart ||
                    (this.RotationVirtualStart != null &&
                    this.RotationVirtualStart.Equals(input.RotationVirtualStart))
                ) && 
                (
                    this.RotationTurnLengthSeconds == input.RotationTurnLengthSeconds ||
                    (this.RotationTurnLengthSeconds != null &&
                    this.RotationTurnLengthSeconds.Equals(input.RotationTurnLengthSeconds))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RenderedScheduleEntries == input.RenderedScheduleEntries ||
                    this.RenderedScheduleEntries != null &&
                    input.RenderedScheduleEntries != null &&
                    this.RenderedScheduleEntries.SequenceEqual(input.RenderedScheduleEntries)
                ) && 
                (
                    this.RenderedCoveragePercentage == input.RenderedCoveragePercentage ||
                    (this.RenderedCoveragePercentage != null &&
                    this.RenderedCoveragePercentage.Equals(input.RenderedCoveragePercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.RotationVirtualStart != null)
                    hashCode = hashCode * 59 + this.RotationVirtualStart.GetHashCode();
                if (this.RotationTurnLengthSeconds != null)
                    hashCode = hashCode * 59 + this.RotationTurnLengthSeconds.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RenderedScheduleEntries != null)
                    hashCode = hashCode * 59 + this.RenderedScheduleEntries.GetHashCode();
                if (this.RenderedCoveragePercentage != null)
                    hashCode = hashCode * 59 + this.RenderedCoveragePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
