/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// A message containing information about a single PagerDuty action.
    /// </summary>
    [DataContract]
        public partial class WebhooksV1Message :  IEquatable<WebhooksV1Message>, IValidatableObject
    {
        /// <summary>
        /// The type of action being reported by this message.
        /// </summary>
        /// <value>The type of action being reported by this message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Trigger for value: incident.trigger
            /// </summary>
            [EnumMember(Value = "incident.trigger")]
            Trigger = 1,
            /// <summary>
            /// Enum Acknowledge for value: incident.acknowledge
            /// </summary>
            [EnumMember(Value = "incident.acknowledge")]
            Acknowledge = 2,
            /// <summary>
            /// Enum Unacknowledge for value: incident.unacknowledge
            /// </summary>
            [EnumMember(Value = "incident.unacknowledge")]
            Unacknowledge = 3,
            /// <summary>
            /// Enum Resolve for value: incident.resolve
            /// </summary>
            [EnumMember(Value = "incident.resolve")]
            Resolve = 4,
            /// <summary>
            /// Enum Assign for value: incident.assign
            /// </summary>
            [EnumMember(Value = "incident.assign")]
            Assign = 5,
            /// <summary>
            /// Enum Escalate for value: incident.escalate
            /// </summary>
            [EnumMember(Value = "incident.escalate")]
            Escalate = 6,
            /// <summary>
            /// Enum Delegate for value: incident.delegate
            /// </summary>
            [EnumMember(Value = "incident.delegate")]
            Delegate = 7        }
        /// <summary>
        /// The type of action being reported by this message.
        /// </summary>
        /// <value>The type of action being reported by this message.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksV1Message" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        public WebhooksV1Message(Object data = default(Object))
        {
            this.Data = data;
        }
        
        /// <summary>
        /// Uniquely identifies this outgoing webhook message; can be used for idempotency when processing the messages.
        /// </summary>
        /// <value>Uniquely identifies this outgoing webhook message; can be used for idempotency when processing the messages.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; private set; }


        /// <summary>
        /// The date/time when the incident changed state.
        /// </summary>
        /// <value>The date/time when the incident changed state.</value>
        [DataMember(Name="created_on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Object Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhooksV1Message {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhooksV1Message);
        }

        /// <summary>
        /// Returns true if WebhooksV1Message instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhooksV1Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhooksV1Message input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
