/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// An Audit Trail record
    /// </summary>
    [DataContract]
        public partial class AuditRecord :  IEquatable<AuditRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditRecord" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="self">Record URL..</param>
        /// <param name="executionTime">The date/time the action executed, in ISO8601 format and millisecond precision. (required).</param>
        /// <param name="executionContext">Action execution context.</param>
        /// <param name="actors">actors.</param>
        /// <param name="method">The method information (required).</param>
        /// <param name="rootResource">rootResource (required).</param>
        /// <param name="action">action (required).</param>
        /// <param name="details">Additional details to provide further information about the action or the resource that has been audited. .</param>
        public AuditRecord(string id = default(string), string self = default(string), DateTime? executionTime = default(DateTime?), Object executionContext = default(Object), List<Reference> actors = default(List<Reference>), Object method = default(Object), Reference rootResource = default(Reference), string action = default(string), Object details = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AuditRecord and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "executionTime" is required (not null)
            if (executionTime == null)
            {
                throw new InvalidDataException("executionTime is a required property for AuditRecord and cannot be null");
            }
            else
            {
                this.ExecutionTime = executionTime;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for AuditRecord and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "rootResource" is required (not null)
            if (rootResource == null)
            {
                throw new InvalidDataException("rootResource is a required property for AuditRecord and cannot be null");
            }
            else
            {
                this.RootResource = rootResource;
            }
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for AuditRecord and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            this.Self = self;
            this.ExecutionContext = executionContext;
            this.Actors = actors;
            this.Details = details;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Record URL.
        /// </summary>
        /// <value>Record URL.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// The date/time the action executed, in ISO8601 format and millisecond precision.
        /// </summary>
        /// <value>The date/time the action executed, in ISO8601 format and millisecond precision.</value>
        [DataMember(Name="execution_time", EmitDefaultValue=false)]
        public DateTime? ExecutionTime { get; set; }

        /// <summary>
        /// Action execution context
        /// </summary>
        /// <value>Action execution context</value>
        [DataMember(Name="execution_context", EmitDefaultValue=false)]
        public Object ExecutionContext { get; set; }

        /// <summary>
        /// Gets or Sets Actors
        /// </summary>
        [DataMember(Name="actors", EmitDefaultValue=false)]
        public List<Reference> Actors { get; set; }

        /// <summary>
        /// The method information
        /// </summary>
        /// <value>The method information</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public Object Method { get; set; }

        /// <summary>
        /// Gets or Sets RootResource
        /// </summary>
        [DataMember(Name="root_resource", EmitDefaultValue=false)]
        public Reference RootResource { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Additional details to provide further information about the action or the resource that has been audited. 
        /// </summary>
        /// <value>Additional details to provide further information about the action or the resource that has been audited. </value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Object Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  ExecutionTime: ").Append(ExecutionTime).Append("\n");
            sb.Append("  ExecutionContext: ").Append(ExecutionContext).Append("\n");
            sb.Append("  Actors: ").Append(Actors).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  RootResource: ").Append(RootResource).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditRecord);
        }

        /// <summary>
        /// Returns true if AuditRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.ExecutionTime == input.ExecutionTime ||
                    (this.ExecutionTime != null &&
                    this.ExecutionTime.Equals(input.ExecutionTime))
                ) && 
                (
                    this.ExecutionContext == input.ExecutionContext ||
                    (this.ExecutionContext != null &&
                    this.ExecutionContext.Equals(input.ExecutionContext))
                ) && 
                (
                    this.Actors == input.Actors ||
                    this.Actors != null &&
                    input.Actors != null &&
                    this.Actors.SequenceEqual(input.Actors)
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.RootResource == input.RootResource ||
                    (this.RootResource != null &&
                    this.RootResource.Equals(input.RootResource))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                if (this.ExecutionTime != null)
                    hashCode = hashCode * 59 + this.ExecutionTime.GetHashCode();
                if (this.ExecutionContext != null)
                    hashCode = hashCode * 59 + this.ExecutionContext.GetHashCode();
                if (this.Actors != null)
                    hashCode = hashCode * 59 + this.Actors.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.RootResource != null)
                    hashCode = hashCode * 59 + this.RootResource.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
