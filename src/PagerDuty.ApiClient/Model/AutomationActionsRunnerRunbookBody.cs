/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// AutomationActionsRunnerRunbookBody
    /// </summary>
    [DataContract]
        public partial class AutomationActionsRunnerRunbookBody : AutomationActionsRunnerBody,  IEquatable<AutomationActionsRunnerRunbookBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationActionsRunnerRunbookBody" /> class.
        /// </summary>
        /// <param name="runbookBaseUri">The base URI of the Runbook server to connect to. May only contain alphanumeric characters, periods, underscores and dashes. If omitted, the previously stored value will remain unchanged..</param>
        /// <param name="runbookApiKey">The API key to connect to the Runbook server with. If omitted, the previously stored value will remain unchanged..</param>
        public AutomationActionsRunnerRunbookBody(string runbookBaseUri = default(string), string runbookApiKey = default(string), string name = default(string), string description = default(string)) : base(name, description)
        {
            this.RunbookBaseUri = runbookBaseUri;
            this.RunbookApiKey = runbookApiKey;
        }
        
        /// <summary>
        /// The base URI of the Runbook server to connect to. May only contain alphanumeric characters, periods, underscores and dashes. If omitted, the previously stored value will remain unchanged.
        /// </summary>
        /// <value>The base URI of the Runbook server to connect to. May only contain alphanumeric characters, periods, underscores and dashes. If omitted, the previously stored value will remain unchanged.</value>
        [DataMember(Name="runbook_base_uri", EmitDefaultValue=false)]
        public string RunbookBaseUri { get; set; }

        /// <summary>
        /// The API key to connect to the Runbook server with. If omitted, the previously stored value will remain unchanged.
        /// </summary>
        /// <value>The API key to connect to the Runbook server with. If omitted, the previously stored value will remain unchanged.</value>
        [DataMember(Name="runbook_api_key", EmitDefaultValue=false)]
        public string RunbookApiKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomationActionsRunnerRunbookBody {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RunbookBaseUri: ").Append(RunbookBaseUri).Append("\n");
            sb.Append("  RunbookApiKey: ").Append(RunbookApiKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomationActionsRunnerRunbookBody);
        }

        /// <summary>
        /// Returns true if AutomationActionsRunnerRunbookBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomationActionsRunnerRunbookBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomationActionsRunnerRunbookBody input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.RunbookBaseUri == input.RunbookBaseUri ||
                    (this.RunbookBaseUri != null &&
                    this.RunbookBaseUri.Equals(input.RunbookBaseUri))
                ) && base.Equals(input) && 
                (
                    this.RunbookApiKey == input.RunbookApiKey ||
                    (this.RunbookApiKey != null &&
                    this.RunbookApiKey.Equals(input.RunbookApiKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.RunbookBaseUri != null)
                    hashCode = hashCode * 59 + this.RunbookBaseUri.GetHashCode();
                if (this.RunbookApiKey != null)
                    hashCode = hashCode * 59 + this.RunbookApiKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
