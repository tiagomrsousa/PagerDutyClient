/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// MaintenanceWindow
    /// </summary>
    [DataContract]
        public partial class MaintenanceWindow :  IEquatable<MaintenanceWindow>, IValidatableObject
    {
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Maintenancewindow for value: maintenance_window
            /// </summary>
            [EnumMember(Value = "maintenance_window")]
            Maintenancewindow = 1        }
        /// <summary>
        /// The type of object being created.
        /// </summary>
        /// <value>The type of object being created.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaintenanceWindow" /> class.
        /// </summary>
        /// <param name="type">The type of object being created. (required) (default to TypeEnum.Maintenancewindow).</param>
        /// <param name="startTime">This maintenance window&#x27;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time. (required).</param>
        /// <param name="endTime">This maintenance window&#x27;s end time. This is when the services will start creating incidents again. This date must be in the future and after the &#x60;start_time&#x60;. (required).</param>
        /// <param name="description">A description for this maintenance window..</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="services">services (required).</param>
        public MaintenanceWindow(TypeEnum type = TypeEnum.Maintenancewindow, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string description = default(string), UserReference createdBy = default(UserReference), List<ServiceReference> services = default(List<ServiceReference>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MaintenanceWindow and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for MaintenanceWindow and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for MaintenanceWindow and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new InvalidDataException("services is a required property for MaintenanceWindow and cannot be null");
            }
            else
            {
                this.Services = services;
            }
            this.Description = description;
            this.CreatedBy = createdBy;
        }
        

        /// <summary>
        /// The order in which the maintenance window was created.
        /// </summary>
        /// <value>The order in which the maintenance window was created.</value>
        [DataMember(Name="sequence_number", EmitDefaultValue=false)]
        public int? SequenceNumber { get; private set; }

        /// <summary>
        /// This maintenance window&#x27;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
        /// </summary>
        /// <value>This maintenance window&#x27;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// This maintenance window&#x27;s end time. This is when the services will start creating incidents again. This date must be in the future and after the &#x60;start_time&#x60;.
        /// </summary>
        /// <value>This maintenance window&#x27;s end time. This is when the services will start creating incidents again. This date must be in the future and after the &#x60;start_time&#x60;.</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// A description for this maintenance window.
        /// </summary>
        /// <value>A description for this maintenance window.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public UserReference CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ServiceReference> Services { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<TeamReference> Teams { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaintenanceWindow {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaintenanceWindow);
        }

        /// <summary>
        /// Returns true if MaintenanceWindow instances are equal
        /// </summary>
        /// <param name="input">Instance of MaintenanceWindow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaintenanceWindow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.Teams == input.Teams ||
                    this.Teams != null &&
                    input.Teams != null &&
                    this.Teams.SequenceEqual(input.Teams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SequenceNumber != null)
                    hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Teams != null)
                    hashCode = hashCode * 59 + this.Teams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
