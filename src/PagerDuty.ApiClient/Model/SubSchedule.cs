/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PagerDuty.ApiClient.Client.SwaggerDateConverter;

namespace PagerDuty.ApiClient.Model
{
    /// <summary>
    /// SubSchedule
    /// </summary>
    [DataContract]
        public partial class SubSchedule :  IEquatable<SubSchedule>, IValidatableObject
    {
        /// <summary>
        /// The name of the subschedule
        /// </summary>
        /// <value>The name of the subschedule</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum NameEnum
        {
            /// <summary>
            /// Enum FinalSchedule for value: Final Schedule
            /// </summary>
            [EnumMember(Value = "Final Schedule")]
            FinalSchedule = 1,
            /// <summary>
            /// Enum Overrides for value: Overrides
            /// </summary>
            [EnumMember(Value = "Overrides")]
            Overrides = 2        }
        /// <summary>
        /// The name of the subschedule
        /// </summary>
        /// <value>The name of the subschedule</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSchedule" /> class.
        /// </summary>
        public SubSchedule()
        {
        }
        

        /// <summary>
        /// This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.
        /// </summary>
        /// <value>This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.</value>
        [DataMember(Name="rendered_schedule_entries", EmitDefaultValue=false)]
        public List<ScheduleLayerEntry> RenderedScheduleEntries { get; private set; }

        /// <summary>
        /// The percentage of the time range covered by this layer. Returns null unless since or until are set.
        /// </summary>
        /// <value>The percentage of the time range covered by this layer. Returns null unless since or until are set.</value>
        [DataMember(Name="rendered_coverage_percentage", EmitDefaultValue=false)]
        public decimal? RenderedCoveragePercentage { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubSchedule {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RenderedScheduleEntries: ").Append(RenderedScheduleEntries).Append("\n");
            sb.Append("  RenderedCoveragePercentage: ").Append(RenderedCoveragePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubSchedule);
        }

        /// <summary>
        /// Returns true if SubSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of SubSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RenderedScheduleEntries == input.RenderedScheduleEntries ||
                    this.RenderedScheduleEntries != null &&
                    input.RenderedScheduleEntries != null &&
                    this.RenderedScheduleEntries.SequenceEqual(input.RenderedScheduleEntries)
                ) && 
                (
                    this.RenderedCoveragePercentage == input.RenderedCoveragePercentage ||
                    (this.RenderedCoveragePercentage != null &&
                    this.RenderedCoveragePercentage.Equals(input.RenderedCoveragePercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RenderedScheduleEntries != null)
                    hashCode = hashCode * 59 + this.RenderedScheduleEntries.GetHashCode();
                if (this.RenderedCoveragePercentage != null)
                    hashCode = hashCode * 59 + this.RenderedCoveragePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
