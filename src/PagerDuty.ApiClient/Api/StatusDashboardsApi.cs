/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStatusDashboardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        Object GetStatusDashboardById (string accept, string id, string X_EARLY_ACCESS);

        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStatusDashboardByIdWithHttpInfo (string accept, string id, string X_EARLY_ACCESS);
        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        Object GetStatusDashboardByUrlSlug (string accept, string urlSlug, string X_EARLY_ACCESS);

        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStatusDashboardByUrlSlugWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS);
        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;.
        /// </summary>
        /// <remarks>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Object</returns>
        Object GetStatusDashboardServiceImpactsById (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null);

        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;.
        /// </summary>
        /// <remarks>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStatusDashboardServiceImpactsByIdWithHttpInfo (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null);
        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Object</returns>
        Object GetStatusDashboardServiceImpactsByUrlSlug (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null);

        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStatusDashboardServiceImpactsByUrlSlugWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null);
        /// <summary>
        /// List Status Dashboards
        /// </summary>
        /// <remarks>
        /// Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        Object ListStatusDashboards (string accept, string X_EARLY_ACCESS);

        /// <summary>
        /// List Status Dashboards
        /// </summary>
        /// <remarks>
        /// Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListStatusDashboardsWithHttpInfo (string accept, string X_EARLY_ACCESS);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStatusDashboardByIdAsync (string accept, string id, string X_EARLY_ACCESS);

        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardByIdAsyncWithHttpInfo (string accept, string id, string X_EARLY_ACCESS);
        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStatusDashboardByUrlSlugAsync (string accept, string urlSlug, string X_EARLY_ACCESS);

        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardByUrlSlugAsyncWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS);
        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;.
        /// </summary>
        /// <remarks>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStatusDashboardServiceImpactsByIdAsync (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null);

        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;.
        /// </summary>
        /// <remarks>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardServiceImpactsByIdAsyncWithHttpInfo (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null);
        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStatusDashboardServiceImpactsByUrlSlugAsync (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null);

        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60;
        /// </summary>
        /// <remarks>
        /// Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardServiceImpactsByUrlSlugAsyncWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null);
        /// <summary>
        /// List Status Dashboards
        /// </summary>
        /// <remarks>
        /// Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListStatusDashboardsAsync (string accept, string X_EARLY_ACCESS);

        /// <summary>
        /// List Status Dashboards
        /// </summary>
        /// <remarks>
        /// Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListStatusDashboardsAsyncWithHttpInfo (string accept, string X_EARLY_ACCESS);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StatusDashboardsApi : IStatusDashboardsApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusDashboardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatusDashboardsApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusDashboardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public StatusDashboardsApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusDashboardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatusDashboardsApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60; Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        public Object GetStatusDashboardById (string accept, string id, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = GetStatusDashboardByIdWithHttpInfo(accept, id, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60; Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetStatusDashboardByIdWithHttpInfo (string accept, string id, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatusDashboardsApi->GetStatusDashboardById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardById");

            var localVarPath = "/status_dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60; Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStatusDashboardByIdAsync (string accept, string id, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = await GetStatusDashboardByIdAsyncWithHttpInfo(accept, id, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;id&#x60; Get a Status Dashboard by its PagerDuty &#x60;id&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardByIdAsyncWithHttpInfo (string accept, string id, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatusDashboardsApi->GetStatusDashboardById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardById");

            var localVarPath = "/status_dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60; Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        public Object GetStatusDashboardByUrlSlug (string accept, string urlSlug, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = GetStatusDashboardByUrlSlugWithHttpInfo(accept, urlSlug, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60; Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetStatusDashboardByUrlSlugWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardByUrlSlug");
            // verify the required parameter 'urlSlug' is set
            if (urlSlug == null)
                throw new ApiException(400, "Missing required parameter 'urlSlug' when calling StatusDashboardsApi->GetStatusDashboardByUrlSlug");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardByUrlSlug");

            var localVarPath = "/status_dashboards/url_slugs/{url_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (urlSlug != null) localVarPathParams.Add("url_slug", this.Configuration.ApiClient.ParameterToString(urlSlug)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardByUrlSlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60; Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStatusDashboardByUrlSlugAsync (string accept, string urlSlug, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = await GetStatusDashboardByUrlSlugAsyncWithHttpInfo(accept, urlSlug, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single Status Dashboard by &#x60;url_slug&#x60; Get a Status Dashboard by its PagerDuty &#x60;url_slug&#x60;.  A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardByUrlSlugAsyncWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardByUrlSlug");
            // verify the required parameter 'urlSlug' is set
            if (urlSlug == null)
                throw new ApiException(400, "Missing required parameter 'urlSlug' when calling StatusDashboardsApi->GetStatusDashboardByUrlSlug");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardByUrlSlug");

            var localVarPath = "/status_dashboards/url_slugs/{url_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (urlSlug != null) localVarPathParams.Add("url_slug", this.Configuration.ApiClient.ParameterToString(urlSlug)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardByUrlSlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;. Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Object</returns>
        public Object GetStatusDashboardServiceImpactsById (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null)
        {
             ApiResponse<Object> localVarResponse = GetStatusDashboardServiceImpactsByIdWithHttpInfo(accept, id, X_EARLY_ACCESS, additionalFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;. Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetStatusDashboardServiceImpactsByIdWithHttpInfo (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsById");

            var localVarPath = "/status_dashboards/{id}/service_impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (additionalFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_fields[]", additionalFields)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardServiceImpactsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;. Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStatusDashboardServiceImpactsByIdAsync (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null)
        {
             ApiResponse<Object> localVarResponse = await GetStatusDashboardServiceImpactsByIdAsyncWithHttpInfo(accept, id, X_EARLY_ACCESS, additionalFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;. Get impacted Business Services for a Status Dashboard by &#x60;id&#x60;  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the specified Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get Impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sorted response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardServiceImpactsByIdAsyncWithHttpInfo (string accept, string id, string X_EARLY_ACCESS, string additionalFields = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsById");

            var localVarPath = "/status_dashboards/{id}/service_impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (additionalFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_fields[]", additionalFields)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardServiceImpactsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60; Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Object</returns>
        public Object GetStatusDashboardServiceImpactsByUrlSlug (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null)
        {
             ApiResponse<Object> localVarResponse = GetStatusDashboardServiceImpactsByUrlSlugWithHttpInfo(accept, urlSlug, X_EARLY_ACCESS, additionalFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60; Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetStatusDashboardServiceImpactsByUrlSlugWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsByUrlSlug");
            // verify the required parameter 'urlSlug' is set
            if (urlSlug == null)
                throw new ApiException(400, "Missing required parameter 'urlSlug' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsByUrlSlug");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsByUrlSlug");

            var localVarPath = "/status_dashboards/url_slugs/{url_slug}/service_impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (urlSlug != null) localVarPathParams.Add("url_slug", this.Configuration.ApiClient.ParameterToString(urlSlug)); // path parameter
            if (additionalFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_fields[]", additionalFields)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardServiceImpactsByUrlSlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60; Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStatusDashboardServiceImpactsByUrlSlugAsync (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null)
        {
             ApiResponse<Object> localVarResponse = await GetStatusDashboardServiceImpactsByUrlSlugAsyncWithHttpInfo(accept, urlSlug, X_EARLY_ACCESS, additionalFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get impacted Business Services for a  Status Dashboard by &#x60;url_slug&#x60; Get Business Service Impacts for the Business Services on a Status Dashboard by its &#x60;url_slug&#x60;. A &#x60;url_slug&#x60; is a human-readable reference for a custom Status Dashboard that may be created or changed in the UI. It will generally be a &#x60;dash-separated-string-like-this&#x60;.  This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted on the Status Dashboard up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific Business Service on the Status Dashboard that does not appear in the Impact-sored response, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="urlSlug">The &#x60;url_slug&#x60; for a status dashboard</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="additionalFields">Provides access to additional fields such as highest priority per business service and total impacted count (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusDashboardServiceImpactsByUrlSlugAsyncWithHttpInfo (string accept, string urlSlug, string X_EARLY_ACCESS, string additionalFields = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsByUrlSlug");
            // verify the required parameter 'urlSlug' is set
            if (urlSlug == null)
                throw new ApiException(400, "Missing required parameter 'urlSlug' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsByUrlSlug");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->GetStatusDashboardServiceImpactsByUrlSlug");

            var localVarPath = "/status_dashboards/url_slugs/{url_slug}/service_impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (urlSlug != null) localVarPathParams.Add("url_slug", this.Configuration.ApiClient.ParameterToString(urlSlug)); // path parameter
            if (additionalFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_fields[]", additionalFields)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusDashboardServiceImpactsByUrlSlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Status Dashboards Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        public Object ListStatusDashboards (string accept, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = ListStatusDashboardsWithHttpInfo(accept, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Status Dashboards Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListStatusDashboardsWithHttpInfo (string accept, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->ListStatusDashboards");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->ListStatusDashboards");

            var localVarPath = "/status_dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStatusDashboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Status Dashboards Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListStatusDashboardsAsync (string accept, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = await ListStatusDashboardsAsyncWithHttpInfo(accept, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Status Dashboards Get all your account&#x27;s custom Status Dashboard views  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;status-dashboards&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListStatusDashboardsAsyncWithHttpInfo (string accept, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatusDashboardsApi->ListStatusDashboards");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling StatusDashboardsApi->ListStatusDashboards");

            var localVarPath = "/status_dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStatusDashboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
