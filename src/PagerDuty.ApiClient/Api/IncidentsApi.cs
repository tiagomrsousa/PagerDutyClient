/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IIncidentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Incident
        /// </summary>
        /// <remarks>
        /// Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateIncident (string accept, string contentType, string authorization, string from, Object body = null);

        /// <summary>
        /// Create an Incident
        /// </summary>
        /// <remarks>
        /// Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateIncidentWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null);
        /// <summary>
        /// Create a note on an incident
        /// </summary>
        /// <remarks>
        /// Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateIncidentNote (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Create a note on an incident
        /// </summary>
        /// <remarks>
        /// Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateIncidentNoteWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Add Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Subscribe the given entities to Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>Object</returns>
        Object CreateIncidentNotificationSubscribers (string accept, string id, Object body = null);

        /// <summary>
        /// Add Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Subscribe the given entities to Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateIncidentNotificationSubscribersWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Create a responder request for an incident
        /// </summary>
        /// <remarks>
        /// Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateIncidentResponderRequest (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Create a responder request for an incident
        /// </summary>
        /// <remarks>
        /// Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateIncidentResponderRequestWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Snooze an incident
        /// </summary>
        /// <remarks>
        /// Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateIncidentSnooze (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Snooze an incident
        /// </summary>
        /// <remarks>
        /// Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateIncidentSnoozeWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Create a status update on an incident
        /// </summary>
        /// <remarks>
        /// Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateIncidentStatusUpdate (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Create a status update on an incident
        /// </summary>
        /// <remarks>
        /// Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateIncidentStatusUpdateWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Get an incident
        /// </summary>
        /// <remarks>
        /// Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object GetIncident (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);

        /// <summary>
        /// Get an incident
        /// </summary>
        /// <remarks>
        /// Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetIncidentWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);
        /// <summary>
        /// Get an alert
        /// </summary>
        /// <remarks>
        /// Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>Object</returns>
        Object GetIncidentAlert (string accept, string contentType, string authorization, string id, string alertId);

        /// <summary>
        /// Get an alert
        /// </summary>
        /// <remarks>
        /// Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetIncidentAlertWithHttpInfo (string accept, string contentType, string authorization, string id, string alertId);
        /// <summary>
        /// Get Incident Field Values
        /// </summary>
        /// <remarks>
        /// Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>Object</returns>
        Object GetIncidentFieldValues (string id, string X_EARLY_ACCESS);

        /// <summary>
        /// Get Incident Field Values
        /// </summary>
        /// <remarks>
        /// Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetIncidentFieldValuesWithHttpInfo (string id, string X_EARLY_ACCESS);
        /// <summary>
        /// List Business Services impacted by the given Incident
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        Object GetIncidentImpactedBusinessServices (string accept, string id, string X_EARLY_ACCESS);

        /// <summary>
        /// List Business Services impacted by the given Incident
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetIncidentImpactedBusinessServicesWithHttpInfo (string accept, string id, string X_EARLY_ACCESS);
        /// <summary>
        /// List Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetIncidentNotificationSubscribers (string accept, string id);

        /// <summary>
        /// List Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetIncidentNotificationSubscribersWithHttpInfo (string accept, string id);
        /// <summary>
        /// Get Outlier Incident
        /// </summary>
        /// <remarks>
        /// Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Object</returns>
        Object GetOutlierIncident (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null);

        /// <summary>
        /// Get Outlier Incident
        /// </summary>
        /// <remarks>
        /// Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetOutlierIncidentWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null);
        /// <summary>
        /// Get Past Incidents
        /// </summary>
        /// <remarks>
        /// Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object GetPastIncidents (int? limit = null, bool? total = null);

        /// <summary>
        /// Get Past Incidents
        /// </summary>
        /// <remarks>
        /// Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPastIncidentsWithHttpInfo (int? limit = null, bool? total = null);
        /// <summary>
        /// Get Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Object</returns>
        Object GetRelatedIncidents (string accept, string contentType, string authorization, string id, string additionalDetails = null);

        /// <summary>
        /// Get Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetRelatedIncidentsWithHttpInfo (string accept, string contentType, string authorization, string id, string additionalDetails = null);
        /// <summary>
        /// Get Incident&#x27;s Schema
        /// </summary>
        /// <remarks>
        /// Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>Object</returns>
        Object GetSchemaForIncident (string id, string X_EARLY_ACCESS, string include = null);

        /// <summary>
        /// Get Incident&#x27;s Schema
        /// </summary>
        /// <remarks>
        /// Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSchemaForIncidentWithHttpInfo (string id, string X_EARLY_ACCESS, string include = null);
        /// <summary>
        /// List alerts for an incident
        /// </summary>
        /// <remarks>
        /// List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object ListIncidentAlerts (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null);

        /// <summary>
        /// List alerts for an incident
        /// </summary>
        /// <remarks>
        /// List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListIncidentAlertsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null);
        /// <summary>
        /// List log entries for an incident
        /// </summary>
        /// <remarks>
        /// List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        Object ListIncidentLogEntries (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null);

        /// <summary>
        /// List log entries for an incident
        /// </summary>
        /// <remarks>
        /// List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListIncidentLogEntriesWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null);
        /// <summary>
        /// List notes for an incident
        /// </summary>
        /// <remarks>
        /// List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object ListIncidentNotes (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List notes for an incident
        /// </summary>
        /// <remarks>
        /// List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListIncidentNotesWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// List incidents
        /// </summary>
        /// <remarks>
        /// List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>Object</returns>
        Object ListIncidents (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null);

        /// <summary>
        /// List incidents
        /// </summary>
        /// <remarks>
        /// List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListIncidentsWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null);
        /// <summary>
        /// Merge incidents
        /// </summary>
        /// <remarks>
        /// Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object MergeIncidents (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Merge incidents
        /// </summary>
        /// <remarks>
        /// Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MergeIncidentsWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service.
        /// </summary>
        /// <remarks>
        /// Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>Object</returns>
        Object PutIncidentManualBusinessServiceAssociation (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null);

        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service.
        /// </summary>
        /// <remarks>
        /// Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PutIncidentManualBusinessServiceAssociationWithHttpInfo (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null);
        /// <summary>
        /// Remove Notification Subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>Object</returns>
        Object RemoveIncidentNotificationSubscribers (string accept, string id, Object body = null);

        /// <summary>
        /// Remove Notification Subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveIncidentNotificationSubscribersWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Set Incident Field Values
        /// </summary>
        /// <remarks>
        /// Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object SetIncidentFieldValues (string id, Object body = null);

        /// <summary>
        /// Set Incident Field Values
        /// </summary>
        /// <remarks>
        /// Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetIncidentFieldValuesWithHttpInfo (string id, Object body = null);
        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateIncident (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateIncidentWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Update an alert
        /// </summary>
        /// <remarks>
        /// Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateIncidentAlert (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null);

        /// <summary>
        /// Update an alert
        /// </summary>
        /// <remarks>
        /// Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateIncidentAlertWithHttpInfo (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null);
        /// <summary>
        /// Manage alerts
        /// </summary>
        /// <remarks>
        /// Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object UpdateIncidentAlerts (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null);

        /// <summary>
        /// Manage alerts
        /// </summary>
        /// <remarks>
        /// Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateIncidentAlertsWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null);
        /// <summary>
        /// Manage incidents
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object UpdateIncidents (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null);

        /// <summary>
        /// Manage incidents
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateIncidentsWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Incident
        /// </summary>
        /// <remarks>
        /// Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateIncidentAsync (string accept, string contentType, string authorization, string from, Object body = null);

        /// <summary>
        /// Create an Incident
        /// </summary>
        /// <remarks>
        /// Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null);
        /// <summary>
        /// Create a note on an incident
        /// </summary>
        /// <remarks>
        /// Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateIncidentNoteAsync (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Create a note on an incident
        /// </summary>
        /// <remarks>
        /// Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentNoteAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Add Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Subscribe the given entities to Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateIncidentNotificationSubscribersAsync (string accept, string id, Object body = null);

        /// <summary>
        /// Add Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Subscribe the given entities to Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentNotificationSubscribersAsyncWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Create a responder request for an incident
        /// </summary>
        /// <remarks>
        /// Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateIncidentResponderRequestAsync (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Create a responder request for an incident
        /// </summary>
        /// <remarks>
        /// Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentResponderRequestAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Snooze an incident
        /// </summary>
        /// <remarks>
        /// Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateIncidentSnoozeAsync (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Snooze an incident
        /// </summary>
        /// <remarks>
        /// Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentSnoozeAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Create a status update on an incident
        /// </summary>
        /// <remarks>
        /// Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateIncidentStatusUpdateAsync (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Create a status update on an incident
        /// </summary>
        /// <remarks>
        /// Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentStatusUpdateAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Get an incident
        /// </summary>
        /// <remarks>
        /// Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetIncidentAsync (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);

        /// <summary>
        /// Get an incident
        /// </summary>
        /// <remarks>
        /// Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);
        /// <summary>
        /// Get an alert
        /// </summary>
        /// <remarks>
        /// Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetIncidentAlertAsync (string accept, string contentType, string authorization, string id, string alertId);

        /// <summary>
        /// Get an alert
        /// </summary>
        /// <remarks>
        /// Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentAlertAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string alertId);
        /// <summary>
        /// Get Incident Field Values
        /// </summary>
        /// <remarks>
        /// Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetIncidentFieldValuesAsync (string id, string X_EARLY_ACCESS);

        /// <summary>
        /// Get Incident Field Values
        /// </summary>
        /// <remarks>
        /// Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentFieldValuesAsyncWithHttpInfo (string id, string X_EARLY_ACCESS);
        /// <summary>
        /// List Business Services impacted by the given Incident
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetIncidentImpactedBusinessServicesAsync (string accept, string id, string X_EARLY_ACCESS);

        /// <summary>
        /// List Business Services impacted by the given Incident
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentImpactedBusinessServicesAsyncWithHttpInfo (string accept, string id, string X_EARLY_ACCESS);
        /// <summary>
        /// List Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetIncidentNotificationSubscribersAsync (string accept, string id);

        /// <summary>
        /// List Notification Subscribers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentNotificationSubscribersAsyncWithHttpInfo (string accept, string id);
        /// <summary>
        /// Get Outlier Incident
        /// </summary>
        /// <remarks>
        /// Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetOutlierIncidentAsync (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null);

        /// <summary>
        /// Get Outlier Incident
        /// </summary>
        /// <remarks>
        /// Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOutlierIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null);
        /// <summary>
        /// Get Past Incidents
        /// </summary>
        /// <remarks>
        /// Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPastIncidentsAsync (int? limit = null, bool? total = null);

        /// <summary>
        /// Get Past Incidents
        /// </summary>
        /// <remarks>
        /// Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPastIncidentsAsyncWithHttpInfo (int? limit = null, bool? total = null);
        /// <summary>
        /// Get Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetRelatedIncidentsAsync (string accept, string contentType, string authorization, string id, string additionalDetails = null);

        /// <summary>
        /// Get Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRelatedIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string additionalDetails = null);
        /// <summary>
        /// Get Incident&#x27;s Schema
        /// </summary>
        /// <remarks>
        /// Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSchemaForIncidentAsync (string id, string X_EARLY_ACCESS, string include = null);

        /// <summary>
        /// Get Incident&#x27;s Schema
        /// </summary>
        /// <remarks>
        /// Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSchemaForIncidentAsyncWithHttpInfo (string id, string X_EARLY_ACCESS, string include = null);
        /// <summary>
        /// List alerts for an incident
        /// </summary>
        /// <remarks>
        /// List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListIncidentAlertsAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null);

        /// <summary>
        /// List alerts for an incident
        /// </summary>
        /// <remarks>
        /// List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentAlertsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null);
        /// <summary>
        /// List log entries for an incident
        /// </summary>
        /// <remarks>
        /// List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListIncidentLogEntriesAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null);

        /// <summary>
        /// List log entries for an incident
        /// </summary>
        /// <remarks>
        /// List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentLogEntriesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null);
        /// <summary>
        /// List notes for an incident
        /// </summary>
        /// <remarks>
        /// List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListIncidentNotesAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List notes for an incident
        /// </summary>
        /// <remarks>
        /// List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentNotesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// List incidents
        /// </summary>
        /// <remarks>
        /// List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListIncidentsAsync (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null);

        /// <summary>
        /// List incidents
        /// </summary>
        /// <remarks>
        /// List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null);
        /// <summary>
        /// Merge incidents
        /// </summary>
        /// <remarks>
        /// Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MergeIncidentsAsync (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Merge incidents
        /// </summary>
        /// <remarks>
        /// Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service.
        /// </summary>
        /// <remarks>
        /// Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PutIncidentManualBusinessServiceAssociationAsync (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null);

        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service.
        /// </summary>
        /// <remarks>
        /// Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutIncidentManualBusinessServiceAssociationAsyncWithHttpInfo (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null);
        /// <summary>
        /// Remove Notification Subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveIncidentNotificationSubscribersAsync (string accept, string id, Object body = null);

        /// <summary>
        /// Remove Notification Subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveIncidentNotificationSubscribersAsyncWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Set Incident Field Values
        /// </summary>
        /// <remarks>
        /// Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetIncidentFieldValuesAsync (string id, Object body = null);

        /// <summary>
        /// Set Incident Field Values
        /// </summary>
        /// <remarks>
        /// Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetIncidentFieldValuesAsyncWithHttpInfo (string id, Object body = null);
        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateIncidentAsync (string accept, string contentType, string authorization, string from, string id, Object body = null);

        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null);
        /// <summary>
        /// Update an alert
        /// </summary>
        /// <remarks>
        /// Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateIncidentAlertAsync (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null);

        /// <summary>
        /// Update an alert
        /// </summary>
        /// <remarks>
        /// Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentAlertAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null);
        /// <summary>
        /// Manage alerts
        /// </summary>
        /// <remarks>
        /// Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateIncidentAlertsAsync (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null);

        /// <summary>
        /// Manage alerts
        /// </summary>
        /// <remarks>
        /// Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentAlertsAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null);
        /// <summary>
        /// Manage incidents
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateIncidentsAsync (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null);

        /// <summary>
        /// Manage incidents
        /// </summary>
        /// <remarks>
        /// Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class IncidentsApi : IIncidentsApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentsApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public IncidentsApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncidentsApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an Incident Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateIncident (string accept, string contentType, string authorization, string from, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateIncidentWithHttpInfo(accept, contentType, authorization, from, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Incident Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateIncidentWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncident");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncident");

            var localVarPath = "/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create an Incident Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateIncidentAsync (string accept, string contentType, string authorization, string from, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateIncidentAsyncWithHttpInfo(accept, contentType, authorization, from, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Incident Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncident");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncident");

            var localVarPath = "/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a note on an incident Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateIncidentNote (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateIncidentNoteWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a note on an incident Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateIncidentNoteWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentNote");

            var localVarPath = "/incidents/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a note on an incident Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateIncidentNoteAsync (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateIncidentNoteAsyncWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a note on an incident Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentNoteAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentNote");

            var localVarPath = "/incidents/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add Notification Subscribers Subscribe the given entities to Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateIncidentNotificationSubscribers (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateIncidentNotificationSubscribersWithHttpInfo(accept, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Notification Subscribers Subscribe the given entities to Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateIncidentNotificationSubscribersWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentNotificationSubscribers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentNotificationSubscribers");

            var localVarPath = "/incidents/{id}/status_updates/subscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentNotificationSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add Notification Subscribers Subscribe the given entities to Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateIncidentNotificationSubscribersAsync (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateIncidentNotificationSubscribersAsyncWithHttpInfo(accept, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Notification Subscribers Subscribe the given entities to Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentNotificationSubscribersAsyncWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentNotificationSubscribers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentNotificationSubscribers");

            var localVarPath = "/incidents/{id}/status_updates/subscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentNotificationSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a responder request for an incident Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateIncidentResponderRequest (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateIncidentResponderRequestWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a responder request for an incident Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateIncidentResponderRequestWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentResponderRequest");

            var localVarPath = "/incidents/{id}/responder_requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentResponderRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a responder request for an incident Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateIncidentResponderRequestAsync (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateIncidentResponderRequestAsyncWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a responder request for an incident Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentResponderRequestAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentResponderRequest");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentResponderRequest");

            var localVarPath = "/incidents/{id}/responder_requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentResponderRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Snooze an incident Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateIncidentSnooze (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateIncidentSnoozeWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snooze an incident Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateIncidentSnoozeWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentSnooze");

            var localVarPath = "/incidents/{id}/snooze";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentSnooze", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Snooze an incident Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateIncidentSnoozeAsync (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateIncidentSnoozeAsyncWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snooze an incident Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentSnoozeAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentSnooze");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentSnooze");

            var localVarPath = "/incidents/{id}/snooze";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentSnooze", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a status update on an incident Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateIncidentStatusUpdate (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateIncidentStatusUpdateWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a status update on an incident Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateIncidentStatusUpdateWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentStatusUpdate");

            var localVarPath = "/incidents/{id}/status_updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentStatusUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a status update on an incident Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateIncidentStatusUpdateAsync (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateIncidentStatusUpdateAsyncWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a status update on an incident Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncidentStatusUpdateAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->CreateIncidentStatusUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->CreateIncidentStatusUpdate");

            var localVarPath = "/incidents/{id}/status_updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncidentStatusUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an incident Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object GetIncident (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetIncidentWithHttpInfo(accept, contentType, authorization, id, X_EARLY_ACCESS, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an incident Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetIncidentWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetIncident");

            var localVarPath = "/incidents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an incident Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetIncidentAsync (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetIncidentAsyncWithHttpInfo(accept, contentType, authorization, id, X_EARLY_ACCESS, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an incident Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; The &#x60;include[]&#x3D;field_values&#x60; part of this endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncident");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetIncident");

            var localVarPath = "/incidents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an alert Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>Object</returns>
        public Object GetIncidentAlert (string accept, string contentType, string authorization, string id, string alertId)
        {
             ApiResponse<Object> localVarResponse = GetIncidentAlertWithHttpInfo(accept, contentType, authorization, id, alertId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an alert Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetIncidentAlertWithHttpInfo (string accept, string contentType, string authorization, string id, string alertId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'alertId' is set
            if (alertId == null)
                throw new ApiException(400, "Missing required parameter 'alertId' when calling IncidentsApi->GetIncidentAlert");

            var localVarPath = "/incidents/{id}/alerts/{alert_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alertId != null) localVarPathParams.Add("alert_id", this.Configuration.ApiClient.ParameterToString(alertId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an alert Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetIncidentAlertAsync (string accept, string contentType, string authorization, string id, string alertId)
        {
             ApiResponse<Object> localVarResponse = await GetIncidentAlertAsyncWithHttpInfo(accept, contentType, authorization, id, alertId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an alert Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentAlertAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string alertId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentAlert");
            // verify the required parameter 'alertId' is set
            if (alertId == null)
                throw new ApiException(400, "Missing required parameter 'alertId' when calling IncidentsApi->GetIncidentAlert");

            var localVarPath = "/incidents/{id}/alerts/{alert_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alertId != null) localVarPathParams.Add("alert_id", this.Configuration.ApiClient.ParameterToString(alertId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Incident Field Values Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>Object</returns>
        public Object GetIncidentFieldValues (string id, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = GetIncidentFieldValuesWithHttpInfo(id, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incident Field Values Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetIncidentFieldValuesWithHttpInfo (string id, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentFieldValues");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetIncidentFieldValues");

            var localVarPath = "/incidents/{id}/field_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentFieldValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Incident Field Values Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetIncidentFieldValuesAsync (string id, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = await GetIncidentFieldValuesAsyncWithHttpInfo(id, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Incident Field Values Get field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentFieldValuesAsyncWithHttpInfo (string id, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentFieldValues");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetIncidentFieldValues");

            var localVarPath = "/incidents/{id}/field_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentFieldValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Business Services impacted by the given Incident Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Object</returns>
        public Object GetIncidentImpactedBusinessServices (string accept, string id, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = GetIncidentImpactedBusinessServicesWithHttpInfo(accept, id, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Business Services impacted by the given Incident Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetIncidentImpactedBusinessServicesWithHttpInfo (string accept, string id, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncidentImpactedBusinessServices");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentImpactedBusinessServices");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetIncidentImpactedBusinessServices");

            var localVarPath = "/incidents/{id}/business_services/impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentImpactedBusinessServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Business Services impacted by the given Incident Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetIncidentImpactedBusinessServicesAsync (string accept, string id, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = await GetIncidentImpactedBusinessServicesAsyncWithHttpInfo(accept, id, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Business Services impacted by the given Incident Retrieve a list of Business Services that are being impacted by the given Incident.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentImpactedBusinessServicesAsyncWithHttpInfo (string accept, string id, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncidentImpactedBusinessServices");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentImpactedBusinessServices");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetIncidentImpactedBusinessServices");

            var localVarPath = "/incidents/{id}/business_services/impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentImpactedBusinessServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Notification Subscribers Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetIncidentNotificationSubscribers (string accept, string id)
        {
             ApiResponse<Object> localVarResponse = GetIncidentNotificationSubscribersWithHttpInfo(accept, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Notification Subscribers Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetIncidentNotificationSubscribersWithHttpInfo (string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncidentNotificationSubscribers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentNotificationSubscribers");

            var localVarPath = "/incidents/{id}/status_updates/subscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentNotificationSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Notification Subscribers Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetIncidentNotificationSubscribersAsync (string accept, string id)
        {
             ApiResponse<Object> localVarResponse = await GetIncidentNotificationSubscribersAsyncWithHttpInfo(accept, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Notification Subscribers Retrieve a list of Notification Subscribers on the Incident.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncidentNotificationSubscribersAsyncWithHttpInfo (string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetIncidentNotificationSubscribers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetIncidentNotificationSubscribers");

            var localVarPath = "/incidents/{id}/status_updates/subscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncidentNotificationSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Outlier Incident Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Object</returns>
        public Object GetOutlierIncident (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null)
        {
             ApiResponse<Object> localVarResponse = GetOutlierIncidentWithHttpInfo(accept, contentType, authorization, id, since, additionalDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Outlier Incident Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetOutlierIncidentWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetOutlierIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetOutlierIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetOutlierIncident");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetOutlierIncident");

            var localVarPath = "/incidents/{id}/outlier_incident";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (additionalDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_details[]", additionalDetails)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutlierIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Outlier Incident Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetOutlierIncidentAsync (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null)
        {
             ApiResponse<Object> localVarResponse = await GetOutlierIncidentAsyncWithHttpInfo(accept, contentType, authorization, id, since, additionalDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Outlier Incident Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOutlierIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, string additionalDetails = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetOutlierIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetOutlierIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetOutlierIncident");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetOutlierIncident");

            var localVarPath = "/incidents/{id}/outlier_incident";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (additionalDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_details[]", additionalDetails)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutlierIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Past Incidents Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object GetPastIncidents (int? limit = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = GetPastIncidentsWithHttpInfo(limit, total);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Past Incidents Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetPastIncidentsWithHttpInfo (int? limit = null, bool? total = null)
        {

            var localVarPath = "/incidents/{id}/past_incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPastIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Past Incidents Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPastIncidentsAsync (int? limit = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = await GetPastIncidentsAsyncWithHttpInfo(limit, total);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Past Incidents Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to be returned in the response. (optional, default to 5)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPastIncidentsAsyncWithHttpInfo (int? limit = null, bool? total = null)
        {

            var localVarPath = "/incidents/{id}/past_incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPastIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Related Incidents Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Object</returns>
        public Object GetRelatedIncidents (string accept, string contentType, string authorization, string id, string additionalDetails = null)
        {
             ApiResponse<Object> localVarResponse = GetRelatedIncidentsWithHttpInfo(accept, contentType, authorization, id, additionalDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Related Incidents Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetRelatedIncidentsWithHttpInfo (string accept, string contentType, string authorization, string id, string additionalDetails = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetRelatedIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetRelatedIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetRelatedIncidents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetRelatedIncidents");

            var localVarPath = "/incidents/{id}/related_incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (additionalDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_details[]", additionalDetails)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Related Incidents Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetRelatedIncidentsAsync (string accept, string contentType, string authorization, string id, string additionalDetails = null)
        {
             ApiResponse<Object> localVarResponse = await GetRelatedIncidentsAsyncWithHttpInfo(accept, contentType, authorization, id, additionalDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Related Incidents Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="additionalDetails">Array of additional attributes to any of the returned incidents for related incidents. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRelatedIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string additionalDetails = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->GetRelatedIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->GetRelatedIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->GetRelatedIncidents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetRelatedIncidents");

            var localVarPath = "/incidents/{id}/related_incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (additionalDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "additional_details[]", additionalDetails)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Incident&#x27;s Schema Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>Object</returns>
        public Object GetSchemaForIncident (string id, string X_EARLY_ACCESS, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetSchemaForIncidentWithHttpInfo(id, X_EARLY_ACCESS, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incident&#x27;s Schema Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetSchemaForIncidentWithHttpInfo (string id, string X_EARLY_ACCESS, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetSchemaForIncident");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetSchemaForIncident");

            var localVarPath = "/incidents/{id}/field_values/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaForIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Incident&#x27;s Schema Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSchemaForIncidentAsync (string id, string X_EARLY_ACCESS, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetSchemaForIncidentAsyncWithHttpInfo(id, X_EARLY_ACCESS, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Incident&#x27;s Schema Get detailed information about a Schema for an incident.  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. Including &#x60;field_options&#x60; will also include field options. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSchemaForIncidentAsyncWithHttpInfo (string id, string X_EARLY_ACCESS, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->GetSchemaForIncident");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->GetSchemaForIncident");

            var localVarPath = "/incidents/{id}/field_values/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaForIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List alerts for an incident List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object ListIncidentAlerts (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = ListIncidentAlertsWithHttpInfo(accept, contentType, authorization, id, limit, offset, total, alertKey, statuses, sortBy, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List alerts for an incident List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListIncidentAlertsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidentAlerts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidentAlerts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidentAlerts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->ListIncidentAlerts");

            var localVarPath = "/incidents/{id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (alertKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alert_key", alertKey)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses[]", statuses)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidentAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List alerts for an incident List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListIncidentAlertsAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = await ListIncidentAlertsAsyncWithHttpInfo(accept, contentType, authorization, id, limit, offset, total, alertKey, statuses, sortBy, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List alerts for an incident List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="alertKey">Alert de-duplication key. (optional)</param>
        /// <param name="statuses">Return only alerts with the given statuses. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentAlertsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string alertKey = null, string statuses = null, string sortBy = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidentAlerts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidentAlerts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidentAlerts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->ListIncidentAlerts");

            var localVarPath = "/incidents/{id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (alertKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alert_key", alertKey)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses[]", statuses)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidentAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List log entries for an incident List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        public Object ListIncidentLogEntries (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = ListIncidentLogEntriesWithHttpInfo(accept, contentType, authorization, id, limit, offset, total, timeZone, since, until, isOverview, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List log entries for an incident List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListIncidentLogEntriesWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidentLogEntries");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidentLogEntries");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidentLogEntries");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->ListIncidentLogEntries");

            var localVarPath = "/incidents/{id}/log_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (isOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_overview", isOverview)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidentLogEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List log entries for an incident List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListIncidentLogEntriesAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = await ListIncidentLogEntriesAsyncWithHttpInfo(accept, contentType, authorization, id, limit, offset, total, timeZone, since, until, isOverview, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List log entries for an incident List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="isOverview">If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentLogEntriesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string timeZone = null, DateTime? since = null, DateTime? until = null, bool? isOverview = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidentLogEntries");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidentLogEntries");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidentLogEntries");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->ListIncidentLogEntries");

            var localVarPath = "/incidents/{id}/log_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (isOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_overview", isOverview)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidentLogEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List notes for an incident List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object ListIncidentNotes (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = ListIncidentNotesWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List notes for an incident List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListIncidentNotesWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidentNotes");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidentNotes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidentNotes");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->ListIncidentNotes");

            var localVarPath = "/incidents/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidentNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List notes for an incident List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListIncidentNotesAsync (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await ListIncidentNotesAsyncWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List notes for an incident List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentNotesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidentNotes");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidentNotes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidentNotes");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->ListIncidentNotes");

            var localVarPath = "/incidents/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidentNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List incidents List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>Object</returns>
        public Object ListIncidents (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null)
        {
             ApiResponse<Object> localVarResponse = ListIncidentsWithHttpInfo(accept, contentType, authorization, limit, offset, total, dateRange, incidentKey, serviceIds, teamIds, userIds, urgencies, timeZone, statuses, sortBy, include, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List incidents List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListIncidentsWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidents");

            var localVarPath = "/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_range", dateRange)); // query parameter
            if (incidentKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incident_key", incidentKey)); // query parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "service_ids[]", serviceIds)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids[]", teamIds)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_ids[]", userIds)); // query parameter
            if (urgencies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "urgencies[]", urgencies)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses[]", statuses)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sort_by", sortBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List incidents List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListIncidentsAsync (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null)
        {
             ApiResponse<Object> localVarResponse = await ListIncidentsAsyncWithHttpInfo(accept, contentType, authorization, limit, offset, total, dateRange, incidentKey, serviceIds, teamIds, userIds, urgencies, timeZone, statuses, sortBy, include, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List incidents List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="dateRange">When set to all, the since and until parameters and defaults are ignored. (optional)</param>
        /// <param name="incidentKey">Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key. (optional)</param>
        /// <param name="serviceIds">Returns only the incidents associated with the passed service(s). This expects one or more service IDs. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="userIds">Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user. (optional)</param>
        /// <param name="urgencies">Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="statuses">Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.) (optional)</param>
        /// <param name="sortBy">Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string dateRange = null, string incidentKey = null, List<string> serviceIds = null, List<string> teamIds = null, List<string> userIds = null, string urgencies = null, string timeZone = null, string statuses = null, List<string> sortBy = null, string include = null, string since = null, string until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->ListIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->ListIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->ListIncidents");

            var localVarPath = "/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_range", dateRange)); // query parameter
            if (incidentKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incident_key", incidentKey)); // query parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "service_ids[]", serviceIds)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids[]", teamIds)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_ids[]", userIds)); // query parameter
            if (urgencies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "urgencies[]", urgencies)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses[]", statuses)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sort_by", sortBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Merge incidents Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object MergeIncidents (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = MergeIncidentsWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge incidents Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MergeIncidentsWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->MergeIncidents");

            var localVarPath = "/incidents/{id}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Merge incidents Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MergeIncidentsAsync (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await MergeIncidentsAsyncWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge incidents Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MergeIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->MergeIncidents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->MergeIncidents");

            var localVarPath = "/incidents/{id}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service. Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>Object</returns>
        public Object PutIncidentManualBusinessServiceAssociation (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = PutIncidentManualBusinessServiceAssociationWithHttpInfo(accept, X_EARLY_ACCESS, id, businessServiceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service. Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PutIncidentManualBusinessServiceAssociationWithHttpInfo (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");
            // verify the required parameter 'businessServiceId' is set
            if (businessServiceId == null)
                throw new ApiException(400, "Missing required parameter 'businessServiceId' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");

            var localVarPath = "/incidents/{id}/business_services/{business_service_id}/impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessServiceId != null) localVarPathParams.Add("business_service_id", this.Configuration.ApiClient.ParameterToString(businessServiceId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutIncidentManualBusinessServiceAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service. Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PutIncidentManualBusinessServiceAssociationAsync (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await PutIncidentManualBusinessServiceAssociationAsyncWithHttpInfo(accept, X_EARLY_ACCESS, id, businessServiceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manually change an Incident&#x27;s Impact on a Business Service. Change Impact of an Incident on a Business Service.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="businessServiceId">The business service ID.</param>
        /// <param name="body">The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident. The &#x60;not_impacted&#x60; relation will remove the Incident&#x27;s Impact from the specified Business Service. The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutIncidentManualBusinessServiceAssociationAsyncWithHttpInfo (string accept, string X_EARLY_ACCESS, string id, string businessServiceId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");
            // verify the required parameter 'businessServiceId' is set
            if (businessServiceId == null)
                throw new ApiException(400, "Missing required parameter 'businessServiceId' when calling IncidentsApi->PutIncidentManualBusinessServiceAssociation");

            var localVarPath = "/incidents/{id}/business_services/{business_service_id}/impacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessServiceId != null) localVarPathParams.Add("business_service_id", this.Configuration.ApiClient.ParameterToString(businessServiceId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutIncidentManualBusinessServiceAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Notification Subscriber Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>Object</returns>
        public Object RemoveIncidentNotificationSubscribers (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = RemoveIncidentNotificationSubscribersWithHttpInfo(accept, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Notification Subscriber Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RemoveIncidentNotificationSubscribersWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->RemoveIncidentNotificationSubscribers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->RemoveIncidentNotificationSubscribers");

            var localVarPath = "/incidents/{id}/status_updates/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveIncidentNotificationSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Notification Subscriber Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveIncidentNotificationSubscribersAsync (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await RemoveIncidentNotificationSubscribersAsyncWithHttpInfo(accept, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Notification Subscriber Unsubscribes the matching Subscribers from Incident Status Update Notifications.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveIncidentNotificationSubscribersAsyncWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->RemoveIncidentNotificationSubscribers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->RemoveIncidentNotificationSubscribers");

            var localVarPath = "/incidents/{id}/status_updates/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveIncidentNotificationSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Set Incident Field Values Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object SetIncidentFieldValues (string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = SetIncidentFieldValuesWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Incident Field Values Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SetIncidentFieldValuesWithHttpInfo (string id, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->SetIncidentFieldValues");

            var localVarPath = "/incidents/{id}/field_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetIncidentFieldValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Set Incident Field Values Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetIncidentFieldValuesAsync (string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await SetIncidentFieldValuesAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Incident Field Values Set field values for an incident  &lt;!- - theme: warning - -&gt;  &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetIncidentFieldValuesAsyncWithHttpInfo (string id, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->SetIncidentFieldValues");

            var localVarPath = "/incidents/{id}/field_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetIncidentFieldValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an incident Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateIncident (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateIncidentWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an incident Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateIncidentWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->UpdateIncident");

            var localVarPath = "/incidents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an incident Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateIncidentAsync (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateIncidentAsyncWithHttpInfo(accept, contentType, authorization, from, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an incident Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncident");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->UpdateIncident");

            var localVarPath = "/incidents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncident", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an alert Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateIncidentAlert (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateIncidentAlertWithHttpInfo(accept, contentType, authorization, from, id, alertId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an alert Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateIncidentAlertWithHttpInfo (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'alertId' is set
            if (alertId == null)
                throw new ApiException(400, "Missing required parameter 'alertId' when calling IncidentsApi->UpdateIncidentAlert");

            var localVarPath = "/incidents/{id}/alerts/{alert_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alertId != null) localVarPathParams.Add("alert_id", this.Configuration.ApiClient.ParameterToString(alertId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncidentAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an alert Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateIncidentAlertAsync (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateIncidentAlertAsyncWithHttpInfo(accept, contentType, authorization, from, id, alertId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an alert Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="alertId">The id of the alert to retrieve.</param>
        /// <param name="body">The parameters of the alert to update. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentAlertAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, string alertId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->UpdateIncidentAlert");
            // verify the required parameter 'alertId' is set
            if (alertId == null)
                throw new ApiException(400, "Missing required parameter 'alertId' when calling IncidentsApi->UpdateIncidentAlert");

            var localVarPath = "/incidents/{id}/alerts/{alert_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alertId != null) localVarPathParams.Add("alert_id", this.Configuration.ApiClient.ParameterToString(alertId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncidentAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Manage alerts Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object UpdateIncidentAlerts (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = UpdateIncidentAlertsWithHttpInfo(accept, contentType, authorization, from, id, body, limit, offset, total);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manage alerts Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateIncidentAlertsWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->UpdateIncidentAlerts");

            var localVarPath = "/incidents/{id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncidentAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Manage alerts Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateIncidentAlertsAsync (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateIncidentAlertsAsyncWithHttpInfo(accept, contentType, authorization, from, id, body, limit, offset, total);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manage alerts Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentAlertsAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, string id, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncidentAlerts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IncidentsApi->UpdateIncidentAlerts");

            var localVarPath = "/incidents/{id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncidentAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Manage incidents Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object UpdateIncidents (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = UpdateIncidentsWithHttpInfo(accept, contentType, authorization, from, body, limit, offset, total);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manage incidents Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateIncidentsWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncidents");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncidents");

            var localVarPath = "/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Manage incidents Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateIncidentsAsync (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateIncidentsAsyncWithHttpInfo(accept, contentType, authorization, from, body, limit, offset, total);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manage incidents Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  Note: the manage incidents API endpoint is rate limited to 500 requests per minute.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIncidentsAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null, int? limit = null, int? offset = null, bool? total = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling IncidentsApi->UpdateIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling IncidentsApi->UpdateIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling IncidentsApi->UpdateIncidents");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling IncidentsApi->UpdateIncidents");

            var localVarPath = "/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
