/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>Object</returns>
        Object CreateService (string accept, string contentType, string authorization, Object body = null);

        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateServiceWithHttpInfo (string accept, string contentType, string authorization, Object body = null);
        /// <summary>
        /// Create an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateServiceEventRule (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create a new integration
        /// </summary>
        /// <remarks>
        /// Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>Object</returns>
        Object CreateServiceIntegration (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a new integration
        /// </summary>
        /// <remarks>
        /// Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateServiceIntegrationWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        void DeleteService (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteServiceWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns></returns>
        void DeleteServiceEventRule (string accept, string contentType, string authorization, string id, string ruleId);

        /// <summary>
        /// Delete an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId);
        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object GetService (string accept, string contentType, string authorization, string id, string include = null);

        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null);
        /// <summary>
        /// Get an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Object</returns>
        Object GetServiceEventRule (string accept, string contentType, string authorization, string id, string ruleId);

        /// <summary>
        /// Get an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId);
        /// <summary>
        /// View an integration
        /// </summary>
        /// <remarks>
        /// Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object GetServiceIntegration (string accept, string contentType, string authorization, string id, string integrationId, string include = null);

        /// <summary>
        /// View an integration
        /// </summary>
        /// <remarks>
        /// Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceIntegrationWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, string include = null);
        /// <summary>
        /// List audit records for a service
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        AuditRecordResponseSchema ListServiceAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a service
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        ApiResponse<AuditRecordResponseSchema> ListServiceAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// List Service&#x27;s Event Rules
        /// </summary>
        /// <remarks>
        /// List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object ListServiceEventRules (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null);

        /// <summary>
        /// List Service&#x27;s Event Rules
        /// </summary>
        /// <remarks>
        /// List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListServiceEventRulesWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null);
        /// <summary>
        /// List services
        /// </summary>
        /// <remarks>
        /// List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object ListServices (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null);

        /// <summary>
        /// List services
        /// </summary>
        /// <remarks>
        /// List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListServicesWithHttpInfo (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null);
        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateService (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateServiceWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Update an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateServiceEventRule (string accept, string contentType, string authorization, string id, string ruleId, Object body = null);

        /// <summary>
        /// Update an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId, Object body = null);
        /// <summary>
        /// Update an existing integration
        /// </summary>
        /// <remarks>
        /// Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>Object</returns>
        Object UpdateServiceIntegration (string accept, string contentType, string authorization, string id, string integrationId, Object body = null);

        /// <summary>
        /// Update an existing integration
        /// </summary>
        /// <remarks>
        /// Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateServiceIntegrationWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, Object body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateServiceAsync (string accept, string contentType, string authorization, Object body = null);

        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null);
        /// <summary>
        /// Create an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateServiceEventRuleAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create a new integration
        /// </summary>
        /// <remarks>
        /// Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateServiceIntegrationAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a new integration
        /// </summary>
        /// <remarks>
        /// Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceIntegrationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteServiceAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteServiceEventRuleAsync (string accept, string contentType, string authorization, string id, string ruleId);

        /// <summary>
        /// Delete an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId);
        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceAsync (string accept, string contentType, string authorization, string id, string include = null);

        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null);
        /// <summary>
        /// Get an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceEventRuleAsync (string accept, string contentType, string authorization, string id, string ruleId);

        /// <summary>
        /// Get an Event Rule from a Service
        /// </summary>
        /// <remarks>
        /// Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId);
        /// <summary>
        /// View an integration
        /// </summary>
        /// <remarks>
        /// Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceIntegrationAsync (string accept, string contentType, string authorization, string id, string integrationId, string include = null);

        /// <summary>
        /// View an integration
        /// </summary>
        /// <remarks>
        /// Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceIntegrationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, string include = null);
        /// <summary>
        /// List audit records for a service
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        System.Threading.Tasks.Task<AuditRecordResponseSchema> ListServiceAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a service
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListServiceAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// List Service&#x27;s Event Rules
        /// </summary>
        /// <remarks>
        /// List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListServiceEventRulesAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null);

        /// <summary>
        /// List Service&#x27;s Event Rules
        /// </summary>
        /// <remarks>
        /// List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListServiceEventRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null);
        /// <summary>
        /// List services
        /// </summary>
        /// <remarks>
        /// List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListServicesAsync (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null);

        /// <summary>
        /// List services
        /// </summary>
        /// <remarks>
        /// List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListServicesAsyncWithHttpInfo (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null);
        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateServiceAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Update an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateServiceEventRuleAsync (string accept, string contentType, string authorization, string id, string ruleId, Object body = null);

        /// <summary>
        /// Update an Event Rule on a Service
        /// </summary>
        /// <remarks>
        /// Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId, Object body = null);
        /// <summary>
        /// Update an existing integration
        /// </summary>
        /// <remarks>
        /// Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateServiceIntegrationAsync (string accept, string contentType, string authorization, string id, string integrationId, Object body = null);

        /// <summary>
        /// Update an existing integration
        /// </summary>
        /// <remarks>
        /// Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceIntegrationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, Object body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ServicesApi : IServicesApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicesApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ServicesApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServicesApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a service Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>Object</returns>
        public Object CreateService (string accept, string contentType, string authorization, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateServiceWithHttpInfo(accept, contentType, authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a service Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateServiceWithHttpInfo (string accept, string contentType, string authorization, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->CreateService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->CreateService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->CreateService");

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a service Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateServiceAsync (string accept, string contentType, string authorization, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateServiceAsyncWithHttpInfo(accept, contentType, authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a service Create a new service.  If &#x60;status&#x60; is included in the request, it must have a value of &#x60;active&#x60; when creating a new service. If a different status is required, make a second request to update the service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 25,000 services per account. If the limit is reached, the API will respond with an error. There is also a limit of 100,000 open Incidents per Service. If the limit is reached and &#x60;auto_resolve_timeout&#x60; is disabled (set to 0 or null), the &#x60;auto_resolve_timeout&#x60; property will automatically be set to  84600 (1 day).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The service to be created (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->CreateService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->CreateService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->CreateService");

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create an Event Rule on a Service Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateServiceEventRule (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateServiceEventRuleWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Event Rule on a Service Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->CreateServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->CreateServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->CreateServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->CreateServiceEventRule");

            var localVarPath = "/services/{id}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create an Event Rule on a Service Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateServiceEventRuleAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateServiceEventRuleAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Event Rule on a Service Create a new Event Rule on a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->CreateServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->CreateServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->CreateServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->CreateServiceEventRule");

            var localVarPath = "/services/{id}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a new integration Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>Object</returns>
        public Object CreateServiceIntegration (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateServiceIntegrationWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new integration Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateServiceIntegrationWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->CreateServiceIntegration");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->CreateServiceIntegration");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->CreateServiceIntegration");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->CreateServiceIntegration");

            var localVarPath = "/services/{id}/integrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a new integration Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateServiceIntegrationAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateServiceIntegrationAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new integration Create a new integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The integration to be created (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceIntegrationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->CreateServiceIntegration");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->CreateServiceIntegration");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->CreateServiceIntegration");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->CreateServiceIntegration");

            var localVarPath = "/services/{id}/integrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a service Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        public void DeleteService (string accept, string contentType, string authorization, string id)
        {
             DeleteServiceWithHttpInfo(accept, contentType, authorization, id);
        }

        /// <summary>
        /// Delete a service Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteServiceWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->DeleteService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->DeleteService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->DeleteService");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->DeleteService");

            var localVarPath = "/services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a service Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteServiceAsync (string accept, string contentType, string authorization, string id)
        {
             await DeleteServiceAsyncWithHttpInfo(accept, contentType, authorization, id);

        }

        /// <summary>
        /// Delete a service Delete an existing service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#x27;t be able to be created for this service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->DeleteService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->DeleteService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->DeleteService");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->DeleteService");

            var localVarPath = "/services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an Event Rule from a Service Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns></returns>
        public void DeleteServiceEventRule (string accept, string contentType, string authorization, string id, string ruleId)
        {
             DeleteServiceEventRuleWithHttpInfo(accept, contentType, authorization, id, ruleId);
        }

        /// <summary>
        /// Delete an Event Rule from a Service Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling ServicesApi->DeleteServiceEventRule");

            var localVarPath = "/services/{id}/rules/{rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ruleId != null) localVarPathParams.Add("rule_id", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an Event Rule from a Service Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteServiceEventRuleAsync (string accept, string contentType, string authorization, string id, string ruleId)
        {
             await DeleteServiceEventRuleAsyncWithHttpInfo(accept, contentType, authorization, id, ruleId);

        }

        /// <summary>
        /// Delete an Event Rule from a Service Delete an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->DeleteServiceEventRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling ServicesApi->DeleteServiceEventRule");

            var localVarPath = "/services/{id}/rules/{rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ruleId != null) localVarPathParams.Add("rule_id", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a service Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object GetService (string accept, string contentType, string authorization, string id, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetServiceWithHttpInfo(accept, contentType, authorization, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a service Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetServiceWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->GetService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->GetService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->GetService");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetService");

            var localVarPath = "/services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a service Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceAsync (string accept, string contentType, string authorization, string id, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetServiceAsyncWithHttpInfo(accept, contentType, authorization, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a service Get details about an existing service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->GetService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->GetService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->GetService");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetService");

            var localVarPath = "/services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an Event Rule from a Service Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Object</returns>
        public Object GetServiceEventRule (string accept, string contentType, string authorization, string id, string ruleId)
        {
             ApiResponse<Object> localVarResponse = GetServiceEventRuleWithHttpInfo(accept, contentType, authorization, id, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Event Rule from a Service Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling ServicesApi->GetServiceEventRule");

            var localVarPath = "/services/{id}/rules/{rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ruleId != null) localVarPathParams.Add("rule_id", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an Event Rule from a Service Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceEventRuleAsync (string accept, string contentType, string authorization, string id, string ruleId)
        {
             ApiResponse<Object> localVarResponse = await GetServiceEventRuleAsyncWithHttpInfo(accept, contentType, authorization, id, ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Event Rule from a Service Get an Event Rule from a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetServiceEventRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling ServicesApi->GetServiceEventRule");

            var localVarPath = "/services/{id}/rules/{rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ruleId != null) localVarPathParams.Add("rule_id", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View an integration Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object GetServiceIntegration (string accept, string contentType, string authorization, string id, string integrationId, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetServiceIntegrationWithHttpInfo(accept, contentType, authorization, id, integrationId, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View an integration Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetServiceIntegrationWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling ServicesApi->GetServiceIntegration");

            var localVarPath = "/services/{id}/integrations/{integration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View an integration Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceIntegrationAsync (string accept, string contentType, string authorization, string id, string integrationId, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetServiceIntegrationAsyncWithHttpInfo(accept, contentType, authorization, id, integrationId, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View an integration Get details about an integration belonging to a service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceIntegrationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetServiceIntegration");
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling ServicesApi->GetServiceIntegration");

            var localVarPath = "/services/{id}/integrations/{integration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List audit records for a service The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        public AuditRecordResponseSchema ListServiceAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = ListServiceAuditRecordsWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audit records for a service The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        public ApiResponse< AuditRecordResponseSchema > ListServiceAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->ListServiceAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->ListServiceAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->ListServiceAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ListServiceAuditRecords");

            var localVarPath = "/services/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListServiceAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// List audit records for a service The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        public async System.Threading.Tasks.Task<AuditRecordResponseSchema> ListServiceAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = await ListServiceAuditRecordsAsyncWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audit records for a service The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListServiceAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->ListServiceAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->ListServiceAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->ListServiceAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ListServiceAuditRecords");

            var localVarPath = "/services/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListServiceAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// List Service&#x27;s Event Rules List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object ListServiceEventRules (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = ListServiceEventRulesWithHttpInfo(accept, contentType, authorization, id, limit, offset, total);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Service&#x27;s Event Rules List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListServiceEventRulesWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->ListServiceEventRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->ListServiceEventRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->ListServiceEventRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ListServiceEventRules");

            var localVarPath = "/services/{id}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListServiceEventRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Service&#x27;s Event Rules List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListServiceEventRulesAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null)
        {
             ApiResponse<Object> localVarResponse = await ListServiceEventRulesAsyncWithHttpInfo(accept, contentType, authorization, id, limit, offset, total);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Service&#x27;s Event Rules List Event Rules on a Service.  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListServiceEventRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->ListServiceEventRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->ListServiceEventRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->ListServiceEventRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ListServiceEventRules");

            var localVarPath = "/services/{id}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListServiceEventRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List services List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object ListServices (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = ListServicesWithHttpInfo(accept, contentType, authorization, query, limit, offset, total, teamIds, timeZone, sortBy, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List services List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListServicesWithHttpInfo (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->ListServices");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->ListServices");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->ListServices");

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids[]", teamIds)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List services List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListServicesAsync (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = await ListServicesAsyncWithHttpInfo(accept, contentType, authorization, query, limit, offset, total, teamIds, timeZone, sortBy, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List services List existing Services.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="sortBy">Used to specify the field you wish to sort the results on. (optional, default to name)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListServicesAsyncWithHttpInfo (string accept, string contentType, string authorization, string query = null, int? limit = null, int? offset = null, bool? total = null, List<string> teamIds = null, string timeZone = null, string sortBy = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->ListServices");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->ListServices");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->ListServices");

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids[]", teamIds)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a service Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateService (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateServiceWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a service Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateServiceWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->UpdateService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->UpdateService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->UpdateService");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateService");

            var localVarPath = "/services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a service Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateServiceAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateServiceAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a service Update an existing service.  A service may represent an application, component, or team you wish to open incidents against.  There is a limit of 100,000 open Incidents per Service. If the limit is reached and you disable &#x60;auto_resolve_timeout&#x60; (set to 0 or null), the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The service to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->UpdateService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->UpdateService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->UpdateService");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateService");

            var localVarPath = "/services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an Event Rule on a Service Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateServiceEventRule (string accept, string contentType, string authorization, string id, string ruleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateServiceEventRuleWithHttpInfo(accept, contentType, authorization, id, ruleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Event Rule on a Service Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateServiceEventRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling ServicesApi->UpdateServiceEventRule");

            var localVarPath = "/services/{id}/rules/{rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ruleId != null) localVarPathParams.Add("rule_id", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an Event Rule on a Service Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateServiceEventRuleAsync (string accept, string contentType, string authorization, string id, string ruleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateServiceEventRuleAsyncWithHttpInfo(accept, contentType, authorization, id, ruleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Event Rule on a Service Update an Event Rule on a Service. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="ruleId">The id of the Event Rule to retrieve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceEventRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string ruleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateServiceEventRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling ServicesApi->UpdateServiceEventRule");

            var localVarPath = "/services/{id}/rules/{rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ruleId != null) localVarPathParams.Add("rule_id", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServiceEventRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an existing integration Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateServiceIntegration (string accept, string contentType, string authorization, string id, string integrationId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateServiceIntegrationWithHttpInfo(accept, contentType, authorization, id, integrationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing integration Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateServiceIntegrationWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling ServicesApi->UpdateServiceIntegration");

            var localVarPath = "/services/{id}/integrations/{integration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServiceIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an existing integration Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateServiceIntegrationAsync (string accept, string contentType, string authorization, string id, string integrationId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateServiceIntegrationAsyncWithHttpInfo(accept, contentType, authorization, id, integrationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing integration Update an integration belonging to a Service.  A service may represent an application, component, or team you wish to open incidents against.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#services)  Scoped OAuth requires: &#x60;services.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="integrationId">The integration ID on the service.</param>
        /// <param name="body">The integration to be updated (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceIntegrationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string integrationId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateServiceIntegration");
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling ServicesApi->UpdateServiceIntegration");

            var localVarPath = "/services/{id}/integrations/{integration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServiceIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
