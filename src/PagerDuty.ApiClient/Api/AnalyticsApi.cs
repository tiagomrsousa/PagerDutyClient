/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get raw responses from a single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Object</returns>
        Object GetAnalyticsIncidentResponsesById (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);

        /// <summary>
        /// Get raw responses from a single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAnalyticsIncidentResponsesByIdWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);
        /// <summary>
        /// Get raw data - multiple incidents
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        Object GetAnalyticsIncidents (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null);

        /// <summary>
        /// Get raw data - multiple incidents
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAnalyticsIncidentsWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null);
        /// <summary>
        /// Get raw data - single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>AnalyticsRawIncident</returns>
        AnalyticsRawIncident GetAnalyticsIncidentsById (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);

        /// <summary>
        /// Get raw data - single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>ApiResponse of AnalyticsRawIncident</returns>
        ApiResponse<AnalyticsRawIncident> GetAnalyticsIncidentsByIdWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);
        /// <summary>
        /// Get aggregated incident data
        /// </summary>
        /// <remarks>
        /// Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        Object GetAnalyticsMetricsIncidentsAll (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);

        /// <summary>
        /// Get aggregated incident data
        /// </summary>
        /// <remarks>
        /// Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAnalyticsMetricsIncidentsAllWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);
        /// <summary>
        /// Get aggregated service data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        Object GetAnalyticsMetricsIncidentsService (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);

        /// <summary>
        /// Get aggregated service data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAnalyticsMetricsIncidentsServiceWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);
        /// <summary>
        /// Get aggregated team data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        Object GetAnalyticsMetricsIncidentsTeam (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);

        /// <summary>
        /// Get aggregated team data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAnalyticsMetricsIncidentsTeamWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get raw responses from a single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAnalyticsIncidentResponsesByIdAsync (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);

        /// <summary>
        /// Get raw responses from a single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsIncidentResponsesByIdAsyncWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);
        /// <summary>
        /// Get raw data - multiple incidents
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAnalyticsIncidentsAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null);

        /// <summary>
        /// Get raw data - multiple incidents
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsIncidentsAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null);
        /// <summary>
        /// Get raw data - single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of AnalyticsRawIncident</returns>
        System.Threading.Tasks.Task<AnalyticsRawIncident> GetAnalyticsIncidentsByIdAsync (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);

        /// <summary>
        /// Get raw data - single incident
        /// </summary>
        /// <remarks>
        /// Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of ApiResponse (AnalyticsRawIncident)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsRawIncident>> GetAnalyticsIncidentsByIdAsyncWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS);
        /// <summary>
        /// Get aggregated incident data
        /// </summary>
        /// <remarks>
        /// Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAnalyticsMetricsIncidentsAllAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);

        /// <summary>
        /// Get aggregated incident data
        /// </summary>
        /// <remarks>
        /// Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsMetricsIncidentsAllAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);
        /// <summary>
        /// Get aggregated service data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAnalyticsMetricsIncidentsServiceAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);

        /// <summary>
        /// Get aggregated service data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsMetricsIncidentsServiceAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);
        /// <summary>
        /// Get aggregated team data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAnalyticsMetricsIncidentsTeamAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);

        /// <summary>
        /// Get aggregated team data
        /// </summary>
        /// <remarks>
        /// Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsMetricsIncidentsTeamAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AnalyticsApi : IAnalyticsApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get raw responses from a single incident Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Object</returns>
        public Object GetAnalyticsIncidentResponsesById (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = GetAnalyticsIncidentResponsesByIdWithHttpInfo(id, accept, contentType, authorization, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw responses from a single incident Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAnalyticsIncidentResponsesByIdWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");

            var localVarPath = "/analytics/raw/incidents/{id}/responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsIncidentResponsesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get raw responses from a single incident Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAnalyticsIncidentResponsesByIdAsync (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
             ApiResponse<Object> localVarResponse = await GetAnalyticsIncidentResponsesByIdAsyncWithHttpInfo(id, accept, contentType, authorization, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw responses from a single incident Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below. &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsIncidentResponsesByIdAsyncWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsIncidentResponsesById");

            var localVarPath = "/analytics/raw/incidents/{id}/responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsIncidentResponsesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get raw data - multiple incidents Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        public Object GetAnalyticsIncidents (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null)
        {
             ApiResponse<Object> localVarResponse = GetAnalyticsIncidentsWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw data - multiple incidents Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAnalyticsIncidentsWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsIncidents");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsIncidents");

            var localVarPath = "/analytics/raw/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get raw data - multiple incidents Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAnalyticsIncidentsAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await GetAnalyticsIncidentsAsyncWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw data - multiple incidents Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsIncidentsAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, Object body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsIncidents");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsIncidents");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsIncidents");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsIncidents");

            var localVarPath = "/analytics/raw/incidents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsIncidents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get raw data - single incident Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>AnalyticsRawIncident</returns>
        public AnalyticsRawIncident GetAnalyticsIncidentsById (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
             ApiResponse<AnalyticsRawIncident> localVarResponse = GetAnalyticsIncidentsByIdWithHttpInfo(id, accept, contentType, authorization, X_EARLY_ACCESS);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw data - single incident Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>ApiResponse of AnalyticsRawIncident</returns>
        public ApiResponse< AnalyticsRawIncident > GetAnalyticsIncidentsByIdWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsIncidentsById");

            var localVarPath = "/analytics/raw/incidents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsIncidentsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyticsRawIncident>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsRawIncident) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsRawIncident)));
        }

        /// <summary>
        /// Get raw data - single incident Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of AnalyticsRawIncident</returns>
        public async System.Threading.Tasks.Task<AnalyticsRawIncident> GetAnalyticsIncidentsByIdAsync (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
             ApiResponse<AnalyticsRawIncident> localVarResponse = await GetAnalyticsIncidentsByIdAsyncWithHttpInfo(id, accept, contentType, authorization, X_EARLY_ACCESS);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw data - single incident Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics).  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <returns>Task of ApiResponse (AnalyticsRawIncident)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnalyticsRawIncident>> GetAnalyticsIncidentsByIdAsyncWithHttpInfo (string id, string accept, string contentType, string authorization, string X_EARLY_ACCESS)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsIncidentsById");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsIncidentsById");

            var localVarPath = "/analytics/raw/incidents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsIncidentsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyticsRawIncident>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnalyticsRawIncident) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyticsRawIncident)));
        }

        /// <summary>
        /// Get aggregated incident data Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        public Object GetAnalyticsMetricsIncidentsAll (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
             ApiResponse<Object> localVarResponse = GetAnalyticsMetricsIncidentsAllWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get aggregated incident data Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAnalyticsMetricsIncidentsAllWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");

            var localVarPath = "/analytics/metrics/incidents/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsMetricsIncidentsAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get aggregated incident data Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAnalyticsMetricsIncidentsAllAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
             ApiResponse<Object> localVarResponse = await GetAnalyticsMetricsIncidentsAllAsyncWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get aggregated incident data Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsMetricsIncidentsAllAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsAll");

            var localVarPath = "/analytics/metrics/incidents/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsMetricsIncidentsAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get aggregated service data Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        public Object GetAnalyticsMetricsIncidentsService (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
             ApiResponse<Object> localVarResponse = GetAnalyticsMetricsIncidentsServiceWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get aggregated service data Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAnalyticsMetricsIncidentsServiceWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");

            var localVarPath = "/analytics/metrics/incidents/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsMetricsIncidentsService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get aggregated service data Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAnalyticsMetricsIncidentsServiceAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
             ApiResponse<Object> localVarResponse = await GetAnalyticsMetricsIncidentsServiceAsyncWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get aggregated service data Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsMetricsIncidentsServiceAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsService");

            var localVarPath = "/analytics/metrics/incidents/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsMetricsIncidentsService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get aggregated team data Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Object</returns>
        public Object GetAnalyticsMetricsIncidentsTeam (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
             ApiResponse<Object> localVarResponse = GetAnalyticsMetricsIncidentsTeamWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get aggregated team data Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAnalyticsMetricsIncidentsTeamWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");

            var localVarPath = "/analytics/metrics/incidents/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsMetricsIncidentsTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get aggregated team data Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAnalyticsMetricsIncidentsTeamAsync (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
             ApiResponse<Object> localVarResponse = await GetAnalyticsMetricsIncidentsTeamAsyncWithHttpInfo(X_EARLY_ACCESS, accept, contentType, authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get aggregated team data Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Some metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/pagerduty-analytics). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#x27;range_start&#x27; timestamp.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it. &lt;!- - theme: info - -&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!- - theme: info - -&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time.  You __MUST__ pass in this header and the above value.  Do not use this endpoint in production, as it may change! </param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">Parameters and filters to apply to the dataset. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAnalyticsMetricsIncidentsTeamAsyncWithHttpInfo (string X_EARLY_ACCESS, string accept, string contentType, string authorization, AnalyticsModel body = null)
        {
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnalyticsApi->GetAnalyticsMetricsIncidentsTeam");

            var localVarPath = "/analytics/metrics/incidents/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalyticsMetricsIncidentsTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
