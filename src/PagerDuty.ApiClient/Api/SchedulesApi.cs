/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISchedulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a schedule
        /// </summary>
        /// <remarks>
        /// Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object CreateSchedule (string accept, string contentType, string authorization, Object body = null, bool? overflow = null);

        /// <summary>
        /// Create a schedule
        /// </summary>
        /// <remarks>
        /// Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateScheduleWithHttpInfo (string accept, string contentType, string authorization, Object body = null, bool? overflow = null);
        /// <summary>
        /// Create one or more overrides
        /// </summary>
        /// <remarks>
        /// Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> CreateScheduleOverride (Object body, string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Create one or more overrides
        /// </summary>
        /// <remarks>
        /// Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> CreateScheduleOverrideWithHttpInfo (Object body, string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Preview a schedule
        /// </summary>
        /// <remarks>
        /// Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object CreateSchedulePreview (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null);

        /// <summary>
        /// Preview a schedule
        /// </summary>
        /// <remarks>
        /// Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateSchedulePreviewWithHttpInfo (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null);
        /// <summary>
        /// Delete a schedule
        /// </summary>
        /// <remarks>
        /// Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        void DeleteSchedule (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete a schedule
        /// </summary>
        /// <remarks>
        /// Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduleWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete an override
        /// </summary>
        /// <remarks>
        /// Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns></returns>
        void DeleteScheduleOverride (string accept, string contentType, string authorization, string id, string overrideId);

        /// <summary>
        /// Delete an override
        /// </summary>
        /// <remarks>
        /// Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduleOverrideWithHttpInfo (string accept, string contentType, string authorization, string id, string overrideId);
        /// <summary>
        /// Get a schedule
        /// </summary>
        /// <remarks>
        /// Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>Object</returns>
        Object GetSchedule (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// Get a schedule
        /// </summary>
        /// <remarks>
        /// Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetScheduleWithHttpInfo (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// List overrides
        /// </summary>
        /// <remarks>
        /// List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>Object</returns>
        Object ListScheduleOverrides (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null);

        /// <summary>
        /// List overrides
        /// </summary>
        /// <remarks>
        /// List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListScheduleOverridesWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null);
        /// <summary>
        /// List users on call.
        /// </summary>
        /// <remarks>
        /// List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>Object</returns>
        Object ListScheduleUsers (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List users on call.
        /// </summary>
        /// <remarks>
        /// List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListScheduleUsersWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// List schedules
        /// </summary>
        /// <remarks>
        /// List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object ListSchedules (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null);

        /// <summary>
        /// List schedules
        /// </summary>
        /// <remarks>
        /// List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListSchedulesWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null);
        /// <summary>
        /// List audit records for a schedule
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        AuditRecordResponseSchema ListSchedulesAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a schedule
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        ApiResponse<AuditRecordResponseSchema> ListSchedulesAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// Update a schedule
        /// </summary>
        /// <remarks>
        /// Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Object</returns>
        Object UpdateSchedule (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null);

        /// <summary>
        /// Update a schedule
        /// </summary>
        /// <remarks>
        /// Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateScheduleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a schedule
        /// </summary>
        /// <remarks>
        /// Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateScheduleAsync (string accept, string contentType, string authorization, Object body = null, bool? overflow = null);

        /// <summary>
        /// Create a schedule
        /// </summary>
        /// <remarks>
        /// Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null, bool? overflow = null);
        /// <summary>
        /// Create one or more overrides
        /// </summary>
        /// <remarks>
        /// Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> CreateScheduleOverrideAsync (Object body, string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Create one or more overrides
        /// </summary>
        /// <remarks>
        /// Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> CreateScheduleOverrideAsyncWithHttpInfo (Object body, string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Preview a schedule
        /// </summary>
        /// <remarks>
        /// Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateSchedulePreviewAsync (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null);

        /// <summary>
        /// Preview a schedule
        /// </summary>
        /// <remarks>
        /// Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSchedulePreviewAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null);
        /// <summary>
        /// Delete a schedule
        /// </summary>
        /// <remarks>
        /// Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduleAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete a schedule
        /// </summary>
        /// <remarks>
        /// Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete an override
        /// </summary>
        /// <remarks>
        /// Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduleOverrideAsync (string accept, string contentType, string authorization, string id, string overrideId);

        /// <summary>
        /// Delete an override
        /// </summary>
        /// <remarks>
        /// Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleOverrideAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string overrideId);
        /// <summary>
        /// Get a schedule
        /// </summary>
        /// <remarks>
        /// Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetScheduleAsync (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// Get a schedule
        /// </summary>
        /// <remarks>
        /// Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// List overrides
        /// </summary>
        /// <remarks>
        /// List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListScheduleOverridesAsync (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null);

        /// <summary>
        /// List overrides
        /// </summary>
        /// <remarks>
        /// List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListScheduleOverridesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null);
        /// <summary>
        /// List users on call.
        /// </summary>
        /// <remarks>
        /// List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListScheduleUsersAsync (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List users on call.
        /// </summary>
        /// <remarks>
        /// List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListScheduleUsersAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// List schedules
        /// </summary>
        /// <remarks>
        /// List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListSchedulesAsync (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null);

        /// <summary>
        /// List schedules
        /// </summary>
        /// <remarks>
        /// List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListSchedulesAsyncWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null);
        /// <summary>
        /// List audit records for a schedule
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        System.Threading.Tasks.Task<AuditRecordResponseSchema> ListSchedulesAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a schedule
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListSchedulesAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// Update a schedule
        /// </summary>
        /// <remarks>
        /// Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateScheduleAsync (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null);

        /// <summary>
        /// Update a schedule
        /// </summary>
        /// <remarks>
        /// Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SchedulesApi : ISchedulesApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchedulesApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class
        /// </summary>
        /// <returns></returns>
        public SchedulesApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchedulesApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a schedule Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object CreateSchedule (string accept, string contentType, string authorization, Object body = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = CreateScheduleWithHttpInfo(accept, contentType, authorization, body, overflow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a schedule Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateScheduleWithHttpInfo (string accept, string contentType, string authorization, Object body = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->CreateSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->CreateSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->CreateSchedule");

            var localVarPath = "/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a schedule Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateScheduleAsync (string accept, string contentType, string authorization, Object body = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = await CreateScheduleAsyncWithHttpInfo(accept, contentType, authorization, body, overflow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a schedule Create a new on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules)  Scoped OAuth requires: &#x60;event_rules.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be created. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->CreateSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->CreateSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->CreateSchedule");

            var localVarPath = "/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create one or more overrides Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> CreateScheduleOverride (Object body, string accept, string contentType, string authorization, string id)
        {
             ApiResponse<List<Object>> localVarResponse = CreateScheduleOverrideWithHttpInfo(body, accept, contentType, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create one or more overrides Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > CreateScheduleOverrideWithHttpInfo (Object body, string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->CreateScheduleOverride");

            var localVarPath = "/schedules/{id}/overrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateScheduleOverride", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Create one or more overrides Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> CreateScheduleOverrideAsync (Object body, string accept, string contentType, string authorization, string id)
        {
             ApiResponse<List<Object>> localVarResponse = await CreateScheduleOverrideAsyncWithHttpInfo(body, accept, contentType, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create one or more overrides Create one or more overrides, each for a specific user covering a specified time range. If you create an override on top of an existing override, the last created override will have priority.  A Schedule determines the time periods that users are On-Call.  Note: An older implementation of this endpoint only supported creating a single ocverride per request. That functionality is still supported, but deprecated and may be removed in the future.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The overrides to be created</param>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> CreateScheduleOverrideAsyncWithHttpInfo (Object body, string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->CreateScheduleOverride");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->CreateScheduleOverride");

            var localVarPath = "/schedules/{id}/overrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateScheduleOverride", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Preview a schedule Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object CreateSchedulePreview (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = CreateSchedulePreviewWithHttpInfo(accept, contentType, authorization, body, since, until, overflow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preview a schedule Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateSchedulePreviewWithHttpInfo (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->CreateSchedulePreview");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->CreateSchedulePreview");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->CreateSchedulePreview");

            var localVarPath = "/schedules/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchedulePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Preview a schedule Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateSchedulePreviewAsync (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = await CreateSchedulePreviewAsyncWithHttpInfo(accept, contentType, authorization, body, since, until, overflow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preview a schedule Preview what an on-call schedule would look like without saving it.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The schedule to be previewed. (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSchedulePreviewAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null, DateTime? since = null, DateTime? until = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->CreateSchedulePreview");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->CreateSchedulePreview");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->CreateSchedulePreview");

            var localVarPath = "/schedules/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchedulePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a schedule Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        public void DeleteSchedule (string accept, string contentType, string authorization, string id)
        {
             DeleteScheduleWithHttpInfo(accept, contentType, authorization, id);
        }

        /// <summary>
        /// Delete a schedule Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduleWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->DeleteSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->DeleteSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->DeleteSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->DeleteSchedule");

            var localVarPath = "/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a schedule Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduleAsync (string accept, string contentType, string authorization, string id)
        {
             await DeleteScheduleAsyncWithHttpInfo(accept, contentType, authorization, id);

        }

        /// <summary>
        /// Delete a schedule Delete an on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->DeleteSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->DeleteSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->DeleteSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->DeleteSchedule");

            var localVarPath = "/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an override Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns></returns>
        public void DeleteScheduleOverride (string accept, string contentType, string authorization, string id, string overrideId)
        {
             DeleteScheduleOverrideWithHttpInfo(accept, contentType, authorization, id, overrideId);
        }

        /// <summary>
        /// Delete an override Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduleOverrideWithHttpInfo (string accept, string contentType, string authorization, string id, string overrideId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'overrideId' is set
            if (overrideId == null)
                throw new ApiException(400, "Missing required parameter 'overrideId' when calling SchedulesApi->DeleteScheduleOverride");

            var localVarPath = "/schedules/{id}/overrides/{override_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (overrideId != null) localVarPathParams.Add("override_id", this.Configuration.ApiClient.ParameterToString(overrideId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduleOverride", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an override Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduleOverrideAsync (string accept, string contentType, string authorization, string id, string overrideId)
        {
             await DeleteScheduleOverrideAsyncWithHttpInfo(accept, contentType, authorization, id, overrideId);

        }

        /// <summary>
        /// Delete an override Remove an override.  You cannot remove a past override.  If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time.  If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="overrideId">The override ID on the schedule.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleOverrideAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string overrideId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->DeleteScheduleOverride");
            // verify the required parameter 'overrideId' is set
            if (overrideId == null)
                throw new ApiException(400, "Missing required parameter 'overrideId' when calling SchedulesApi->DeleteScheduleOverride");

            var localVarPath = "/schedules/{id}/overrides/{override_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (overrideId != null) localVarPathParams.Add("override_id", this.Configuration.ApiClient.ParameterToString(overrideId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduleOverride", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a schedule Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>Object</returns>
        public Object GetSchedule (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<Object> localVarResponse = GetScheduleWithHttpInfo(accept, contentType, authorization, id, timeZone, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a schedule Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetScheduleWithHttpInfo (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->GetSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->GetSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->GetSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->GetSchedule");

            var localVarPath = "/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a schedule Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetScheduleAsync (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<Object> localVarResponse = await GetScheduleAsyncWithHttpInfo(accept, contentType, authorization, id, timeZone, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a schedule Show detailed information about a schedule, including entries for each layer and sub-schedule.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="timeZone">Time zone in which dates in the result will be rendered. (optional, default to UTC)</param>
        /// <param name="since">The start of the date range over which you want to show schedule entries. Defaults to 2 weeks before until if an until is given. (optional)</param>
        /// <param name="until">The end of the date range over which you want to show schedule entries. Defaults to 2 weeks after since if a since is given. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string timeZone = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->GetSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->GetSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->GetSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->GetSchedule");

            var localVarPath = "/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (timeZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_zone", timeZone)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List overrides List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>Object</returns>
        public Object ListScheduleOverrides (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = ListScheduleOverridesWithHttpInfo(accept, contentType, authorization, id, since, until, editable, overflow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List overrides List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListScheduleOverridesWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'since' is set
            if (since == null)
                throw new ApiException(400, "Missing required parameter 'since' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'until' is set
            if (until == null)
                throw new ApiException(400, "Missing required parameter 'until' when calling SchedulesApi->ListScheduleOverrides");

            var localVarPath = "/schedules/{id}/overrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (editable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "editable", editable)); // query parameter
            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScheduleOverrides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List overrides List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListScheduleOverridesAsync (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = await ListScheduleOverridesAsyncWithHttpInfo(accept, contentType, authorization, id, since, until, editable, overflow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List overrides List overrides for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search.</param>
        /// <param name="until">The end of the date range over which you want to search.</param>
        /// <param name="editable">When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow&#x3D;true is passed. This parameter defaults to false. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListScheduleOverridesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since, DateTime? until, bool? editable = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'since' is set
            if (since == null)
                throw new ApiException(400, "Missing required parameter 'since' when calling SchedulesApi->ListScheduleOverrides");
            // verify the required parameter 'until' is set
            if (until == null)
                throw new ApiException(400, "Missing required parameter 'until' when calling SchedulesApi->ListScheduleOverrides");

            var localVarPath = "/schedules/{id}/overrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (editable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "editable", editable)); // query parameter
            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScheduleOverrides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List users on call. List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>Object</returns>
        public Object ListScheduleUsers (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<Object> localVarResponse = ListScheduleUsersWithHttpInfo(accept, contentType, authorization, id, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users on call. List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListScheduleUsersWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListScheduleUsers");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListScheduleUsers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListScheduleUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->ListScheduleUsers");

            var localVarPath = "/schedules/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScheduleUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List users on call. List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListScheduleUsersAsync (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<Object> localVarResponse = await ListScheduleUsersAsyncWithHttpInfo(accept, contentType, authorization, id, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users on call. List all of the users on call in a given schedule for a given time range.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListScheduleUsersAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListScheduleUsers");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListScheduleUsers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListScheduleUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->ListScheduleUsers");

            var localVarPath = "/schedules/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScheduleUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List schedules List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object ListSchedules (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = ListSchedulesWithHttpInfo(accept, contentType, authorization, limit, offset, total, query, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List schedules List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListSchedulesWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListSchedules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListSchedules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListSchedules");

            var localVarPath = "/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List schedules List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListSchedulesAsync (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = await ListSchedulesAsyncWithHttpInfo(accept, contentType, authorization, limit, offset, total, query, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List schedules List the on-call schedules.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListSchedulesAsyncWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListSchedules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListSchedules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListSchedules");

            var localVarPath = "/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List audit records for a schedule The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        public AuditRecordResponseSchema ListSchedulesAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = ListSchedulesAuditRecordsWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audit records for a schedule The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        public ApiResponse< AuditRecordResponseSchema > ListSchedulesAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListSchedulesAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListSchedulesAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListSchedulesAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->ListSchedulesAuditRecords");

            var localVarPath = "/schedules/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchedulesAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// List audit records for a schedule The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        public async System.Threading.Tasks.Task<AuditRecordResponseSchema> ListSchedulesAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = await ListSchedulesAuditRecordsAsyncWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audit records for a schedule The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListSchedulesAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->ListSchedulesAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->ListSchedulesAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->ListSchedulesAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->ListSchedulesAuditRecords");

            var localVarPath = "/schedules/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchedulesAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// Update a schedule Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object UpdateSchedule (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = UpdateScheduleWithHttpInfo(accept, contentType, authorization, id, body, overflow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a schedule Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateScheduleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->UpdateSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->UpdateSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->UpdateSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->UpdateSchedule");

            var localVarPath = "/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a schedule Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateScheduleAsync (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateScheduleAsyncWithHttpInfo(accept, contentType, authorization, id, body, overflow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a schedule Update an existing on-call schedule.  A Schedule determines the time periods that users are On-Call.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#schedules) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The schedule to be updated. (optional)</param>
        /// <param name="overflow">Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter &#x60;overflow&#x3D;true&#x60; is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from &#x60;2011-06-01T10:00:00Z&#x60; to &#x60;2011-06-01T14:00:00Z&#x60;:   - If you don&#x27;t pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T10:00:00Z&#x60; and end of &#x60;2011-06-01T14:00:00Z&#x60;. - If you do pass the &#x60;overflow&#x3D;true&#x60; parameter, you will get one schedule entry returned with a start of &#x60;2011-06-01T00:00:00Z&#x60; and end of &#x60;2011-06-02T00:00:00Z&#x60;.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScheduleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null, bool? overflow = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling SchedulesApi->UpdateSchedule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SchedulesApi->UpdateSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SchedulesApi->UpdateSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchedulesApi->UpdateSchedule");

            var localVarPath = "/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (overflow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overflow", overflow)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
