/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>Object</returns>
        Object CreateUser (string accept, string contentType, string authorization, string from, Object body = null);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateUserWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null);
        /// <summary>
        /// Create a user contact method
        /// </summary>
        /// <remarks>
        /// Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>Object</returns>
        Object CreateUserContactMethod (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a user contact method
        /// </summary>
        /// <remarks>
        /// Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create a User Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>Object</returns>
        Object CreateUserHandoffNotificationRule (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a User Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateUserHandoffNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create a user notification rule
        /// </summary>
        /// <remarks>
        /// Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>Object</returns>
        Object CreateUserNotificationRule (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a user notification rule
        /// </summary>
        /// <remarks>
        /// Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create Notification Subcriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given User.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Object</returns>
        Object CreateUserNotificationSubscriptions (string accept, string id, Object body = null);

        /// <summary>
        /// Create Notification Subcriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given User.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateUserNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Create a user status update notification rule
        /// </summary>
        /// <remarks>
        /// Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>Object</returns>
        Object CreateUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null);

        /// <summary>
        /// Create a user status update notification rule
        /// </summary>
        /// <remarks>
        /// Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        void DeleteUser (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns></returns>
        void DeleteUserContactMethod (string accept, string contentType, string authorization, string id, string contactMethodId);

        /// <summary>
        /// Delete a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId);
        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule
        /// </summary>
        /// <remarks>
        /// Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns></returns>
        void DeleteUserHandoffNotificationRule (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);

        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule
        /// </summary>
        /// <remarks>
        /// Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserHandoffNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);
        /// <summary>
        /// Delete a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns></returns>
        void DeleteUserNotificationRule (string accept, string contentType, string authorization, string id, string notificationRuleId);

        /// <summary>
        /// Delete a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId);
        /// <summary>
        /// Delete a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns></returns>
        void DeleteUserSession (string accept, string contentType, string authorization, string id, string type, string sessionId);

        /// <summary>
        /// Delete a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserSessionWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId);
        /// <summary>
        /// Delete all user sessions
        /// </summary>
        /// <remarks>
        /// Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        void DeleteUserSessions (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete all user sessions
        /// </summary>
        /// <remarks>
        /// Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserSessionsWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns></returns>
        void DeleteUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId);

        /// <summary>
        /// Delete a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId);
        /// <summary>
        /// Get the current user
        /// </summary>
        /// <remarks>
        /// Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        Object GetCurrentUser (string accept, string contentType, string authorization, string include = null);

        /// <summary>
        /// Get the current user
        /// </summary>
        /// <remarks>
        /// Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetCurrentUserWithHttpInfo (string accept, string contentType, string authorization, string include = null);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        Object GetUser (string accept, string contentType, string authorization, string id, string include = null);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null);
        /// <summary>
        /// Get a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Object</returns>
        Object GetUserContactMethod (string accept, string contentType, string authorization, string id, string contactMethodId);

        /// <summary>
        /// Get a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId);
        /// <summary>
        /// List a user&#x27;s contact methods
        /// </summary>
        /// <remarks>
        /// List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetUserContactMethods (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List a user&#x27;s contact methods
        /// </summary>
        /// <remarks>
        /// List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserContactMethodsWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get a user&#x27;s handoff notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Object</returns>
        Object GetUserHandoffNotifiactionRule (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);

        /// <summary>
        /// Get a user&#x27;s handoff notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserHandoffNotifiactionRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);
        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules
        /// </summary>
        /// <remarks>
        /// List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetUserHandoffNotificationRules (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules
        /// </summary>
        /// <remarks>
        /// List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserHandoffNotificationRulesWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get the License allocated to a User
        /// </summary>
        /// <remarks>
        /// Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetUserLicense (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Get the License allocated to a User
        /// </summary>
        /// <remarks>
        /// Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserLicenseWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object GetUserNotificationRule (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null);

        /// <summary>
        /// Get a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null);
        /// <summary>
        /// List a user&#x27;s notification rules
        /// </summary>
        /// <remarks>
        /// List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>Object</returns>
        Object GetUserNotificationRules (string accept, string contentType, string authorization, string id, string include = null, string urgency = null);

        /// <summary>
        /// List a user&#x27;s notification rules
        /// </summary>
        /// <remarks>
        /// List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserNotificationRulesWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null, string urgency = null);
        /// <summary>
        /// List Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetUserNotificationSubscriptions (string accept, string id);

        /// <summary>
        /// List Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserNotificationSubscriptionsWithHttpInfo (string accept, string id);
        /// <summary>
        /// Get a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Object</returns>
        Object GetUserSession (string accept, string contentType, string authorization, string id, string type, string sessionId);

        /// <summary>
        /// Get a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserSessionWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId);
        /// <summary>
        /// List a user&#x27;s active sessions
        /// </summary>
        /// <remarks>
        /// List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetUserSessions (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List a user&#x27;s active sessions
        /// </summary>
        /// <remarks>
        /// List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserSessionsWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object GetUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null);

        /// <summary>
        /// Get a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null);
        /// <summary>
        /// List a user&#x27;s status update notification rules
        /// </summary>
        /// <remarks>
        /// List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        Object GetUserStatusUpdateNotificationRules (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);

        /// <summary>
        /// List a user&#x27;s status update notification rules
        /// </summary>
        /// <remarks>
        /// List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserStatusUpdateNotificationRulesWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        UserListResponse ListUsers (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<UserListResponse> ListUsersWithHttpInfo (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null);
        /// <summary>
        /// List audit records for a user
        /// </summary>
        /// <remarks>
        /// The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        AuditRecordResponseSchema ListUsersAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a user
        /// </summary>
        /// <remarks>
        /// The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        ApiResponse<AuditRecordResponseSchema> ListUsersAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// Remove Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Object</returns>
        Object UnsubscribeUserNotificationSubscriptions (string accept, string id, Object body = null);

        /// <summary>
        /// Remove Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UnsubscribeUserNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateUser (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateUserWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Update a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateUserContactMethod (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null);

        /// <summary>
        /// Update a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null);
        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateUserHandoffNotification (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null);

        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateUserHandoffNotificationWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null);
        /// <summary>
        /// Update a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateUserNotificationRule (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null);

        /// <summary>
        /// Update a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null);
        /// <summary>
        /// Update a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null);

        /// <summary>
        /// Update a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateUserAsync (string accept, string contentType, string authorization, string from, Object body = null);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null);
        /// <summary>
        /// Create a user contact method
        /// </summary>
        /// <remarks>
        /// Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateUserContactMethodAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a user contact method
        /// </summary>
        /// <remarks>
        /// Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create a User Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateUserHandoffNotificationRuleAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a User Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserHandoffNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create a user notification rule
        /// </summary>
        /// <remarks>
        /// Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Create a user notification rule
        /// </summary>
        /// <remarks>
        /// Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Create Notification Subcriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given User.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateUserNotificationSubscriptionsAsync (string accept, string id, Object body = null);

        /// <summary>
        /// Create Notification Subcriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given User.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Create a user status update notification rule
        /// </summary>
        /// <remarks>
        /// Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null);

        /// <summary>
        /// Create a user status update notification rule
        /// </summary>
        /// <remarks>
        /// Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserContactMethodAsync (string accept, string contentType, string authorization, string id, string contactMethodId);

        /// <summary>
        /// Delete a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId);
        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule
        /// </summary>
        /// <remarks>
        /// Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserHandoffNotificationRuleAsync (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);

        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule
        /// </summary>
        /// <remarks>
        /// Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserHandoffNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);
        /// <summary>
        /// Delete a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, string notificationRuleId);

        /// <summary>
        /// Delete a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId);
        /// <summary>
        /// Delete a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserSessionAsync (string accept, string contentType, string authorization, string id, string type, string sessionId);

        /// <summary>
        /// Delete a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSessionAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId);
        /// <summary>
        /// Delete all user sessions
        /// </summary>
        /// <remarks>
        /// Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserSessionsAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Delete all user sessions
        /// </summary>
        /// <remarks>
        /// Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSessionsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Delete a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId);

        /// <summary>
        /// Delete a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId);
        /// <summary>
        /// Get the current user
        /// </summary>
        /// <remarks>
        /// Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetCurrentUserAsync (string accept, string contentType, string authorization, string include = null);

        /// <summary>
        /// Get the current user
        /// </summary>
        /// <remarks>
        /// Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCurrentUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string include = null);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserAsync (string accept, string contentType, string authorization, string id, string include = null);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null);
        /// <summary>
        /// Get a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserContactMethodAsync (string accept, string contentType, string authorization, string id, string contactMethodId);

        /// <summary>
        /// Get a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId);
        /// <summary>
        /// List a user&#x27;s contact methods
        /// </summary>
        /// <remarks>
        /// List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserContactMethodsAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List a user&#x27;s contact methods
        /// </summary>
        /// <remarks>
        /// List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserContactMethodsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get a user&#x27;s handoff notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserHandoffNotifiactionRuleAsync (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);

        /// <summary>
        /// Get a user&#x27;s handoff notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserHandoffNotifiactionRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId);
        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules
        /// </summary>
        /// <remarks>
        /// List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserHandoffNotificationRulesAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules
        /// </summary>
        /// <remarks>
        /// List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserHandoffNotificationRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get the License allocated to a User
        /// </summary>
        /// <remarks>
        /// Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserLicenseAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// Get the License allocated to a User
        /// </summary>
        /// <remarks>
        /// Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserLicenseAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null);

        /// <summary>
        /// Get a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null);
        /// <summary>
        /// List a user&#x27;s notification rules
        /// </summary>
        /// <remarks>
        /// List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserNotificationRulesAsync (string accept, string contentType, string authorization, string id, string include = null, string urgency = null);

        /// <summary>
        /// List a user&#x27;s notification rules
        /// </summary>
        /// <remarks>
        /// List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserNotificationRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null, string urgency = null);
        /// <summary>
        /// List Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserNotificationSubscriptionsAsync (string accept, string id);

        /// <summary>
        /// List Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id);
        /// <summary>
        /// Get a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserSessionAsync (string accept, string contentType, string authorization, string id, string type, string sessionId);

        /// <summary>
        /// Get a user&#x27;s session
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserSessionAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId);
        /// <summary>
        /// List a user&#x27;s active sessions
        /// </summary>
        /// <remarks>
        /// List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserSessionsAsync (string accept, string contentType, string authorization, string id);

        /// <summary>
        /// List a user&#x27;s active sessions
        /// </summary>
        /// <remarks>
        /// List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserSessionsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id);
        /// <summary>
        /// Get a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null);

        /// <summary>
        /// Get a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null);
        /// <summary>
        /// List a user&#x27;s status update notification rules
        /// </summary>
        /// <remarks>
        /// List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserStatusUpdateNotificationRulesAsync (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);

        /// <summary>
        /// List a user&#x27;s status update notification rules
        /// </summary>
        /// <remarks>
        /// List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserStatusUpdateNotificationRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListUsersAsync (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListUsersAsyncWithHttpInfo (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null);
        /// <summary>
        /// List audit records for a user
        /// </summary>
        /// <remarks>
        /// The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        System.Threading.Tasks.Task<AuditRecordResponseSchema> ListUsersAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a user
        /// </summary>
        /// <remarks>
        /// The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListUsersAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// Remove Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UnsubscribeUserNotificationSubscriptionsAsync (string accept, string id, Object body = null);

        /// <summary>
        /// Remove Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnsubscribeUserNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateUserAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Update a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateUserContactMethodAsync (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null);

        /// <summary>
        /// Update a user&#x27;s contact method
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null);
        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateUserHandoffNotificationAsync (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null);

        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule
        /// </summary>
        /// <remarks>
        /// Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserHandoffNotificationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null);
        /// <summary>
        /// Update a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null);

        /// <summary>
        /// Update a user&#x27;s notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null);
        /// <summary>
        /// Update a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null);

        /// <summary>
        /// Update a user&#x27;s status update notification rule
        /// </summary>
        /// <remarks>
        /// Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a user Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateUser (string accept, string contentType, string authorization, string from, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateUserWithHttpInfo(accept, contentType, authorization, from, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateUserWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUser");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling UsersApi->CreateUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateUserAsync (string accept, string contentType, string authorization, string from, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateUserAsyncWithHttpInfo(accept, contentType, authorization, from, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="from">The email address of a valid user associated with the account making the request.</param>
        /// <param name="body">The user to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string from, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUser");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling UsersApi->CreateUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (from != null) localVarHeaderParams.AddOrUpdate("From", this.Configuration.ApiClient.ParameterToString(from)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user contact method Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateUserContactMethod (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateUserContactMethodWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user contact method Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user contact method Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateUserContactMethodAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateUserContactMethodAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user contact method Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The contact method to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a User Handoff Notification Rule Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateUserHandoffNotificationRule (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateUserHandoffNotificationRuleWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User Handoff Notification Rule Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateUserHandoffNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserHandoffNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserHandoffNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserHandoffNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserHandoffNotificationRule");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserHandoffNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a User Handoff Notification Rule Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateUserHandoffNotificationRuleAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateUserHandoffNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a User Handoff Notification Rule Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The Handoff Notification Rule to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserHandoffNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserHandoffNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserHandoffNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserHandoffNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserHandoffNotificationRule");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserHandoffNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user notification rule Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateUserNotificationRule (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateUserNotificationRuleWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user notification rule Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user notification rule Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateUserNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user notification rule Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The notification rule to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Notification Subcriptions Create new Notification Subscriptions for the given User.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateUserNotificationSubscriptions (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateUserNotificationSubscriptionsWithHttpInfo(accept, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Notification Subcriptions Create new Notification Subscriptions for the given User.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateUserNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserNotificationSubscriptions");

            var localVarPath = "/users/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Notification Subcriptions Create new Notification Subscriptions for the given User.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateUserNotificationSubscriptionsAsync (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateUserNotificationSubscriptionsAsyncWithHttpInfo(accept, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Notification Subcriptions Create new Notification Subscriptions for the given User.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserNotificationSubscriptions");

            var localVarPath = "/users/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user status update notification rule Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateUserStatusUpdateNotificationRuleWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user status update notification rule Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a user status update notification rule Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateUserStatusUpdateNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user status update notification rule Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The status update notification rule to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->CreateUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->CreateUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a user Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        public void DeleteUser (string accept, string contentType, string authorization, string id)
        {
             DeleteUserWithHttpInfo(accept, contentType, authorization, id);
        }

        /// <summary>
        /// Delete a user Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string accept, string contentType, string authorization, string id)
        {
             await DeleteUserAsyncWithHttpInfo(accept, contentType, authorization, id);

        }

        /// <summary>
        /// Delete a user Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s contact method Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns></returns>
        public void DeleteUserContactMethod (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
             DeleteUserContactMethodWithHttpInfo(accept, contentType, authorization, id, contactMethodId);
        }

        /// <summary>
        /// Delete a user&#x27;s contact method Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'contactMethodId' is set
            if (contactMethodId == null)
                throw new ApiException(400, "Missing required parameter 'contactMethodId' when calling UsersApi->DeleteUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods/{contact_method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactMethodId != null) localVarPathParams.Add("contact_method_id", this.Configuration.ApiClient.ParameterToString(contactMethodId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s contact method Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserContactMethodAsync (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
             await DeleteUserContactMethodAsyncWithHttpInfo(accept, contentType, authorization, id, contactMethodId);

        }

        /// <summary>
        /// Delete a user&#x27;s contact method Remove a user&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserContactMethod");
            // verify the required parameter 'contactMethodId' is set
            if (contactMethodId == null)
                throw new ApiException(400, "Missing required parameter 'contactMethodId' when calling UsersApi->DeleteUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods/{contact_method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactMethodId != null) localVarPathParams.Add("contact_method_id", this.Configuration.ApiClient.ParameterToString(contactMethodId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns></returns>
        public void DeleteUserHandoffNotificationRule (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
             DeleteUserHandoffNotificationRuleWithHttpInfo(accept, contentType, authorization, id, oncallHandoffNotificationRuleId);
        }

        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserHandoffNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'oncallHandoffNotificationRuleId' is set
            if (oncallHandoffNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'oncallHandoffNotificationRuleId' when calling UsersApi->DeleteUserHandoffNotificationRule");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oncallHandoffNotificationRuleId != null) localVarPathParams.Add("oncall_handoff_notification_rule_id", this.Configuration.ApiClient.ParameterToString(oncallHandoffNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserHandoffNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserHandoffNotificationRuleAsync (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
             await DeleteUserHandoffNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, id, oncallHandoffNotificationRuleId);

        }

        /// <summary>
        /// Delete a User&#x27;s Handoff Notification rule Remove a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserHandoffNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserHandoffNotificationRule");
            // verify the required parameter 'oncallHandoffNotificationRuleId' is set
            if (oncallHandoffNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'oncallHandoffNotificationRuleId' when calling UsersApi->DeleteUserHandoffNotificationRule");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oncallHandoffNotificationRuleId != null) localVarPathParams.Add("oncall_handoff_notification_rule_id", this.Configuration.ApiClient.ParameterToString(oncallHandoffNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserHandoffNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s notification rule Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns></returns>
        public void DeleteUserNotificationRule (string accept, string contentType, string authorization, string id, string notificationRuleId)
        {
             DeleteUserNotificationRuleWithHttpInfo(accept, contentType, authorization, id, notificationRuleId);
        }

        /// <summary>
        /// Delete a user&#x27;s notification rule Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'notificationRuleId' is set
            if (notificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'notificationRuleId' when calling UsersApi->DeleteUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules/{notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationRuleId != null) localVarPathParams.Add("notification_rule_id", this.Configuration.ApiClient.ParameterToString(notificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s notification rule Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, string notificationRuleId)
        {
             await DeleteUserNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, id, notificationRuleId);

        }

        /// <summary>
        /// Delete a user&#x27;s notification rule Remove a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserNotificationRule");
            // verify the required parameter 'notificationRuleId' is set
            if (notificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'notificationRuleId' when calling UsersApi->DeleteUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules/{notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationRuleId != null) localVarPathParams.Add("notification_rule_id", this.Configuration.ApiClient.ParameterToString(notificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s session Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns></returns>
        public void DeleteUserSession (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
             DeleteUserSessionWithHttpInfo(accept, contentType, authorization, id, type, sessionId);
        }

        /// <summary>
        /// Delete a user&#x27;s session Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserSessionWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling UsersApi->DeleteUserSession");

            var localVarPath = "/users/{id}/sessions/{type}/{session_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (sessionId != null) localVarPathParams.Add("session_id", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s session Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserSessionAsync (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
             await DeleteUserSessionAsyncWithHttpInfo(accept, contentType, authorization, id, type, sessionId);

        }

        /// <summary>
        /// Delete a user&#x27;s session Delete a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSessionAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling UsersApi->DeleteUserSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling UsersApi->DeleteUserSession");

            var localVarPath = "/users/{id}/sessions/{type}/{session_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (sessionId != null) localVarPathParams.Add("session_id", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all user sessions Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns></returns>
        public void DeleteUserSessions (string accept, string contentType, string authorization, string id)
        {
             DeleteUserSessionsWithHttpInfo(accept, contentType, authorization, id);
        }

        /// <summary>
        /// Delete all user sessions Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserSessionsWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserSessions");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserSessions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserSessions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserSessions");

            var localVarPath = "/users/{id}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all user sessions Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserSessionsAsync (string accept, string contentType, string authorization, string id)
        {
             await DeleteUserSessionsAsyncWithHttpInfo(accept, contentType, authorization, id);

        }

        /// <summary>
        /// Delete all user sessions Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSessionsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserSessions");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserSessions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserSessions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserSessions");

            var localVarPath = "/users/{id}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s status update notification rule Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns></returns>
        public void DeleteUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId)
        {
             DeleteUserStatusUpdateNotificationRuleWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, statusUpdateNotificationRuleId);
        }

        /// <summary>
        /// Delete a user&#x27;s status update notification rule Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'statusUpdateNotificationRuleId' is set
            if (statusUpdateNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateNotificationRuleId' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusUpdateNotificationRuleId != null) localVarPathParams.Add("status_update_notification_rule_id", this.Configuration.ApiClient.ParameterToString(statusUpdateNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user&#x27;s status update notification rule Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId)
        {
             await DeleteUserStatusUpdateNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, statusUpdateNotificationRuleId);

        }

        /// <summary>
        /// Delete a user&#x27;s status update notification rule Remove a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");
            // verify the required parameter 'statusUpdateNotificationRuleId' is set
            if (statusUpdateNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateNotificationRuleId' when calling UsersApi->DeleteUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusUpdateNotificationRuleId != null) localVarPathParams.Add("status_update_notification_rule_id", this.Configuration.ApiClient.ParameterToString(statusUpdateNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the current user Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        public Object GetCurrentUser (string accept, string contentType, string authorization, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetCurrentUserWithHttpInfo(accept, contentType, authorization, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current user Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetCurrentUserWithHttpInfo (string accept, string contentType, string authorization, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetCurrentUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetCurrentUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetCurrentUser");

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the current user Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetCurrentUserAsync (string accept, string contentType, string authorization, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetCurrentUserAsyncWithHttpInfo(accept, contentType, authorization, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current user Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCurrentUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetCurrentUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetCurrentUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetCurrentUser");

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        public Object GetUser (string accept, string contentType, string authorization, string id, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetUserWithHttpInfo(accept, contentType, authorization, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserAsync (string accept, string contentType, string authorization, string id, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetUserAsyncWithHttpInfo(accept, contentType, authorization, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s contact method Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Object</returns>
        public Object GetUserContactMethod (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
             ApiResponse<Object> localVarResponse = GetUserContactMethodWithHttpInfo(accept, contentType, authorization, id, contactMethodId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#x27;s contact method Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'contactMethodId' is set
            if (contactMethodId == null)
                throw new ApiException(400, "Missing required parameter 'contactMethodId' when calling UsersApi->GetUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods/{contact_method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactMethodId != null) localVarPathParams.Add("contact_method_id", this.Configuration.ApiClient.ParameterToString(contactMethodId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s contact method Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserContactMethodAsync (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
             ApiResponse<Object> localVarResponse = await GetUserContactMethodAsyncWithHttpInfo(accept, contentType, authorization, id, contactMethodId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#x27;s contact method Get details about a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserContactMethod");
            // verify the required parameter 'contactMethodId' is set
            if (contactMethodId == null)
                throw new ApiException(400, "Missing required parameter 'contactMethodId' when calling UsersApi->GetUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods/{contact_method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactMethodId != null) localVarPathParams.Add("contact_method_id", this.Configuration.ApiClient.ParameterToString(contactMethodId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s contact methods List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetUserContactMethods (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = GetUserContactMethodsWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#x27;s contact methods List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserContactMethodsWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserContactMethods");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserContactMethods");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserContactMethods");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserContactMethods");

            var localVarPath = "/users/{id}/contact_methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserContactMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s contact methods List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserContactMethodsAsync (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await GetUserContactMethodsAsyncWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a user&#x27;s contact methods List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserContactMethodsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserContactMethods");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserContactMethods");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserContactMethods");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserContactMethods");

            var localVarPath = "/users/{id}/contact_methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserContactMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s handoff notification rule Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Object</returns>
        public Object GetUserHandoffNotifiactionRule (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
             ApiResponse<Object> localVarResponse = GetUserHandoffNotifiactionRuleWithHttpInfo(accept, contentType, authorization, id, oncallHandoffNotificationRuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#x27;s handoff notification rule Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserHandoffNotifiactionRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'oncallHandoffNotificationRuleId' is set
            if (oncallHandoffNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'oncallHandoffNotificationRuleId' when calling UsersApi->GetUserHandoffNotifiactionRule");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oncallHandoffNotificationRuleId != null) localVarPathParams.Add("oncall_handoff_notification_rule_id", this.Configuration.ApiClient.ParameterToString(oncallHandoffNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserHandoffNotifiactionRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s handoff notification rule Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserHandoffNotifiactionRuleAsync (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
             ApiResponse<Object> localVarResponse = await GetUserHandoffNotifiactionRuleAsyncWithHttpInfo(accept, contentType, authorization, id, oncallHandoffNotificationRuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#x27;s handoff notification rule Get details about a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserHandoffNotifiactionRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserHandoffNotifiactionRule");
            // verify the required parameter 'oncallHandoffNotificationRuleId' is set
            if (oncallHandoffNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'oncallHandoffNotificationRuleId' when calling UsersApi->GetUserHandoffNotifiactionRule");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oncallHandoffNotificationRuleId != null) localVarPathParams.Add("oncall_handoff_notification_rule_id", this.Configuration.ApiClient.ParameterToString(oncallHandoffNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserHandoffNotifiactionRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetUserHandoffNotificationRules (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = GetUserHandoffNotificationRulesWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserHandoffNotificationRulesWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserHandoffNotificationRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserHandoffNotificationRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserHandoffNotificationRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserHandoffNotificationRules");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserHandoffNotificationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserHandoffNotificationRulesAsync (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await GetUserHandoffNotificationRulesAsyncWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a User&#x27;s Handoff Notification Rules List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserHandoffNotificationRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserHandoffNotificationRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserHandoffNotificationRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserHandoffNotificationRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserHandoffNotificationRules");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserHandoffNotificationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the License allocated to a User Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetUserLicense (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = GetUserLicenseWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the License allocated to a User Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserLicenseWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserLicense");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserLicense");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserLicense");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserLicense");

            var localVarPath = "/users/{id}/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the License allocated to a User Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserLicenseAsync (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await GetUserLicenseAsyncWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the License allocated to a User Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserLicenseAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserLicense");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserLicense");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserLicense");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserLicense");

            var localVarPath = "/users/{id}/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s notification rule Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object GetUserNotificationRule (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetUserNotificationRuleWithHttpInfo(accept, contentType, authorization, id, notificationRuleId, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#x27;s notification rule Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'notificationRuleId' is set
            if (notificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'notificationRuleId' when calling UsersApi->GetUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules/{notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationRuleId != null) localVarPathParams.Add("notification_rule_id", this.Configuration.ApiClient.ParameterToString(notificationRuleId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s notification rule Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetUserNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, id, notificationRuleId, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#x27;s notification rule Get details about a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserNotificationRule");
            // verify the required parameter 'notificationRuleId' is set
            if (notificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'notificationRuleId' when calling UsersApi->GetUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules/{notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationRuleId != null) localVarPathParams.Add("notification_rule_id", this.Configuration.ApiClient.ParameterToString(notificationRuleId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s notification rules List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>Object</returns>
        public Object GetUserNotificationRules (string accept, string contentType, string authorization, string id, string include = null, string urgency = null)
        {
             ApiResponse<Object> localVarResponse = GetUserNotificationRulesWithHttpInfo(accept, contentType, authorization, id, include, urgency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#x27;s notification rules List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserNotificationRulesWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null, string urgency = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserNotificationRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserNotificationRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserNotificationRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserNotificationRules");

            var localVarPath = "/users/{id}/notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (urgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "urgency", urgency)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserNotificationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s notification rules List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserNotificationRulesAsync (string accept, string contentType, string authorization, string id, string include = null, string urgency = null)
        {
             ApiResponse<Object> localVarResponse = await GetUserNotificationRulesAsyncWithHttpInfo(accept, contentType, authorization, id, include, urgency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a user&#x27;s notification rules List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <param name="urgency">The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserNotificationRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null, string urgency = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserNotificationRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserNotificationRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserNotificationRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserNotificationRules");

            var localVarPath = "/users/{id}/notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (urgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "urgency", urgency)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserNotificationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Notification Subscriptions Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetUserNotificationSubscriptions (string accept, string id)
        {
             ApiResponse<Object> localVarResponse = GetUserNotificationSubscriptionsWithHttpInfo(accept, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Notification Subscriptions Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserNotificationSubscriptionsWithHttpInfo (string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserNotificationSubscriptions");

            var localVarPath = "/users/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Notification Subscriptions Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserNotificationSubscriptionsAsync (string accept, string id)
        {
             ApiResponse<Object> localVarResponse = await GetUserNotificationSubscriptionsAsyncWithHttpInfo(accept, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Notification Subscriptions Retrieve a list of Notification Subscriptions the given User has.  &lt;!- - theme: warning - -&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserNotificationSubscriptions");

            var localVarPath = "/users/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s session Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Object</returns>
        public Object GetUserSession (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
             ApiResponse<Object> localVarResponse = GetUserSessionWithHttpInfo(accept, contentType, authorization, id, type, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#x27;s session Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserSessionWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserSession");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserSession");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserSession");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserSession");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling UsersApi->GetUserSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling UsersApi->GetUserSession");

            var localVarPath = "/users/{id}/sessions/{type}/{session_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (sessionId != null) localVarPathParams.Add("session_id", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s session Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserSessionAsync (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
             ApiResponse<Object> localVarResponse = await GetUserSessionAsyncWithHttpInfo(accept, contentType, authorization, id, type, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#x27;s session Get details about a user&#x27;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The session type for the user session ID.</param>
        /// <param name="sessionId">The session ID for the user.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserSessionAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string type, string sessionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserSession");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserSession");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserSession");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserSession");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling UsersApi->GetUserSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling UsersApi->GetUserSession");

            var localVarPath = "/users/{id}/sessions/{type}/{session_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (sessionId != null) localVarPathParams.Add("session_id", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s active sessions List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetUserSessions (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = GetUserSessionsWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#x27;s active sessions List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserSessionsWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserSessions");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserSessions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserSessions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserSessions");

            var localVarPath = "/users/{id}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s active sessions List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserSessionsAsync (string accept, string contentType, string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await GetUserSessionsAsyncWithHttpInfo(accept, contentType, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a user&#x27;s active sessions List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserSessionsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserSessions");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserSessions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserSessions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserSessions");

            var localVarPath = "/users/{id}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s status update notification rule Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object GetUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetUserStatusUpdateNotificationRuleWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, statusUpdateNotificationRuleId, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#x27;s status update notification rule Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'statusUpdateNotificationRuleId' is set
            if (statusUpdateNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateNotificationRuleId' when calling UsersApi->GetUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusUpdateNotificationRuleId != null) localVarPathParams.Add("status_update_notification_rule_id", this.Configuration.ApiClient.ParameterToString(statusUpdateNotificationRuleId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a user&#x27;s status update notification rule Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetUserStatusUpdateNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, statusUpdateNotificationRuleId, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#x27;s status update notification rule Get details about a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserStatusUpdateNotificationRule");
            // verify the required parameter 'statusUpdateNotificationRuleId' is set
            if (statusUpdateNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateNotificationRuleId' when calling UsersApi->GetUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusUpdateNotificationRuleId != null) localVarPathParams.Add("status_update_notification_rule_id", this.Configuration.ApiClient.ParameterToString(statusUpdateNotificationRuleId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s status update notification rules List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Object</returns>
        public Object GetUserStatusUpdateNotificationRules (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetUserStatusUpdateNotificationRulesWithHttpInfo(accept, contentType, authorization, id, X_EARLY_ACCESS, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#x27;s status update notification rules List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetUserStatusUpdateNotificationRulesWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->GetUserStatusUpdateNotificationRules");

            var localVarPath = "/users/{id}/status_update_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserStatusUpdateNotificationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List a user&#x27;s status update notification rules List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserStatusUpdateNotificationRulesAsync (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetUserStatusUpdateNotificationRulesAsyncWithHttpInfo(accept, contentType, authorization, id, X_EARLY_ACCESS, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a user&#x27;s status update notification rules List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="include">Array of additional details to include. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserStatusUpdateNotificationRulesAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string X_EARLY_ACCESS, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserStatusUpdateNotificationRules");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->GetUserStatusUpdateNotificationRules");

            var localVarPath = "/users/{id}/status_update_notification_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserStatusUpdateNotificationRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List users List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        public UserListResponse ListUsers (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
             ApiResponse<UserListResponse> localVarResponse = ListUsersWithHttpInfo(accept, contentType, authorization, query, teamIds, limit, offset, total, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<UserListResponse> ListUsersWithHttpInfo (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ListUsers");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->ListUsers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->ListUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids[]", teamIds)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserListResponse)));
        }

        /// <summary>
        /// List users List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListUsersAsync (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = await ListUsersAsyncWithHttpInfo(accept, contentType, authorization, query, teamIds, limit, offset, total, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <param name="teamIds">An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListUsersAsyncWithHttpInfo (string accept, string contentType, string authorization, string query = null, List<string> teamIds = null, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ListUsers");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->ListUsers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->ListUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids[]", teamIds)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List audit records for a user The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        public AuditRecordResponseSchema ListUsersAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = ListUsersAuditRecordsWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audit records for a user The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        public ApiResponse< AuditRecordResponseSchema > ListUsersAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ListUsersAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->ListUsersAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->ListUsersAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ListUsersAuditRecords");

            var localVarPath = "/users/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsersAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// List audit records for a user The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        public async System.Threading.Tasks.Task<AuditRecordResponseSchema> ListUsersAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = await ListUsersAuditRecordsAsyncWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audit records for a user The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListUsersAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ListUsersAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->ListUsersAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->ListUsersAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ListUsersAuditRecords");

            var localVarPath = "/users/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsersAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// Remove Notification Subscriptions Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Object</returns>
        public Object UnsubscribeUserNotificationSubscriptions (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UnsubscribeUserNotificationSubscriptionsWithHttpInfo(accept, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Notification Subscriptions Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UnsubscribeUserNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UnsubscribeUserNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UnsubscribeUserNotificationSubscriptions");

            var localVarPath = "/users/{id}/notification_subscriptions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeUserNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Notification Subscriptions Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UnsubscribeUserNotificationSubscriptionsAsync (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UnsubscribeUserNotificationSubscriptionsAsyncWithHttpInfo(accept, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Notification Subscriptions Unsubscribe the given User from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnsubscribeUserNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UnsubscribeUserNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UnsubscribeUserNotificationSubscriptions");

            var localVarPath = "/users/{id}/notification_subscriptions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeUserNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateUser (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateUserWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateUserWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateUserAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateUserAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The user to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user&#x27;s contact method Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateUserContactMethod (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateUserContactMethodWithHttpInfo(accept, contentType, authorization, id, contactMethodId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#x27;s contact method Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateUserContactMethodWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'contactMethodId' is set
            if (contactMethodId == null)
                throw new ApiException(400, "Missing required parameter 'contactMethodId' when calling UsersApi->UpdateUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods/{contact_method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactMethodId != null) localVarPathParams.Add("contact_method_id", this.Configuration.ApiClient.ParameterToString(contactMethodId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user&#x27;s contact method Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateUserContactMethodAsync (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateUserContactMethodAsyncWithHttpInfo(accept, contentType, authorization, id, contactMethodId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#x27;s contact method Update a User&#x27;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="contactMethodId">The contact method ID on the user.</param>
        /// <param name="body">The user&#x27;s contact method to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserContactMethodAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string contactMethodId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserContactMethod");
            // verify the required parameter 'contactMethodId' is set
            if (contactMethodId == null)
                throw new ApiException(400, "Missing required parameter 'contactMethodId' when calling UsersApi->UpdateUserContactMethod");

            var localVarPath = "/users/{id}/contact_methods/{contact_method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactMethodId != null) localVarPathParams.Add("contact_method_id", this.Configuration.ApiClient.ParameterToString(contactMethodId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserContactMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateUserHandoffNotification (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateUserHandoffNotificationWithHttpInfo(accept, contentType, authorization, id, oncallHandoffNotificationRuleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateUserHandoffNotificationWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'oncallHandoffNotificationRuleId' is set
            if (oncallHandoffNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'oncallHandoffNotificationRuleId' when calling UsersApi->UpdateUserHandoffNotification");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oncallHandoffNotificationRuleId != null) localVarPathParams.Add("oncall_handoff_notification_rule_id", this.Configuration.ApiClient.ParameterToString(oncallHandoffNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserHandoffNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateUserHandoffNotificationAsync (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateUserHandoffNotificationAsyncWithHttpInfo(accept, contentType, authorization, id, oncallHandoffNotificationRuleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a User&#x27;s Handoff Notification Rule Update a User&#x27;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="oncallHandoffNotificationRuleId">The oncall handoff notification rule ID on the user.</param>
        /// <param name="body">The User&#x27;s Handoff Notification Rule to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserHandoffNotificationAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string oncallHandoffNotificationRuleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserHandoffNotification");
            // verify the required parameter 'oncallHandoffNotificationRuleId' is set
            if (oncallHandoffNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'oncallHandoffNotificationRuleId' when calling UsersApi->UpdateUserHandoffNotification");

            var localVarPath = "/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oncallHandoffNotificationRuleId != null) localVarPathParams.Add("oncall_handoff_notification_rule_id", this.Configuration.ApiClient.ParameterToString(oncallHandoffNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserHandoffNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user&#x27;s notification rule Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateUserNotificationRule (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateUserNotificationRuleWithHttpInfo(accept, contentType, authorization, id, notificationRuleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#x27;s notification rule Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateUserNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'notificationRuleId' is set
            if (notificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'notificationRuleId' when calling UsersApi->UpdateUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules/{notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationRuleId != null) localVarPathParams.Add("notification_rule_id", this.Configuration.ApiClient.ParameterToString(notificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user&#x27;s notification rule Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateUserNotificationRuleAsync (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateUserNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, id, notificationRuleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#x27;s notification rule Update a user&#x27;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="notificationRuleId">The notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s notification rule to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string notificationRuleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserNotificationRule");
            // verify the required parameter 'notificationRuleId' is set
            if (notificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'notificationRuleId' when calling UsersApi->UpdateUserNotificationRule");

            var localVarPath = "/users/{id}/notification_rules/{notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationRuleId != null) localVarPathParams.Add("notification_rule_id", this.Configuration.ApiClient.ParameterToString(notificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user&#x27;s status update notification rule Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateUserStatusUpdateNotificationRule (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateUserStatusUpdateNotificationRuleWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, statusUpdateNotificationRuleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#x27;s status update notification rule Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateUserStatusUpdateNotificationRuleWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'statusUpdateNotificationRuleId' is set
            if (statusUpdateNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateNotificationRuleId' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusUpdateNotificationRuleId != null) localVarPathParams.Add("status_update_notification_rule_id", this.Configuration.ApiClient.ParameterToString(statusUpdateNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a user&#x27;s status update notification rule Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateUserStatusUpdateNotificationRuleAsync (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateUserStatusUpdateNotificationRuleAsyncWithHttpInfo(accept, contentType, authorization, X_EARLY_ACCESS, id, statusUpdateNotificationRuleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#x27;s status update notification rule Update a user&#x27;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!- - theme: warning - -&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="X_EARLY_ACCESS">This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! </param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="statusUpdateNotificationRuleId">The status update notification rule ID on the user.</param>
        /// <param name="body">The user&#x27;s status update notification rule to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserStatusUpdateNotificationRuleAsyncWithHttpInfo (string accept, string contentType, string authorization, string X_EARLY_ACCESS, string id, string statusUpdateNotificationRuleId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'X_EARLY_ACCESS' is set
            if (X_EARLY_ACCESS == null)
                throw new ApiException(400, "Missing required parameter 'X_EARLY_ACCESS' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");
            // verify the required parameter 'statusUpdateNotificationRuleId' is set
            if (statusUpdateNotificationRuleId == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateNotificationRuleId' when calling UsersApi->UpdateUserStatusUpdateNotificationRule");

            var localVarPath = "/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusUpdateNotificationRuleId != null) localVarPathParams.Add("status_update_notification_rule_id", this.Configuration.ApiClient.ParameterToString(statusUpdateNotificationRuleId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_EARLY_ACCESS != null) localVarHeaderParams.AddOrUpdate("X-EARLY-ACCESS", this.Configuration.ApiClient.ParameterToString(X_EARLY_ACCESS)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserStatusUpdateNotificationRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
