/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;
using PagerDuty.ApiClient.Model;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITeamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>Object</returns>
        Object CreateTeam (string accept, string contentType, string authorization, Object body = null);

        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateTeamWithHttpInfo (string accept, string contentType, string authorization, Object body = null);
        /// <summary>
        /// Create Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given Team.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Object</returns>
        Object CreateTeamNotificationSubscriptions (string accept, string id, Object body = null);

        /// <summary>
        /// Create Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given Team.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateTeamNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns></returns>
        void DeleteTeam (string accept, string contentType, string authorization, string id, string reassignmentTeam = null);

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeamWithHttpInfo (string accept, string contentType, string authorization, string id, string reassignmentTeam = null);
        /// <summary>
        /// Remove an escalation policy from a team
        /// </summary>
        /// <remarks>
        /// Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns></returns>
        void DeleteTeamEscalationPolicy (string accept, string contentType, string authorization, string id, string escalationPolicyId);

        /// <summary>
        /// Remove an escalation policy from a team
        /// </summary>
        /// <remarks>
        /// Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeamEscalationPolicyWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId);
        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns></returns>
        void DeleteTeamUser (string accept, string contentType, string authorization, string id, string userId);

        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeamUserWithHttpInfo (string accept, string contentType, string authorization, string id, string userId);
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        Object GetTeam (string accept, string contentType, string authorization, string id, string include = null);

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTeamWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null);
        /// <summary>
        /// List Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        Object GetTeamNotificationSubscriptions (string accept, string id);

        /// <summary>
        /// List Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTeamNotificationSubscriptionsWithHttpInfo (string accept, string id);
        /// <summary>
        /// List members of a team
        /// </summary>
        /// <remarks>
        /// Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        Object ListTeamUsers (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null);

        /// <summary>
        /// List members of a team
        /// </summary>
        /// <remarks>
        /// Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListTeamUsersWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null);
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>Object</returns>
        Object ListTeams (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null);

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListTeamsWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null);
        /// <summary>
        /// List audit records for a team
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        AuditRecordResponseSchema ListTeamsAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a team
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        ApiResponse<AuditRecordResponseSchema> ListTeamsAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Object</returns>
        Object RemoveTeamNotificationSubscriptions (string accept, string id, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveTeamNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateTeam (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateTeamWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Add an escalation policy to a team
        /// </summary>
        /// <remarks>
        /// Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns></returns>
        void UpdateTeamEscalationPolicy (string accept, string contentType, string authorization, string id, string escalationPolicyId);

        /// <summary>
        /// Add an escalation policy to a team
        /// </summary>
        /// <remarks>
        /// Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTeamEscalationPolicyWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId);
        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns></returns>
        void UpdateTeamUser (string accept, string contentType, string authorization, string id, string userId, Object body = null);

        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTeamUserWithHttpInfo (string accept, string contentType, string authorization, string id, string userId, Object body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateTeamAsync (string accept, string contentType, string authorization, Object body = null);

        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null);
        /// <summary>
        /// Create Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given Team.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateTeamNotificationSubscriptionsAsync (string accept, string id, Object body = null);

        /// <summary>
        /// Create Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Create new Notification Subscriptions for the given Team.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTeamNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeamAsync (string accept, string contentType, string authorization, string id, string reassignmentTeam = null);

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string reassignmentTeam = null);
        /// <summary>
        /// Remove an escalation policy from a team
        /// </summary>
        /// <remarks>
        /// Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeamEscalationPolicyAsync (string accept, string contentType, string authorization, string id, string escalationPolicyId);

        /// <summary>
        /// Remove an escalation policy from a team
        /// </summary>
        /// <remarks>
        /// Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamEscalationPolicyAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId);
        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeamUserAsync (string accept, string contentType, string authorization, string id, string userId);

        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string userId);
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTeamAsync (string accept, string contentType, string authorization, string id, string include = null);

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null);
        /// <summary>
        /// List Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTeamNotificationSubscriptionsAsync (string accept, string id);

        /// <summary>
        /// List Team Notification Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTeamNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id);
        /// <summary>
        /// List members of a team
        /// </summary>
        /// <remarks>
        /// Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListTeamUsersAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null);

        /// <summary>
        /// List members of a team
        /// </summary>
        /// <remarks>
        /// Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListTeamUsersAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null);
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListTeamsAsync (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null);

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListTeamsAsyncWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null);
        /// <summary>
        /// List audit records for a team
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        System.Threading.Tasks.Task<AuditRecordResponseSchema> ListTeamsAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);

        /// <summary>
        /// List audit records for a team
        /// </summary>
        /// <remarks>
        /// The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListTeamsAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveTeamNotificationSubscriptionsAsync (string accept, string id, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTeamNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateTeamAsync (string accept, string contentType, string authorization, string id, Object body = null);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null);
        /// <summary>
        /// Add an escalation policy to a team
        /// </summary>
        /// <remarks>
        /// Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTeamEscalationPolicyAsync (string accept, string contentType, string authorization, string id, string escalationPolicyId);

        /// <summary>
        /// Add an escalation policy to a team
        /// </summary>
        /// <remarks>
        /// Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTeamEscalationPolicyAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId);
        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTeamUserAsync (string accept, string contentType, string authorization, string id, string userId, Object body = null);

        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTeamUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string userId, Object body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TeamsApi : ITeamsApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TeamsApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a team Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateTeam (string accept, string contentType, string authorization, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateTeamWithHttpInfo(accept, contentType, authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a team Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateTeamWithHttpInfo (string accept, string contentType, string authorization, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->CreateTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->CreateTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->CreateTeam");

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a team Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateTeamAsync (string accept, string contentType, string authorization, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateTeamAsyncWithHttpInfo(accept, contentType, authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a team Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="body">The team to be created. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->CreateTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->CreateTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->CreateTeam");

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Team Notification Subscriptions Create new Notification Subscriptions for the given Team.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateTeamNotificationSubscriptions (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = CreateTeamNotificationSubscriptionsWithHttpInfo(accept, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Team Notification Subscriptions Create new Notification Subscriptions for the given Team.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateTeamNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->CreateTeamNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->CreateTeamNotificationSubscriptions");

            var localVarPath = "/teams/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeamNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Team Notification Subscriptions Create new Notification Subscriptions for the given Team.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateTeamNotificationSubscriptionsAsync (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateTeamNotificationSubscriptionsAsyncWithHttpInfo(accept, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Team Notification Subscriptions Create new Notification Subscriptions for the given Team.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to subscribe to. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTeamNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->CreateTeamNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->CreateTeamNotificationSubscriptions");

            var localVarPath = "/teams/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeamNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a team Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns></returns>
        public void DeleteTeam (string accept, string contentType, string authorization, string id, string reassignmentTeam = null)
        {
             DeleteTeamWithHttpInfo(accept, contentType, authorization, id, reassignmentTeam);
        }

        /// <summary>
        /// Delete a team Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeamWithHttpInfo (string accept, string contentType, string authorization, string id, string reassignmentTeam = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeam");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reassignmentTeam != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reassignment_team", reassignmentTeam)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a team Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeamAsync (string accept, string contentType, string authorization, string id, string reassignmentTeam = null)
        {
             await DeleteTeamAsyncWithHttpInfo(accept, contentType, authorization, id, reassignmentTeam);

        }

        /// <summary>
        /// Delete a team Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="reassignmentTeam">Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string reassignmentTeam = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeam");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reassignmentTeam != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reassignment_team", reassignmentTeam)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an escalation policy from a team Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns></returns>
        public void DeleteTeamEscalationPolicy (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
             DeleteTeamEscalationPolicyWithHttpInfo(accept, contentType, authorization, id, escalationPolicyId);
        }

        /// <summary>
        /// Remove an escalation policy from a team Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeamEscalationPolicyWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'escalationPolicyId' is set
            if (escalationPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'escalationPolicyId' when calling TeamsApi->DeleteTeamEscalationPolicy");

            var localVarPath = "/teams/{id}/escalation_policies/{escalation_policy_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (escalationPolicyId != null) localVarPathParams.Add("escalation_policy_id", this.Configuration.ApiClient.ParameterToString(escalationPolicyId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeamEscalationPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an escalation policy from a team Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeamEscalationPolicyAsync (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
             await DeleteTeamEscalationPolicyAsyncWithHttpInfo(accept, contentType, authorization, id, escalationPolicyId);

        }

        /// <summary>
        /// Remove an escalation policy from a team Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamEscalationPolicyAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeamEscalationPolicy");
            // verify the required parameter 'escalationPolicyId' is set
            if (escalationPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'escalationPolicyId' when calling TeamsApi->DeleteTeamEscalationPolicy");

            var localVarPath = "/teams/{id}/escalation_policies/{escalation_policy_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (escalationPolicyId != null) localVarPathParams.Add("escalation_policy_id", this.Configuration.ApiClient.ParameterToString(escalationPolicyId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeamEscalationPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a user from a team Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns></returns>
        public void DeleteTeamUser (string accept, string contentType, string authorization, string id, string userId)
        {
             DeleteTeamUserWithHttpInfo(accept, contentType, authorization, id, userId);
        }

        /// <summary>
        /// Remove a user from a team Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeamUserWithHttpInfo (string accept, string contentType, string authorization, string id, string userId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->DeleteTeamUser");

            var localVarPath = "/teams/{id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeamUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a user from a team Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeamUserAsync (string accept, string contentType, string authorization, string id, string userId)
        {
             await DeleteTeamUserAsyncWithHttpInfo(accept, contentType, authorization, id, userId);

        }

        /// <summary>
        /// Remove a user from a team Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string userId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeamUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->DeleteTeamUser");

            var localVarPath = "/teams/{id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeamUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a team Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        public Object GetTeam (string accept, string contentType, string authorization, string id, string include = null)
        {
             ApiResponse<Object> localVarResponse = GetTeamWithHttpInfo(accept, contentType, authorization, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetTeamWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->GetTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->GetTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->GetTeam");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeam");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a team Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTeamAsync (string accept, string contentType, string authorization, string id, string include = null)
        {
             ApiResponse<Object> localVarResponse = await GetTeamAsyncWithHttpInfo(accept, contentType, authorization, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->GetTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->GetTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->GetTeam");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeam");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Team Notification Subscriptions Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Object</returns>
        public Object GetTeamNotificationSubscriptions (string accept, string id)
        {
             ApiResponse<Object> localVarResponse = GetTeamNotificationSubscriptionsWithHttpInfo(accept, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Team Notification Subscriptions Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetTeamNotificationSubscriptionsWithHttpInfo (string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->GetTeamNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamNotificationSubscriptions");

            var localVarPath = "/teams/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Team Notification Subscriptions Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTeamNotificationSubscriptionsAsync (string accept, string id)
        {
             ApiResponse<Object> localVarResponse = await GetTeamNotificationSubscriptionsAsyncWithHttpInfo(accept, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Team Notification Subscriptions Retrieve a list of Notification Subscriptions the given Team has.  &lt;!- - theme: warning - -&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint. 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetTeamNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->GetTeamNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamNotificationSubscriptions");

            var localVarPath = "/teams/{id}/notification_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List members of a team Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Object</returns>
        public Object ListTeamUsers (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = ListTeamUsersWithHttpInfo(accept, contentType, authorization, id, limit, offset, total, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List members of a team Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListTeamUsersWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->ListTeamUsers");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->ListTeamUsers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->ListTeamUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->ListTeamUsers");

            var localVarPath = "/teams/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTeamUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List members of a team Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListTeamUsersAsync (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
             ApiResponse<Object> localVarResponse = await ListTeamUsersAsyncWithHttpInfo(accept, contentType, authorization, id, limit, offset, total, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List members of a team Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="include">Array of additional Models to include in response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListTeamUsersAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, int? offset = null, bool? total = null, string include = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->ListTeamUsers");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->ListTeamUsers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->ListTeamUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->ListTeamUsers");

            var localVarPath = "/teams/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include[]", include)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTeamUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List teams List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>Object</returns>
        public Object ListTeams (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null)
        {
             ApiResponse<Object> localVarResponse = ListTeamsWithHttpInfo(accept, contentType, authorization, limit, offset, total, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List teams List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListTeamsWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->ListTeams");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->ListTeams");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->ListTeams");

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List teams List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListTeamsAsync (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null)
        {
             ApiResponse<Object> localVarResponse = await ListTeamsAsyncWithHttpInfo(accept, contentType, authorization, limit, offset, total, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List teams List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <param name="offset">Offset to start pagination search results. (optional)</param>
        /// <param name="total">By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (optional, default to false)</param>
        /// <param name="query">Filters the result, showing only the records whose name matches the query. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListTeamsAsyncWithHttpInfo (string accept, string contentType, string authorization, int? limit = null, int? offset = null, bool? total = null, string query = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->ListTeams");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->ListTeams");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->ListTeams");

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List audit records for a team The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>AuditRecordResponseSchema</returns>
        public AuditRecordResponseSchema ListTeamsAuditRecords (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = ListTeamsAuditRecordsWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audit records for a team The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>ApiResponse of AuditRecordResponseSchema</returns>
        public ApiResponse< AuditRecordResponseSchema > ListTeamsAuditRecordsWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->ListTeamsAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->ListTeamsAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->ListTeamsAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->ListTeamsAuditRecords");

            var localVarPath = "/teams/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTeamsAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        /// List audit records for a team The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of AuditRecordResponseSchema</returns>
        public async System.Threading.Tasks.Task<AuditRecordResponseSchema> ListTeamsAuditRecordsAsync (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
             ApiResponse<AuditRecordResponseSchema> localVarResponse = await ListTeamsAuditRecordsAsyncWithHttpInfo(accept, contentType, authorization, id, limit, cursor, since, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audit records for a team The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="limit">The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API. (optional)</param>
        /// <param name="cursor">Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set.  (optional)</param>
        /// <param name="since">The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours) (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (AuditRecordResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditRecordResponseSchema>> ListTeamsAuditRecordsAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, int? limit = null, string cursor = null, DateTime? since = null, DateTime? until = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->ListTeamsAuditRecords");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->ListTeamsAuditRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->ListTeamsAuditRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->ListTeamsAuditRecords");

            var localVarPath = "/teams/{id}/audit/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTeamsAuditRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditRecordResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditRecordResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditRecordResponseSchema)));
        }

        /// <summary>
        ///  Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Object</returns>
        public Object RemoveTeamNotificationSubscriptions (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = RemoveTeamNotificationSubscriptionsWithHttpInfo(accept, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RemoveTeamNotificationSubscriptionsWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->RemoveTeamNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->RemoveTeamNotificationSubscriptions");

            var localVarPath = "/teams/{id}/notification_subscriptions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTeamNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveTeamNotificationSubscriptionsAsync (string accept, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await RemoveTeamNotificationSubscriptionsAsyncWithHttpInfo(accept, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Unsubscribe the given Team from Notifications on the matching Subscribable entities.
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The entities to unsubscribe from. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTeamNotificationSubscriptionsAsyncWithHttpInfo (string accept, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->RemoveTeamNotificationSubscriptions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->RemoveTeamNotificationSubscriptions");

            var localVarPath = "/teams/{id}/notification_subscriptions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTeamNotificationSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a team Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateTeam (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateTeamWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a team Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateTeamWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->UpdateTeam");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a team Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateTeamAsync (string accept, string contentType, string authorization, string id, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateTeamAsyncWithHttpInfo(accept, contentType, authorization, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a team Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="body">The team to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTeamAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->UpdateTeam");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add an escalation policy to a team Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns></returns>
        public void UpdateTeamEscalationPolicy (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
             UpdateTeamEscalationPolicyWithHttpInfo(accept, contentType, authorization, id, escalationPolicyId);
        }

        /// <summary>
        /// Add an escalation policy to a team Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTeamEscalationPolicyWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'escalationPolicyId' is set
            if (escalationPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'escalationPolicyId' when calling TeamsApi->UpdateTeamEscalationPolicy");

            var localVarPath = "/teams/{id}/escalation_policies/{escalation_policy_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (escalationPolicyId != null) localVarPathParams.Add("escalation_policy_id", this.Configuration.ApiClient.ParameterToString(escalationPolicyId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeamEscalationPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add an escalation policy to a team Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTeamEscalationPolicyAsync (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
             await UpdateTeamEscalationPolicyAsyncWithHttpInfo(accept, contentType, authorization, id, escalationPolicyId);

        }

        /// <summary>
        /// Add an escalation policy to a team Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams) 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="escalationPolicyId">The escalation policy ID on the team.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTeamEscalationPolicyAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string escalationPolicyId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->UpdateTeamEscalationPolicy");
            // verify the required parameter 'escalationPolicyId' is set
            if (escalationPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'escalationPolicyId' when calling TeamsApi->UpdateTeamEscalationPolicy");

            var localVarPath = "/teams/{id}/escalation_policies/{escalation_policy_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (escalationPolicyId != null) localVarPathParams.Add("escalation_policy_id", this.Configuration.ApiClient.ParameterToString(escalationPolicyId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeamEscalationPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a user to a team Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns></returns>
        public void UpdateTeamUser (string accept, string contentType, string authorization, string id, string userId, Object body = null)
        {
             UpdateTeamUserWithHttpInfo(accept, contentType, authorization, id, userId, body);
        }

        /// <summary>
        /// Add a user to a team Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTeamUserWithHttpInfo (string accept, string contentType, string authorization, string id, string userId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UpdateTeamUser");

            var localVarPath = "/teams/{id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeamUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a user to a team Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTeamUserAsync (string accept, string contentType, string authorization, string id, string userId, Object body = null)
        {
             await UpdateTeamUserAsyncWithHttpInfo(accept, contentType, authorization, id, userId, body);

        }

        /// <summary>
        /// Add a user to a team Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="userId">The user ID on the team.</param>
        /// <param name="body">The role of the user on the team. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTeamUserAsyncWithHttpInfo (string accept, string contentType, string authorization, string id, string userId, Object body = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->UpdateTeamUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UpdateTeamUser");

            var localVarPath = "/teams/{id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeamUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
