/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PagerDuty.ApiClient.Client;

namespace PagerDuty.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPausedIncidentReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Paused Incident Reporting on Alerts
        /// </summary>
        /// <remarks>
        /// Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Object</returns>
        Object GetPausedIncidentReportAlerts (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);

        /// <summary>
        /// Get Paused Incident Reporting on Alerts
        /// </summary>
        /// <remarks>
        /// Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPausedIncidentReportAlertsWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);
        /// <summary>
        /// Get Paused Incident Reporting counts
        /// </summary>
        /// <remarks>
        /// Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Object</returns>
        Object GetPausedIncidentReportCounts (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);

        /// <summary>
        /// Get Paused Incident Reporting counts
        /// </summary>
        /// <remarks>
        /// Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPausedIncidentReportCountsWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Paused Incident Reporting on Alerts
        /// </summary>
        /// <remarks>
        /// Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPausedIncidentReportAlertsAsync (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);

        /// <summary>
        /// Get Paused Incident Reporting on Alerts
        /// </summary>
        /// <remarks>
        /// Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPausedIncidentReportAlertsAsyncWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);
        /// <summary>
        /// Get Paused Incident Reporting counts
        /// </summary>
        /// <remarks>
        /// Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPausedIncidentReportCountsAsync (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);

        /// <summary>
        /// Get Paused Incident Reporting counts
        /// </summary>
        /// <remarks>
        /// Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </remarks>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPausedIncidentReportCountsAsyncWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PausedIncidentReportsApi : IPausedIncidentReportsApi
    {
        private PagerDuty.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PausedIncidentReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PausedIncidentReportsApi(String basePath)
        {
            this.Configuration = new PagerDuty.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PausedIncidentReportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PausedIncidentReportsApi()
        {
            this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PausedIncidentReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PausedIncidentReportsApi(PagerDuty.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PagerDuty.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PagerDuty.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PagerDuty.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PagerDuty.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Paused Incident Reporting on Alerts Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Object</returns>
        public Object GetPausedIncidentReportAlerts (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
             ApiResponse<Object> localVarResponse = GetPausedIncidentReportAlertsWithHttpInfo(accept, contentType, authorization, since, until, serviceId, suspendedBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Paused Incident Reporting on Alerts Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetPausedIncidentReportAlertsWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PausedIncidentReportsApi->GetPausedIncidentReportAlerts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PausedIncidentReportsApi->GetPausedIncidentReportAlerts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PausedIncidentReportsApi->GetPausedIncidentReportAlerts");

            var localVarPath = "/paused_incident_reports/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (serviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service_id", serviceId)); // query parameter
            if (suspendedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended_by", suspendedBy)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPausedIncidentReportAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Paused Incident Reporting on Alerts Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPausedIncidentReportAlertsAsync (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
             ApiResponse<Object> localVarResponse = await GetPausedIncidentReportAlertsAsyncWithHttpInfo(accept, contentType, authorization, since, until, serviceId, suspendedBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Paused Incident Reporting on Alerts Returns the 5 most recent alerts that were triggered after being paused and the 5 most recent alerts that were resolved after being paused for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPausedIncidentReportAlertsAsyncWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PausedIncidentReportsApi->GetPausedIncidentReportAlerts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PausedIncidentReportsApi->GetPausedIncidentReportAlerts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PausedIncidentReportsApi->GetPausedIncidentReportAlerts");

            var localVarPath = "/paused_incident_reports/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (serviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service_id", serviceId)); // query parameter
            if (suspendedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended_by", suspendedBy)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPausedIncidentReportAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Paused Incident Reporting counts Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Object</returns>
        public Object GetPausedIncidentReportCounts (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
             ApiResponse<Object> localVarResponse = GetPausedIncidentReportCountsWithHttpInfo(accept, contentType, authorization, since, until, serviceId, suspendedBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Paused Incident Reporting counts Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetPausedIncidentReportCountsWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PausedIncidentReportsApi->GetPausedIncidentReportCounts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PausedIncidentReportsApi->GetPausedIncidentReportCounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PausedIncidentReportsApi->GetPausedIncidentReportCounts");

            var localVarPath = "/paused_incident_reports/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (serviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service_id", serviceId)); // query parameter
            if (suspendedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended_by", suspendedBy)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPausedIncidentReportCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Paused Incident Reporting counts Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPausedIncidentReportCountsAsync (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
             ApiResponse<Object> localVarResponse = await GetPausedIncidentReportCountsAsyncWithHttpInfo(accept, contentType, authorization, since, until, serviceId, suspendedBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Paused Incident Reporting counts Returns reporting counts for paused Incident usage for a given reporting period (maximum 6 months lookback period).  Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#paused-incident-reports)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
        /// </summary>
        /// <exception cref="PagerDuty.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">The &#x60;Accept&#x60; header is used as a versioning header.</param>
        /// <param name="contentType"></param>
        /// <param name="authorization">The &#x60;Authorization&#x60; header is used as a versioning header.</param>
        /// <param name="since">The start of the date range over which you want to search. (optional)</param>
        /// <param name="until">The end of the date range over which you want to search. (optional)</param>
        /// <param name="serviceId">Specifies a filter to limit the scope of reporting to a particular service (optional)</param>
        /// <param name="suspendedBy">Specifies a filter to scope the response to either alerts suspended by Auto Pause or Event Rules. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPausedIncidentReportCountsAsyncWithHttpInfo (string accept, string contentType, string authorization, DateTime? since = null, DateTime? until = null, string serviceId = null, string suspendedBy = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PausedIncidentReportsApi->GetPausedIncidentReportCounts");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PausedIncidentReportsApi->GetPausedIncidentReportCounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PausedIncidentReportsApi->GetPausedIncidentReportCounts");

            var localVarPath = "/paused_incident_reports/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.AddOrUpdate("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (serviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service_id", serviceId)); // query parameter
            if (suspendedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended_by", suspendedBy)); // query parameter
            if (accept != null) localVarHeaderParams.AddOrUpdate("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.AddOrUpdate("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.AddOrUpdate("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPausedIncidentReportCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
